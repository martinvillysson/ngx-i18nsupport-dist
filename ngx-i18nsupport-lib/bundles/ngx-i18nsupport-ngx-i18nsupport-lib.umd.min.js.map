{"version":3,"sources":["../../../projects/ngx-i18nsupport-lib/src/lib/ngx-i18nsupport-lib.module.ts","../../../projects/ngx-i18nsupport-lib/src/api/constants.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-i18nsupport-lib/src/impl/dom-utilities.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-part.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xml-serializer.ts","../../../projects/ngx-i18nsupport-lib/src/impl/abstract-translation-messages-file.ts","../../../projects/ngx-i18nsupport-lib/src/impl/abstract-trans-unit.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-part-text.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-part-placeholder.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-part-start-tag.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-part-end-tag.ts","../../../projects/ngx-i18nsupport-lib/src/impl/icu-message-tokenizer.ts","../../../projects/ngx-i18nsupport-lib/src/impl/icu-message.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-part-icu-message.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-part-icu-message-ref.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-part-empty-tag.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message.ts","../../../projects/ngx-i18nsupport-lib/src/impl/parsed-message-tokenizer.ts","../../../projects/ngx-i18nsupport-lib/src/impl/abstract-message-parser.ts","../../../projects/ngx-i18nsupport-lib/src/impl/tag-mapping.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xliff-message-parser.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xliff-trans-unit.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xliff-file.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xmb-message-parser.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xmb-trans-unit.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xmb-file.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xliff2-message-parser.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xliff2-trans-unit.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xliff2-file.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xtb-trans-unit.ts","../../../projects/ngx-i18nsupport-lib/src/impl/xtb-file.ts","../../../projects/ngx-i18nsupport-lib/src/api/translation-messages-file-factory.ts"],"names":["NgxI18nsupportLibModule","imports","FORMAT_XLIFF12","FORMAT_XLIFF20","FORMAT_XMB","FORMAT_XTB","FILETYPE_XLIFF12","FILETYPE_XLIFF20","STATE_NEW","STATE_TRANSLATED","STATE_FINAL","NORMALIZATION_FORMAT_NGXTRANSLATE","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","next","done","push","value","error","__spread","arguments","length","concat","ParsedMessagePartType","DOMUtilities","getFirstElementByTagName","element","tagName","matchingElements","getElementsByTagName","item","getElementByTagNameAndId","id","node","getAttribute","getElementFollowingSibling","nextSibling","nodeType","ELEMENT_NODE","getElementPrecedingSibling","previousSibling","getXMLContent","result","XMLSerializer","serializeToString","nodeName","reStartMsg","RegExp","replace","reEndMsg","getPCDATA","childNodes","child","TEXT_NODE","CDATA_SECTION_NODE","nodeValue","replaceContentWithXMLContent","pcdata","firstChild","removeChild","newChildren","DOMParser","parseFromString","j","newChild","appendChild","ownerDocument","importNode","getPreviousElementSibling","createFollowingSibling","elementNameToCreate","newElement","createElement","insertAfter","parentNode","insertBefore","XmlSerializer","document","options","buf","visibleNamespaces","refNode","documentElement","prefix","uri","namespaceURI","lookupPrefix","namespace","indentString","containsOnlyWhiteSpace","Error","doSerializeToString","join","indentLevel","partOfMixedContent","elementNode","attrs","attributes","len","elementHasMixedContent","isMixedContentElement","outputIndented","attr","localName","needNamespaceDefine","ns","hasComplexContent","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","ATTRIBUTE_NODE","attrNode","name","_xmlEncoder","textNode","beautify","data","cdatasectionNode","COMMENT_NODE","commentNode","DOCUMENT_TYPE_NODE","documenttypeNode","pubid","publicId","sysid","systemId","PROCESSING_INSTRUCTION_NODE","piNode","target","ENTITY_REFERENCE_NODE","c","charCodeAt","outputParts","_i","indentationString","apply","indent","mixedContentElements","find","tag","text","charAt","AbstractTranslationMessagesFile","transUnits","_warnings","parseContent","xmlString","path","encoding","optionalMaster","_filename","_encoding","_parsedDocument","_fileEndsWithEOL","endsWith","lazyInitializeTransUnits","isNullOrUndefined","initializeTransUnits","countNumbers","_this","_numberOfTransUnitsWithMissingId","_numberOfUntranslatedTransUnits","_numberOfReviewedTransUnits","forEachTransUnit","tu","state","targetState","warnings","numberOfTransUnits","numberOfUntranslatedTransUnits","numberOfReviewedTransUnits","numberOfTransUnitsWithMissingId","callback","forEach","transUnitWithId","setNewTransUnitTargetPraefix","targetPraefix","getNewTransUnitTargetPraefix","setNewTransUnitTargetSuffix","targetSuffix","getNewTransUnitTargetSuffix","removeTransUnitWithId","tuNode","getElementById","filter","filename","editedContent","beautifyOutput","elementsWithMixedContent","AbstractTransUnit","_element","_id","_translationMessagesFile","defineProperty","translationMessagesFile","supportsSetSourceContent","sourceContentNormalized","_sourceContentNormalized","createSourceContentNormalized","nativeState","nativeTargetState","mapNativeStateToState","setTargetState","newState","setNativeTargetState","mapStateToNativeState","supportsSetSourceReferences","supportsSetDescriptionAndMeaning","checkNotes","newNotes","errorInFromNote","note","from","asXmlElement","translate","translation","translationNative","isString","asNativeString","translateNative","isICUMessage","message","messageParser","isICUMessageStart","ParsedMessagePart","type","ParsedMessagePartText","_super","TEXT","asDisplayString","format","ParsedMessagePartPlaceholder","index","disp","PLACEHOLDER","_index","_disp","ParsedMessagePartStartTag","tagname","idcounter","START_TAG","_tagname","_idcounter","toString","idCounter","ParsedMessagePartEndTag","END_TAG","CURLY_BRACE_OPEN","CURLY_BRACE_CLOSE","COMMA","PLURAL","SELECT","STATE_NORMAL","STATE_IN_MESSAGE","ICUMessageTokenizer","getLexer","lexer","Tokenizr","plaintext","openedCurlyBracesInTextCounter","before","ctx","match","rule","containsNonWhiteSpace","accept","ignore","finish","pop","char","test","tokenize","normalizedMessage","input","tokens","token","peek","MessageCategory","_category","_message","getCategory","getMessageNormalized","ICUMessage","_parser","isPluralMessage","_isPluralMessage","_categories","addCategory","category","varname","choiceString","isSelectMessage","getCategories","translatedCategories","Set","translatedMessage","translationForCategory","add","parseNormalizedString","keys","categoryName","has","checkValidPluralCategory","allowedKeywords","key","ParsedMessagePartICUMessage","icuMessageText","ICU_MESSAGE","parseICUMessage","looksLikeICUMessage","displayFormat","getICUMessage","_messageText","_tokenizer","expectNext","trim","parseNativeSubMessage","tokentype","createNormalizedMessageFromXMLString","ParsedMessagePartICUMessageRef","ICU_MESSAGE_REF","ParsedMessagePartEmptyTag","EMPTY_TAG","ParsedMessage","parser","sourceMessage","_parts","getParser","normalizedString","translateICUMessage","icuTranslation","icuMessage","translatedICUMessage","translateNativeString","nativeString","map","part","_xmlRepresentation","validate","hasErrors","errors","checkPlaceholderAdded","placeholderAdded","checkICUMessageRefRemoved","icuMessageRefRemoved","checkICUMessageRefAdded","icuMessageRefAdded","validateWarnings","w","hasWarnings","checkPlaceholderRemoved","placeholderRemoved","checkTagRemoved","tagRemoved","checkTagAdded","tagAdded","containsICUMessageRef","findIndex","suspiciousIndexes","sourcePlaceholders_1","allPlaceholders","allSuspiciousIndexes_1","first_1","sourcePlaceholders","myPlaceholders_1","allSuspiciousIndexes_2","first_2","sourceICURefs_1","allICUMessageRefs","allSuspiciousIndexes_3","first_3","sourceICURefs","myICURefs_1","allSuspiciousIndexes_4","first_4","parts","getPlaceholderDisp","placeHolder","phPart","getICUMessageRefDisp","icuMessageRefPart","refPart","suspiciousTags","sourceTags_1","allTags","allSuspiciousTags_1","first_5","sourceTags","myTags_1","allSuspiciousTags_2","first_6","setXmlRepresentation","xmlRepresentation","addText","addPlaceholder","addStartTag","addEndTag","openTag","calculateOpenTagName","addEmptyTag","addICUMessageRef","addICUMessage","openTags","ParsedMesageTokenizer","idcount","parseInt","reset","AbstractMessageParser","createNormalizedMessageFromXML","xmlElement","addPartsOfNodeToMessage","includeSelf","processChildren","textContent","processStartElement","getICUMessageText","isICU","console","log","children","processEndElement","createXmlRepresentation","icuMessageString","parseIdCountFromName","exec","num","rootElem","addXmlRepresentationToRoot","createXmlRepresentationOfTextPart","createTextNode","TAG_TO_PLACEHOLDER_NAMES","A","B","BR","EM","H1","H2","H3","H4","H5","H6","HR","I","LI","LINK","OL","P","Q","S","SMALL","SUB","SUP","TBODY","TD","TFOOT","TH","THEAD","TR","TT","U","UL","VOID_TAGS","TagMapping","getStartTagPlaceholderName","upperTag","toUpperCase","counterString","getCloseTagPlaceholderName","getEmptyTagPlaceholderName","getCtypeForTag","toLowerCase","getTagnameFromStartTagPlaceholderName","placeholderName","startsWith","stripCounter","substring","ph_1","matchKey","getTagnameFromCloseTagPlaceholderName","ph_2","isEmptyTagPlaceholderName","ph","indexOf","getTagnameFromEmptyTagPlaceholderName","re","XliffMessageParser","tagMapping","parsePlaceholderIndexFromId","parseICUMessageRefIndexFromId","normalizedTagName","indexString","Number","createXmlRepresentationOfStartTagPart","createXmlRepresentationOfEndTagPart","createXmlRepresentationOfEmptyTagPart","createXmlRepresentationOfPlaceholderPart","createXmlRepresentationOfICUMessageRefPart","xElem","idAttrib","ctypeAttrib","equivTextAttr","setAttribute","XliffTransUnit","sourceContent","sourceElement","setSourceContent","newContent","source","targetContent","targetElement","targetContentNormalized","sourceReferences","sourceElements","sourceRefs","elem","contextElements","sourcefile","linenumber","contextElem","setSourceReferences","removeAllSourceReferences","ref","contextGroup","contextSource","contextLine","toBeRemoved","description","noteElem","findNoteElementWithFromAttribute","setDescription","createNoteElementWithFromAttribute","removeNoteElementWithFromAttribute","attrValue","noteElements","findAllAdditionalNoteElements","fromAttribute","fromAttrValue","content","noteElement","removeAllAdditionalNoteElements","meaning","setMeaning","notes","supportsSetNotes","setNotes","cloneWithSourceAsTarget","isDefaultLang","copyContent","targetFile","clone","cloneNode","useSourceAsTarget","sourceString","newTargetString","XliffFile","initializeFromContent","xliffList","version","i18nFormat","fileType","transUnitsInFile","transunit","sourceLanguage","fileElem","setSourceLanguage","language","targetLanguage","setTargetLanguage","importNewTransUnit","foreignTransUnit","importAfterElement","newTu","bodyElement","inserted","isAfterElementPartOfFile","undefined","firstUnitElement","refUnitElement","createTranslationFileForLang","lang","translationFile","transUnit","XmbMessageParser","parsePlaceholderIndexFromName","parseTagnameFromPhElement","emptyTagName","parseICUMessageIndexFromName","messageText","reSource","phElement","exElement","createXmlRepresentationOfPart","phElem","nameAttrib","exElem","XmbTransUnit","parseSourceAndPos","sourceAndPos","lastIndexOf","parseLineNumber","lineNumberString","msgContent","insertPosition","XmbFile","_translationMessageFileFactory","msg","guessLanguageFromFilename","split","createFileFromFileContent","xmlContent","Xliff2MessageParser","isInterpolation","isEmptyTag","equiv","embeddedTagName","tagNameFromPCElement","pcNode","dispStart","stack","newTagElem","closeTagName","emptyTagElem","pcElem","equivStart","equivEnd","dispEnd","getTypeForTag","equivAttrib","Xliff2TransUnit","segmentElement","notesElement","findNoteElementWithCategoryAttribute","createNoteElementWithCategoryAttribute","removeNoteElementWithCategoryAttribute","removeNotesElementIfEmpty","segment","Xliff2File","xliffElem","fileElement","XtbTransUnit","_sourceTransUnitFromMaster","XtbFile","_masterFile","numberInMaster","myNumber","masterUnit","translationbundleElem","newMasterTu","translationElement","firstTranslationElement","TranslationMessagesFileFactory","fromFileContent","fromUnknownFormatFileContent","createFileFromUnknownFormatFileContent","formatCandidates","formatCandidate"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [],\r\n  exports: []\r\n})\r\nexport class NgxI18nsupportLibModule { }\r\n","/**\r\n * Created by roobm on 08.05.2017.\r\n * Some constant values used in the API.\r\n */\r\n\r\n/**\r\n * supported file formats\r\n */\r\nexport const FORMAT_XLIFF12 = 'xlf';\r\nexport const FORMAT_XLIFF20 = 'xlf2';\r\nexport const FORMAT_XMB = 'xmb';\r\nexport const FORMAT_XTB = 'xtb';\r\n\r\n/**\r\n * File types\r\n * (returned by fileType() method)\r\n */\r\nexport const FILETYPE_XLIFF12 = 'XLIFF 1.2';\r\nexport const FILETYPE_XLIFF20 = 'XLIFF 2.0';\r\nexport const FILETYPE_XMB = 'XMB';\r\nexport const FILETYPE_XTB = 'XTB';\r\n\r\n/**\r\n * abstract state value.\r\n * There are only 3 supported state values.\r\n */\r\n\r\n/**\r\n * State NEW.\r\n * Signals an untranslated unit.\r\n */\r\nexport const STATE_NEW = 'new';\r\n/**\r\n * State TRANSLATED.\r\n * Signals a translated unit, that is not reviewed until now.\r\n */\r\nexport const STATE_TRANSLATED = 'translated';\r\n/**\r\n * State FINAL.\r\n * Signals a translated unit, that is reviewed and ready for use.\r\n */\r\nexport const STATE_FINAL = 'final';\r\n\r\n/**\r\n * Normalizaton message formats.\r\n */\r\n\r\n/**\r\n * Default format, contains placeholders, html markup.\r\n */\r\nexport const NORMALIZATION_FORMAT_DEFAULT = 'default';\r\n\r\n/**\r\n * Format for usage in ngxtranslate messages.\r\n * Placeholder are in the form {{n}}, no html markup.\r\n */\r\nexport const NORMALIZATION_FORMAT_NGXTRANSLATE = 'ngxtranslate';\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {DOMParser, XMLSerializer} from 'xmldom';\r\n/**\r\n * Created by martin on 01.05.2017.\r\n * Some Tool functions for XML Handling.\r\n */\r\n\r\nexport class DOMUtilities {\r\n\r\n    /**\r\n     * return the first subelement with the given tag.\r\n     * @param element element\r\n     * @param tagName tagName\r\n     * @return subelement or null, if not existing.\r\n     */\r\n    public static getFirstElementByTagName(element: Element | Document, tagName: string): Element {\r\n        const matchingElements = element.getElementsByTagName(tagName);\r\n        if (matchingElements && matchingElements.length > 0) {\r\n            return matchingElements.item(0);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return an element with the given tag and id attribute.\r\n     * @param element element\r\n     * @param tagName tagName\r\n     * @param id id\r\n     * @return subelement or null, if not existing.\r\n     */\r\n    public static getElementByTagNameAndId(element: Element | Document, tagName: string, id: string): Element {\r\n        const matchingElements = element.getElementsByTagName(tagName);\r\n        if (matchingElements && matchingElements.length > 0) {\r\n            for (let i = 0; i < matchingElements.length; i++) {\r\n                const node: Element = matchingElements.item(i);\r\n                if (node.getAttribute('id') === id) {\r\n                    return node;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get next sibling, that is an element.\r\n     * @param element element\r\n     */\r\n    public static getElementFollowingSibling(element: Element): Element {\r\n        if (!element) {\r\n            return null;\r\n        }\r\n        let e = element.nextSibling;\r\n        while (e) {\r\n            if (e.nodeType === e.ELEMENT_NODE) {\r\n                return <Element> e;\r\n            }\r\n            e = e.nextSibling;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get previous sibling, that is an element.\r\n     * @param element element\r\n     */\r\n    public static getElementPrecedingSibling(element: Element): Element {\r\n        if (!element) {\r\n            return null;\r\n        }\r\n        let e = element.previousSibling;\r\n        while (e) {\r\n            if (e.nodeType === e.ELEMENT_NODE) {\r\n                return <Element> e;\r\n            }\r\n            e = e.previousSibling;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * return content of element as string, including all markup.\r\n     * @param element element\r\n     * @return content of element as string, including all markup.\r\n     */\r\n    public static getXMLContent(element: Element): string {\r\n        if (!element) {\r\n            return null;\r\n        }\r\n        let result = new XMLSerializer().serializeToString(element);\r\n        const tagName = element.nodeName;\r\n        const reStartMsg: RegExp = new RegExp('<' + tagName + '[^>]*>', 'g');\r\n        result = result.replace(reStartMsg, '');\r\n        const reEndMsg: RegExp = new RegExp('</' + tagName + '>', 'g');\r\n        result = result.replace(reEndMsg, '');\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * return PCDATA content of element.\r\n     * @param element element\r\n     * @return PCDATA content of element.\r\n     */\r\n    public static getPCDATA(element: Element): string {\r\n        if (!element) {\r\n            return null;\r\n        }\r\n        let result = '';\r\n        const childNodes = element.childNodes;\r\n        for (let i = 0; i < childNodes.length; i++) {\r\n            const child = childNodes.item(i);\r\n            if (child.nodeType === child.TEXT_NODE || child.nodeType === child.CDATA_SECTION_NODE) {\r\n                result = result + child.nodeValue;\r\n            }\r\n        }\r\n        return result.length === 0 ? null : result;\r\n    }\r\n\r\n    /**\r\n     * replace PCDATA content with a new one.\r\n     * @param element element\r\n     * @param pcdata pcdata\r\n     */\r\n    public static replaceContentWithXMLContent(element: Element, pcdata: string) {\r\n        // remove all children\r\n        while (element.firstChild) {\r\n            element.removeChild(element.firstChild);\r\n        }\r\n        // parseICUMessage pcdata\r\n        const pcdataFragment: Document = new DOMParser().parseFromString('<fragment>' + pcdata + '</fragment>', 'application/xml');\r\n        const newChildren = pcdataFragment.getElementsByTagName('fragment').item(0).childNodes;\r\n        for (let j = 0; j < newChildren.length; j++) {\r\n            const newChild = newChildren.item(j);\r\n            element.appendChild(element.ownerDocument.importNode(newChild, true));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * find the previous sibling that is an element.\r\n     * @param element element\r\n     * @return the previous sibling that is an element or null.\r\n     */\r\n    public static getPreviousElementSibling(element: Node): Element {\r\n        let node = element.previousSibling;\r\n        while (node !== null) {\r\n            if (node.nodeType === node.ELEMENT_NODE) {\r\n                return <Element> node;\r\n            }\r\n            node = node.previousSibling;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Create an Element Node that is the next sibling of a given node.\r\n     * @param elementNameToCreate elementNameToCreate\r\n     * @param previousSibling previousSibling\r\n     * @return new element\r\n     */\r\n    public static createFollowingSibling(elementNameToCreate: string, previousSibling: Node): Element {\r\n        const newElement = previousSibling.ownerDocument.createElement(elementNameToCreate);\r\n        return <Element> DOMUtilities.insertAfter(newElement, previousSibling);\r\n    }\r\n\r\n    /**\r\n     * Insert newElement directly after previousSibling.\r\n     * @param newElement newElement\r\n     * @param previousSibling previousSibling\r\n     */\r\n    public static insertAfter(newElement: Node, previousSibling: Node): Node {\r\n        if (previousSibling.nextSibling !== null) {\r\n            previousSibling.parentNode.insertBefore(newElement, previousSibling.nextSibling);\r\n        } else {\r\n            previousSibling.parentNode.appendChild(newElement);\r\n        }\r\n        return newElement;\r\n    }\r\n\r\n    /**\r\n     * Insert newElement directly before nextSibling.\r\n     * @param newElement newElement\r\n     * @param nextSibling nextSibling\r\n     */\r\n    public static insertBefore(newElement: Node, nextSibling: Node): Node {\r\n        nextSibling.parentNode.insertBefore(newElement, nextSibling);\r\n        return newElement;\r\n    }\r\n}\r\n","/**\r\n * Created by martin on 05.05.2017.\r\n * A part of a parsed message.\r\n * Can be a text, a placeholder, a tag\r\n */\r\n\r\nexport enum ParsedMessagePartType {\r\n    TEXT,\r\n    PLACEHOLDER,\r\n    START_TAG,\r\n    END_TAG,\r\n    EMPTY_TAG,\r\n    ICU_MESSAGE,\r\n    ICU_MESSAGE_REF\r\n}\r\n\r\nexport abstract class ParsedMessagePart {\r\n\r\n    constructor(public type: ParsedMessagePartType) {\r\n\r\n    }\r\n\r\n    /**\r\n     * String representation of the part.\r\n     * @param format optional way to determine the exact syntax.\r\n     * Allowed formats are defined as constants NORMALIZATION_FORMAT...\r\n     */\r\n    public abstract asDisplayString(format?: string): string;\r\n\r\n}\r\n","/**\r\n * An XmlSerializer that supports formatting.\r\n * Original code is based on [xmldom](https://www.npmjs.com/package/xmldom)\r\n * It is extended to support formatting including handling of elements with mixed content.\r\n * Example formatted output:\r\n * <pre>\r\n *     <doc>\r\n *         <element>An element with\r\n *             <b>mixed</b>\r\n *              content\r\n *         </element>\r\n *     </doc>\r\n * </pre>\r\n * Same when \"element\" is indicated as \"mixedContentElement\":\r\n * <pre>\r\n *     <doc>\r\n *         <element>An element with <b>mixed</b> content</element>\r\n *     </doc>\r\n * </pre>\r\n */\r\n\r\ninterface Namespace {\r\n    prefix: string;\r\n    namespace: string;\r\n}\r\n\r\n/**\r\n * Options used to control the formatting\r\n */\r\nexport interface XmlSerializerOptions {\r\n    beautify?: boolean; // set to activate beautify\r\n    indentString?: string; // Sequence uses for indentation, must only contain white space chars, e.g. \"  \" or \"    \" or \"\\t\"\r\n    mixedContentElements?: string[]; // Names of elements containing mixed content (these are not beautified)\r\n}\r\n\r\nconst DEFAULT_INDENT_STRING = '  ';\r\n\r\nexport class XmlSerializer {\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /**\r\n     * Serialze xml document to string.\r\n     * @param document the document\r\n     * @param options can be used to activate beautifying.\r\n     */\r\n    serializeToString(document: Document, options?: XmlSerializerOptions): string {\r\n        const buf = [];\r\n        let visibleNamespaces: Namespace[] = [];\r\n        const refNode = document.documentElement;\r\n        let prefix = refNode.prefix;\r\n        const uri = refNode.namespaceURI;\r\n\r\n        if (uri && prefix == null) {\r\n            prefix = refNode.lookupPrefix(uri);\r\n            if (prefix == null) {\r\n                visibleNamespaces = [\r\n                    {namespace: uri, prefix: null}\r\n                    // {namespace:uri,prefix:''}\r\n                ];\r\n            }\r\n        }\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        if (options.indentString) {\r\n            if (!this.containsOnlyWhiteSpace(options.indentString)) {\r\n                throw new Error('indentString must not contain non white characters');\r\n            }\r\n        }\r\n        this.doSerializeToString(document, options, buf, 0, false, visibleNamespaces);\r\n        return buf.join('');\r\n    }\r\n\r\n    /**\r\n     * Main format method that does all the work.\r\n     * Outputs a node to the outputbuffer.\r\n     * @param node the node to be formatted.\r\n     * @param options options\r\n     * @param buf outputbuffer, new output will be appended to this array.\r\n     * @param indentLevel Lever of indentation for formatted output.\r\n     * @param partOfMixedContent true, if node is a subelement of an element containind mixed content.\r\n     * @param visibleNamespaces visibleNamespaces\r\n     */\r\n    private doSerializeToString(node: Node, options: XmlSerializerOptions, buf: string[],\r\n                                indentLevel: number, partOfMixedContent: boolean, visibleNamespaces: Namespace[]) {\r\n        let child: Node;\r\n        switch (node.nodeType) {\r\n            case node.ELEMENT_NODE:\r\n                const elementNode: Element = <Element> node;\r\n                const attrs = elementNode.attributes;\r\n                const len = attrs.length;\r\n                child = elementNode.firstChild;\r\n                const nodeName = elementNode.tagName;\r\n                const elementHasMixedContent = this.isMixedContentElement(nodeName, options);\r\n                if (partOfMixedContent) {\r\n                    buf.push('<' , nodeName);\r\n                } else {\r\n                    this.outputIndented(options, buf, indentLevel, '<' , nodeName);\r\n                }\r\n\r\n                for (let i = 0; i < len; i++) {\r\n                    // add namespaces for attributes\r\n                    const attr = attrs.item(i);\r\n                    if (attr.prefix === 'xmlns') {\r\n                        visibleNamespaces.push({prefix: attr.localName, namespace: attr.value});\r\n                    } else if (attr.nodeName === 'xmlns') {\r\n                        visibleNamespaces.push({prefix: '', namespace: attr.value});\r\n                    }\r\n                }\r\n                for (let i = 0; i < len; i++) {\r\n                    const attr = attrs.item(i);\r\n                    if (this.needNamespaceDefine(attr, visibleNamespaces)) {\r\n                        const prefix = attr.prefix || '';\r\n                        const uri = attr.namespaceURI;\r\n                        const ns = prefix ? ' xmlns:' + prefix : ' xmlns';\r\n                        buf.push(ns, '=\"', uri, '\"');\r\n                        visibleNamespaces.push({prefix: prefix, namespace: uri});\r\n                    }\r\n                    this.doSerializeToString(attr, options, buf, indentLevel, false, visibleNamespaces);\r\n                }\r\n                // add namespace for current node\r\n                if (this.needNamespaceDefine(elementNode, visibleNamespaces)) {\r\n                    const prefix = elementNode.prefix || '';\r\n                    const uri = node.namespaceURI;\r\n                    const ns = prefix ? ' xmlns:' + prefix : ' xmlns';\r\n                    buf.push(ns, '=\"', uri, '\"');\r\n                    visibleNamespaces.push({prefix: prefix, namespace: uri});\r\n                }\r\n\r\n                if (child) {\r\n                    buf.push('>');\r\n                    // if is cdata child node\r\n                    let hasComplexContent = false;\r\n                    while (child) {\r\n                        if (child.nodeType === child.ELEMENT_NODE) {\r\n                            hasComplexContent = true;\r\n                        }\r\n                        this.doSerializeToString(child, options, buf, indentLevel + 1,\r\n                            partOfMixedContent || elementHasMixedContent, visibleNamespaces);\r\n                        child = child.nextSibling;\r\n                    }\r\n                    if (!partOfMixedContent && !elementHasMixedContent && hasComplexContent) {\r\n                        this.outputIndented(options, buf, indentLevel, '</', nodeName, '>');\r\n                    } else {\r\n                        buf.push('</', nodeName, '>');\r\n                    }\r\n                } else {\r\n                    buf.push('/>');\r\n                }\r\n                return;\r\n            case node.DOCUMENT_NODE:\r\n            case node.DOCUMENT_FRAGMENT_NODE:\r\n                child = node.firstChild;\r\n                while (child) {\r\n                    this.doSerializeToString(child, options, buf, indentLevel, false, visibleNamespaces);\r\n                    child = child.nextSibling;\r\n                }\r\n                return;\r\n            case node.ATTRIBUTE_NODE:\r\n                const attrNode = <Attr> node;\r\n                return buf.push(' ', attrNode.name, '=\"', attrNode.value.replace(/[<&\"]/g, this._xmlEncoder), '\"');\r\n            case node.TEXT_NODE:\r\n                const textNode = <Text> node;\r\n                if (!options.beautify || partOfMixedContent || !this.containsOnlyWhiteSpace(textNode.data)) {\r\n                    return buf.push(textNode.data.replace(/[<&]/g, this._xmlEncoder));\r\n                }\r\n                return;\r\n            case node.CDATA_SECTION_NODE:\r\n                const cdatasectionNode = <CDATASection> node;\r\n                return buf.push('<![CDATA[', cdatasectionNode.data, ']]>');\r\n            case node.COMMENT_NODE:\r\n                const commentNode = <Comment> node;\r\n                return buf.push('<!--', commentNode.data, '-->');\r\n            case node.DOCUMENT_TYPE_NODE:\r\n                const documenttypeNode = <DocumentType> node;\r\n                const pubid = documenttypeNode.publicId;\r\n                const sysid = documenttypeNode.systemId;\r\n                buf.push('<!DOCTYPE ', documenttypeNode.name);\r\n                if (pubid) {\r\n                    buf.push(' PUBLIC \"', pubid);\r\n                    if (sysid && sysid !== '.') {\r\n                        buf.push('\" \"', sysid);\r\n                    }\r\n                    buf.push('\">');\r\n                } else if (sysid && sysid !== '.') {\r\n                    buf.push(' SYSTEM \"', sysid, '\">');\r\n                } else {\r\n                    buf.push('>');\r\n                }\r\n                return;\r\n            case node.PROCESSING_INSTRUCTION_NODE:\r\n                const piNode = <ProcessingInstruction> node;\r\n                return buf.push( '<?', piNode.target, ' ', piNode.data, '?>');\r\n            case node.ENTITY_REFERENCE_NODE:\r\n                return buf.push('&', node.nodeName, ';');\r\n            // case ENTITY_NODE:\r\n            // case NOTATION_NODE:\r\n            default:\r\n                buf.push('??', node.nodeName);\r\n        }\r\n    }\r\n\r\n    private needNamespaceDefine(node: Element | Attr, visibleNamespaces: Namespace[]): boolean {\r\n        const prefix = node.prefix || '';\r\n        const uri = node.namespaceURI;\r\n        if (!prefix && !uri) {\r\n            return false;\r\n        }\r\n        if (prefix === 'xml' && uri === 'http://www.w3.org/XML/1998/namespace'\r\n            || uri === 'http://www.w3.org/2000/xmlns/') {\r\n            return false;\r\n        }\r\n\r\n        let i = visibleNamespaces.length;\r\n        while (i--) {\r\n            const ns = visibleNamespaces[i];\r\n            // get namespace prefix\r\n            if (ns.prefix === prefix) {\r\n                return ns.namespace !== uri;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private _xmlEncoder(c: string): string {\r\n        return c === '<' && '&lt;' ||\r\n            c === '>' && '&gt;' ||\r\n            c === '&' && '&amp;' ||\r\n            c === '\"' && '&quot;' ||\r\n            '&#' + c.charCodeAt(0) + ';';\r\n    }\r\n\r\n    private outputIndented(options: XmlSerializerOptions, buf: string[], indentLevel: number, ...outputParts: string[]) {\r\n        if (options.beautify) {\r\n            buf.push('\\n');\r\n            if (indentLevel > 0) {\r\n                buf.push(this.indentationString(options, indentLevel));\r\n            }\r\n        }\r\n        buf.push(...outputParts);\r\n    }\r\n\r\n    private indentationString(options: XmlSerializerOptions, indentLevel: number): string {\r\n        const indent = (options.indentString) ? options.indentString : DEFAULT_INDENT_STRING;\r\n        let result = '';\r\n        for (let i = 0; i < indentLevel; i++) {\r\n            result = result + indent;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Test, wether tagName is an element containing mixed content.\r\n     * @param tagName tagName\r\n     * @param options options\r\n     */\r\n    private isMixedContentElement(tagName: string, options: XmlSerializerOptions): boolean {\r\n        if (options && options.mixedContentElements) {\r\n            return !!options.mixedContentElements.find((tag) => tag === tagName);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private containsOnlyWhiteSpace(text: string): boolean {\r\n        for (let i = 0; i < text.length; i++) {\r\n            const c = text.charAt(i);\r\n            if (!(c === ' ' || c === '\\t' || c === '\\r' || c === '\\n')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n","import {STATE_NEW, STATE_TRANSLATED} from '../api/constants';\r\nimport {ITranslationMessagesFile} from '../api/i-translation-messages-file';\r\nimport {INormalizedMessage} from '../api/i-normalized-message';\r\nimport {ITransUnit} from '../api/i-trans-unit';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {DOMParser} from 'xmldom';\r\nimport {XmlSerializer, XmlSerializerOptions} from './xml-serializer';\r\n/**\r\n * Created by roobm on 09.05.2017.\r\n * Abstract superclass for all implementations of ITranslationMessagesFile.\r\n */\r\n\r\nexport abstract class AbstractTranslationMessagesFile implements ITranslationMessagesFile {\r\n\r\n    protected _filename: string;\r\n\r\n    protected _encoding: string;\r\n\r\n    protected _parsedDocument: Document;\r\n\r\n    protected _fileEndsWithEOL: boolean;\r\n\r\n    // trans-unit elements and their id from the file\r\n    protected transUnits: ITransUnit[];\r\n\r\n    protected _warnings: string[];\r\n\r\n    protected _numberOfTransUnitsWithMissingId: number;\r\n\r\n    protected _numberOfUntranslatedTransUnits: number;\r\n\r\n    protected _numberOfReviewedTransUnits: number;\r\n\r\n    protected targetPraefix: string;\r\n\r\n    protected targetSuffix: string;\r\n\r\n    protected constructor() {\r\n        this.transUnits = null;\r\n        this._warnings = [];\r\n    }\r\n\r\n    /**\r\n     * Parse file content.\r\n     * Sets _parsedDocument, line ending, encoding, etc.\r\n     * @param xmlString xmlString\r\n     * @param path path\r\n     * @param encoding encoding\r\n     * @param optionalMaster optionalMaster\r\n     */\r\n    protected parseContent(\r\n        xmlString: string,\r\n        path: string, encoding: string,\r\n        optionalMaster?: { xmlContent: string, path: string, encoding: string })\r\n        : void {\r\n        this._filename = path;\r\n        this._encoding = encoding;\r\n        this._parsedDocument = new DOMParser().parseFromString(xmlString, 'text/xml');\r\n        this._fileEndsWithEOL = xmlString.endsWith('\\n');\r\n    }\r\n\r\n    abstract i18nFormat(): string;\r\n\r\n    abstract fileType(): string;\r\n\r\n    /**\r\n     * return tag names of all elements that have mixed content.\r\n     * These elements will not be beautified.\r\n     * Typical candidates are source and target.\r\n     */\r\n    protected abstract elementsWithMixedContent(): string[];\r\n\r\n    /**\r\n     * Read all trans units from xml content.\r\n     * Puts the found units into transUnits.\r\n     * Puts warnings for missing ids.\r\n     */\r\n    protected abstract initializeTransUnits();\r\n\r\n    protected lazyInitializeTransUnits() {\r\n        if (isNullOrUndefined(this.transUnits)) {\r\n            this.initializeTransUnits();\r\n            this.countNumbers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * count units after changes of trans units\r\n     */\r\n    public countNumbers() {\r\n        this._numberOfTransUnitsWithMissingId = 0;\r\n        this._numberOfUntranslatedTransUnits = 0;\r\n        this._numberOfReviewedTransUnits = 0;\r\n        this.forEachTransUnit((tu: ITransUnit) => {\r\n            if (isNullOrUndefined(tu.id) || tu.id === '') {\r\n                this._numberOfTransUnitsWithMissingId++;\r\n            }\r\n            const state = tu.targetState();\r\n            if (isNullOrUndefined(state) || state === STATE_NEW) {\r\n                this._numberOfUntranslatedTransUnits++;\r\n            }\r\n            if (state === STATE_TRANSLATED) {\r\n                this._numberOfReviewedTransUnits++;\r\n            }\r\n        });\r\n    }\r\n\r\n    public warnings(): string[] {\r\n        this.lazyInitializeTransUnits();\r\n        return this._warnings;\r\n    }\r\n\r\n    /**\r\n     * Total number of translation units found in the file.\r\n     */\r\n    public numberOfTransUnits(): number {\r\n        this.lazyInitializeTransUnits();\r\n        return this.transUnits.length;\r\n    }\r\n\r\n    /**\r\n     * Number of translation units without translation found in the file.\r\n     * These units have state 'translated'.\r\n     */\r\n    numberOfUntranslatedTransUnits(): number {\r\n        this.lazyInitializeTransUnits();\r\n        return this._numberOfUntranslatedTransUnits;\r\n    }\r\n\r\n    /**\r\n     * Number of translation units with state 'final'.\r\n     */\r\n    numberOfReviewedTransUnits(): number {\r\n        this.lazyInitializeTransUnits();\r\n        return this._numberOfReviewedTransUnits;\r\n    }\r\n\r\n    /**\r\n     * Number of translation units without translation found in the file.\r\n     * These units have state 'translated'.\r\n     */\r\n    public numberOfTransUnitsWithMissingId(): number {\r\n        this.lazyInitializeTransUnits();\r\n        return this._numberOfTransUnitsWithMissingId;\r\n    }\r\n\r\n    /**\r\n     * Get source language.\r\n     * @return source language.\r\n     */\r\n    abstract sourceLanguage(): string;\r\n\r\n    /**\r\n     * Get target language.\r\n     * @return target language.\r\n     */\r\n    abstract targetLanguage(): string;\r\n\r\n    /**\r\n     * Loop over all Translation Units.\r\n     * @param callback callback\r\n     */\r\n    public forEachTransUnit(callback: ((transunit: ITransUnit) => void)) {\r\n        this.lazyInitializeTransUnits();\r\n        this.transUnits.forEach((tu) => callback(tu));\r\n    }\r\n\r\n    /**\r\n     * Get trans-unit with given id.\r\n     * @param id id\r\n     * @return trans-unit with given id.\r\n     */\r\n    public transUnitWithId(id: string): ITransUnit {\r\n        this.lazyInitializeTransUnits();\r\n        return this.transUnits.find((tu) => tu.id === id);\r\n    }\r\n\r\n    /**\r\n     * Edit functions following her\r\n     */\r\n\r\n    /**\r\n     * Edit the source language.\r\n     * @param language language\r\n     */\r\n    abstract setSourceLanguage(language: string);\r\n\r\n    /**\r\n     * Edit the target language.\r\n     * @param language language\r\n     */\r\n    abstract setTargetLanguage(language: string);\r\n\r\n    /**\r\n     * Set the praefix used when copying source to target.\r\n     * This is used by importNewTransUnit and createTranslationFileForLang methods.\r\n     * (since 1.8.0)\r\n     * @param targetPraefix targetPraefix\r\n     */\r\n    public setNewTransUnitTargetPraefix(targetPraefix: string) {\r\n        this.targetPraefix = targetPraefix;\r\n    }\r\n\r\n    /**\r\n     * Get the praefix used when copying source to target.\r\n     * (since 1.8.0)\r\n     * @return the praefix used when copying source to target.\r\n     */\r\n    getNewTransUnitTargetPraefix(): string {\r\n        return isNullOrUndefined(this.targetPraefix) ? '' : this.targetPraefix;\r\n    }\r\n\r\n    /**\r\n     * Set the suffix used when copying source to target.\r\n     * This is used by importNewTransUnit and createTranslationFileForLang methods.\r\n     * (since 1.8.0)\r\n     * @param targetSuffix targetSuffix\r\n     */\r\n    public setNewTransUnitTargetSuffix(targetSuffix: string) {\r\n        this.targetSuffix = targetSuffix;\r\n    }\r\n\r\n    /**\r\n     * Get the suffix used when copying source to target.\r\n     * (since 1.8.0)\r\n     * @return the suffix used when copying source to target.\r\n     */\r\n    getNewTransUnitTargetSuffix(): string {\r\n        return isNullOrUndefined(this.targetSuffix) ? '' : this.targetSuffix;\r\n    }\r\n\r\n    /**\r\n     * Add a new trans-unit to this file.\r\n     * The trans unit stems from another file.\r\n     * It copies the source content of the tu to the target content too,\r\n     * depending on the values of isDefaultLang and copyContent.\r\n     * So the source can be used as a dummy translation.\r\n     * (used by xliffmerge)\r\n     * @param foreignTransUnit the trans unit to be imported.\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     * @param importAfterElement optional (since 1.10) other transunit (part of this file), that should be used as ancestor.\r\n     * Newly imported trans unit is then inserted directly after this element.\r\n     * If not set or not part of this file, new unit will be imported at the end.\r\n     * If explicity set to null, new unit will be imported at the start.\r\n     * @return the newly imported trans unit (since version 1.7.0)\r\n     * @throws an error if trans-unit with same id already is in the file.\r\n     */\r\n    abstract importNewTransUnit(foreignTransUnit: ITransUnit, isDefaultLang: boolean, copyContent: boolean, importAfterElement?: ITransUnit)\r\n        : ITransUnit;\r\n\r\n    /**\r\n     * Remove the trans-unit with the given id.\r\n     * @param id id\r\n     */\r\n    public removeTransUnitWithId(id: string) {\r\n        const tuNode: Node = this._parsedDocument.getElementById(id);\r\n        if (tuNode) {\r\n            tuNode.parentNode.removeChild(tuNode);\r\n            this.lazyInitializeTransUnits();\r\n            this.transUnits = this.transUnits.filter((tu) => tu.id !== id);\r\n            this.countNumbers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The filename where the data is read from.\r\n     */\r\n    public filename(): string {\r\n        return this._filename;\r\n    }\r\n\r\n    /**\r\n     * The encoding if the xml content (UTF-8, ISO-8859-1, ...)\r\n     */\r\n    public encoding(): string {\r\n        return this._encoding;\r\n    }\r\n\r\n    /**\r\n     * The xml content to be saved after changes are made.\r\n     * @param beautifyOutput Flag whether to use pretty-data to format the output.\r\n     * XMLSerializer produces some correct but strangely formatted output, which pretty-data can correct.\r\n     * See issue #64 for details.\r\n     * Default is false.\r\n     */\r\n    public editedContent(beautifyOutput?: boolean): string {\r\n        const options: XmlSerializerOptions = {};\r\n        if (beautifyOutput === true) {\r\n           options.beautify = true;\r\n           options.indentString = '  ';\r\n           options.mixedContentElements = this.elementsWithMixedContent();\r\n        }\r\n        const result = new XmlSerializer().serializeToString(this._parsedDocument, options);\r\n        if (this._fileEndsWithEOL) {\r\n            // add eol if there was eol in original source\r\n            return result + '\\n';\r\n        } else {\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new translation file for this file for a given language.\r\n     * Normally, this is just a copy of the original one.\r\n     * But for XMB the translation file has format 'XTB'.\r\n     * @param lang Language code\r\n     * @param filename expected filename to store file\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     */\r\n    abstract createTranslationFileForLang(lang: string, filename: string, isDefaultLang: boolean, copyContent: boolean)\r\n        : ITranslationMessagesFile;\r\n}\r\n","import {STATE_TRANSLATED, ITranslationMessagesFile, INormalizedMessage, ITransUnit, INote} from './internalapi';\r\nimport {AbstractTranslationMessagesFile} from './abstract-translation-messages-file';\r\nimport {isNullOrUndefined, isString} from 'util';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {AbstractMessageParser} from './abstract-message-parser';\r\n/**\r\n * Created by roobm on 10.05.2017.\r\n * Abstract superclass for all implementations of ITransUnit.\r\n */\r\n\r\nexport abstract class AbstractTransUnit implements ITransUnit {\r\n\r\n    private _sourceContentNormalized: ParsedMessage;\r\n\r\n    protected constructor(protected _element: Element,\r\n                          protected _id: string,\r\n                          protected _translationMessagesFile: ITranslationMessagesFile) {\r\n    }\r\n\r\n    public get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * The file the unit belongs to.,\r\n     */\r\n    translationMessagesFile(): ITranslationMessagesFile {\r\n        return this._translationMessagesFile;\r\n    }\r\n\r\n    /**\r\n     * The original text value, that is to be translated.\r\n     * Contains all markup, depends on the concrete format used.\r\n     */\r\n    abstract sourceContent(): string;\r\n\r\n    /**\r\n     * Test, wether setting of source content is supported.\r\n     * If not, setSourceContent in trans-unit will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    supportsSetSourceContent(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set new source content in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing changed source content.\r\n     * @param newContent the new content.\r\n     */\r\n    abstract setSourceContent(newContent: string);\r\n\r\n    /**\r\n     * The original text value, that is to be translated, as normalized message.\r\n     */\r\n    public sourceContentNormalized(): ParsedMessage {\r\n        if (isNullOrUndefined(this._sourceContentNormalized)) {\r\n            this._sourceContentNormalized = this.createSourceContentNormalized();\r\n        }\r\n        return this._sourceContentNormalized;\r\n    }\r\n\r\n    /**\r\n     * The original text value, that is to be translated, as normalized message.\r\n     */\r\n    abstract createSourceContentNormalized(): ParsedMessage;\r\n\r\n    /**\r\n     * The translated value.\r\n     * Contains all markup, depends on the concrete format used.\r\n     */\r\n    abstract targetContent(): string;\r\n\r\n    /**\r\n     * The translated value as normalized message.\r\n     * All placeholders are replaced with {{n}} (starting at 0)\r\n     * and all embedded html is replaced by direct html markup.\r\n     */\r\n    abstract targetContentNormalized(): INormalizedMessage;\r\n\r\n    /**\r\n     * State of the translation as stored in the xml.\r\n     */\r\n    abstract nativeTargetState(): string;\r\n\r\n    /**\r\n     * State of the translation.\r\n     * (on of new, translated, final)\r\n     * Return values are defined as Constants STATE_...\r\n     */\r\n    public targetState(): string {\r\n        const nativeState = this.nativeTargetState();\r\n        return this.mapNativeStateToState(nativeState);\r\n    }\r\n\r\n    /**\r\n     * Map an abstract state (new, translated, final) to a concrete state used in the xml.\r\n     * Returns the state to be used in the xml.\r\n     * @param state one of Constants.STATE...\r\n     * @returns a native state (depends on concrete format)\r\n     * @throws error, if state is invalid.\r\n     */\r\n    protected abstract mapStateToNativeState(state: string): string;\r\n\r\n    /**\r\n     * Map a native state (found in the document) to an abstract state (new, translated, final).\r\n     * Returns the abstract state.\r\n     * @param nativeState nativeState\r\n     */\r\n    protected abstract mapNativeStateToState(nativeState: string): string;\r\n\r\n    /**\r\n     * set state in xml.\r\n     * @param nativeState nativeState\r\n     */\r\n    protected abstract setNativeTargetState(nativeState: string);\r\n\r\n    /**\r\n     * Modify the target state.\r\n     * @param newState one of the 3 allowed target states new, translated, final.\r\n     * Constants STATE_...\r\n     * Invalid states throw an error.\r\n     */\r\n    setTargetState(newState: string) {\r\n        this.setNativeTargetState(this.mapStateToNativeState(newState));\r\n        if (this.translationMessagesFile() instanceof AbstractTranslationMessagesFile) {\r\n            (<AbstractTranslationMessagesFile> this.translationMessagesFile()).countNumbers();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * All the source elements in the trans unit.\r\n     * The source element is a reference to the original template.\r\n     * It contains the name of the template file and a line number with the position inside the template.\r\n     * It is just a help for translators to find the context for the translation.\r\n     * This is set when using Angular 4.0 or greater.\r\n     * Otherwise it just returns an empty array.\r\n     */\r\n    abstract sourceReferences(): {sourcefile: string, linenumber: number}[];\r\n\r\n    /**\r\n     * Test, wether setting of source refs is supported.\r\n     * If not, setSourceReferences will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    public supportsSetSourceReferences(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set source ref elements in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing source refs.\r\n     * @param sourceRefs the sourcerefs to set. Old ones are removed.\r\n     */\r\n    abstract setSourceReferences(sourceRefs: {sourcefile: string, linenumber: number}[]);\r\n\r\n    /**\r\n     * The description set in the template as value of the i18n-attribute.\r\n     * e.g. i18n=\"mydescription\".\r\n     */\r\n    abstract description(): string;\r\n\r\n    /**\r\n     * The meaning (intent) set in the template as value of the i18n-attribute.\r\n     * This is the part in front of the | symbol.\r\n     * e.g. i18n=\"meaning|mydescription\".\r\n     */\r\n    abstract meaning(): string;\r\n\r\n    /**\r\n     * Test, wether setting of description and meaning is supported.\r\n     * If not, setDescription and setMeaning will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    public supportsSetDescriptionAndMeaning(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Change description property of trans-unit.\r\n     * @param description description\r\n     */\r\n    abstract setDescription(description: string);\r\n\r\n    /**\r\n     * Change meaning property of trans-unit.\r\n     * @param meaning meaning\r\n     */\r\n    abstract setMeaning(meaning: string);\r\n\r\n    /**\r\n     * Get all notes of the trans-unit.\r\n     * Notes are remarks made by a translator.\r\n     * (description and meaning are not included here!)\r\n     */\r\n    abstract notes(): INote[];\r\n\r\n    /**\r\n     * Test, wether setting of notes is supported.\r\n     * If not, setNotes will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    abstract supportsSetNotes(): boolean;\r\n\r\n    /**\r\n     * Add notes to trans unit.\r\n     * @param newNotes the notes to add.\r\n     * @throws an Error if any note contains descpription or meaning as from attribute.\r\n     */\r\n    abstract setNotes(newNotes: INote[]);\r\n\r\n    /**\r\n     * Check notes\r\n     * @param newNotes the notes to add.\r\n     * @throws an Error if any note contains description or meaning as from attribute.\r\n     */\r\n    protected checkNotes(newNotes: INote[]) {\r\n        // check from values\r\n        const errorInFromNote = newNotes.find((note) => note.from === 'description' || note.from === 'meaning');\r\n        if (!isNullOrUndefined(errorInFromNote)) {\r\n            throw new Error('description or meaning are not allowed as from atttribute');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The real xml element used for the trans unit.\r\n     * (internal usage only, a client should never need this)\r\n     * @return real xml element used for the trans unit.\r\n     */\r\n    public asXmlElement(): Element {\r\n        return this._element;\r\n    }\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * Returns a changed copy of this trans unit.\r\n     * receiver is not changed.\r\n     * (internal usage only, a client should call importNewTransUnit on ITranslationMessageFile)\r\n     */\r\n    abstract cloneWithSourceAsTarget(isDefaultLang: boolean, copyContent: boolean, targetFile: ITranslationMessagesFile): AbstractTransUnit;\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * (internal usage only, a client should call createTranslationFileForLang on ITranslationMessageFile)\r\n     */\r\n    abstract useSourceAsTarget(isDefaultLang: boolean, copyContent: boolean);\r\n\r\n    /**\r\n     * Translate the trans unit.\r\n     * @param translation the translated string or (preferred) a normalized message.\r\n     * The pure string can contain any markup and will not be checked.\r\n     * So it can damage the document.\r\n     * A normalized message prevents this.\r\n     */\r\n    public translate(translation: string | INormalizedMessage) {\r\n        let translationNative: string;\r\n        if (isString(translation)) {\r\n            translationNative = <string> translation;\r\n        } else {\r\n            translationNative = (<INormalizedMessage> translation).asNativeString();\r\n        }\r\n        this.translateNative(translationNative);\r\n        this.setTargetState(STATE_TRANSLATED);\r\n    }\r\n\r\n    /**\r\n     * Return a parser used for normalized messages.\r\n     */\r\n    protected abstract messageParser(): AbstractMessageParser;\r\n\r\n    /**\r\n     * Test, wether message looks like ICU message.\r\n     * @param message message\r\n     * @return wether message looks like ICU message.\r\n     */\r\n    public isICUMessage(message: string): boolean {\r\n        return this.messageParser().isICUMessageStart(message);\r\n    }\r\n\r\n    /**\r\n     * Set the translation to a given string (including markup).\r\n     * @param translation translation\r\n     */\r\n    protected abstract translateNative(translation: string);\r\n}\r\n","import {ParsedMessagePart, ParsedMessagePartType} from './parsed-message-part';\r\n/**\r\n * Created by martin on 05.05.2017.\r\n * A message part consisting of just simple text.\r\n */\r\n\r\nexport class ParsedMessagePartText extends ParsedMessagePart {\r\n\r\n    private text: string;\r\n\r\n    constructor(text: string) {\r\n        super(ParsedMessagePartType.TEXT);\r\n        this.text = text;\r\n    }\r\n\r\n    public asDisplayString(format?: string) {\r\n        return this.text;\r\n    }\r\n}\r\n","import {ParsedMessagePart, ParsedMessagePartType} from './parsed-message-part';\r\nimport {NORMALIZATION_FORMAT_NGXTRANSLATE} from '../api/constants';\r\n/**\r\n * Created by martin on 05.05.2017.\r\n * A message part consisting of a placeholder.\r\n * Placeholders are numbered from 0 to n.\r\n */\r\n\r\nexport class ParsedMessagePartPlaceholder extends ParsedMessagePart {\r\n\r\n    // index 0 .. n\r\n    private _index: number;\r\n    // optional disp-Attribute value, contains the original expression.\r\n    private _disp?: string;\r\n\r\n    constructor(index: number, disp: string) {\r\n        super(ParsedMessagePartType.PLACEHOLDER);\r\n        this._index = index;\r\n        this._disp = disp;\r\n    }\r\n\r\n    public asDisplayString(format?: string) {\r\n        if (format === NORMALIZATION_FORMAT_NGXTRANSLATE) {\r\n            return '{{' + this._index + '}}';\r\n        }\r\n        return '{{' + this._index + '}}';\r\n    }\r\n    public index(): number {\r\n        return this._index;\r\n    }\r\n\r\n    public disp(): string {\r\n        return this._disp;\r\n    }\r\n}\r\n","import {ParsedMessagePart, ParsedMessagePartType} from './parsed-message-part';\r\n/**\r\n * Created by martin on 05.05.2017.\r\n * A message part consisting of an opening tag like <b> or <strange>.\r\n */\r\n\r\nexport class ParsedMessagePartStartTag extends ParsedMessagePart {\r\n\r\n    private _tagname: string;\r\n    private _idcounter: number;\r\n\r\n    constructor(tagname: string, idcounter: number) {\r\n        super(ParsedMessagePartType.START_TAG);\r\n        this._tagname = tagname;\r\n        this._idcounter = idcounter;\r\n    }\r\n\r\n    public asDisplayString(format?: string) {\r\n        if (this._idcounter === 0) {\r\n            return '<' + this._tagname + '>';\r\n        } else {\r\n            return '<' + this._tagname + ' id=\"' + this._idcounter.toString() + '\">';\r\n        }\r\n    }\r\n\r\n    public tagName(): string {\r\n        return this._tagname;\r\n    }\r\n\r\n    public idCounter(): number {\r\n        return this._idcounter;\r\n    }\r\n}\r\n","import {ParsedMessagePart, ParsedMessagePartType} from './parsed-message-part';\r\n/**\r\n * Created by martin on 05.05.2017.\r\n * A message part consisting of a closing tag like </b> or </strange>.\r\n */\r\n\r\nexport class ParsedMessagePartEndTag extends ParsedMessagePart {\r\n\r\n    private _tagname: string;\r\n\r\n    constructor(tagname: string) {\r\n        super(ParsedMessagePartType.END_TAG);\r\n        this._tagname = tagname;\r\n    }\r\n\r\n    public asDisplayString(format?: string) {\r\n        return '</' + this._tagname + '>';\r\n    }\r\n\r\n    public tagName(): string {\r\n        return this._tagname;\r\n    }\r\n\r\n}\r\n","import * as Tokenizr from 'tokenizr';\r\n\r\n/**\r\n * Created by martin on 04.06.2017.\r\n * A tokenizer for ICU messages.\r\n */\r\n\r\n// Tokens\r\nexport const TEXT = 'TEXT';\r\nexport const CURLY_BRACE_OPEN = 'CURLY_BRACE_OPEN';\r\nexport const CURLY_BRACE_CLOSE = 'CURLY_BRACE_CLOSE';\r\nexport const COMMA = 'COMMA';\r\nexport const PLURAL = 'PLURAL';\r\nexport const SELECT = 'SELECT';\r\n\r\nexport interface ICUToken {\r\n    type: string;\r\n    value: any;\r\n}\r\n\r\n// states: default normal in_message\r\nconst STATE_DEFAULT = 'default';\r\nconst STATE_NORMAL = 'normal';\r\nconst STATE_IN_MESSAGE = 'in_message';\r\n\r\nexport class ICUMessageTokenizer {\r\n    private lexer: Tokenizr;\r\n\r\n    private getLexer(): Tokenizr {\r\n        const lexer = new Tokenizr();\r\n        let plaintext = '';\r\n        let openedCurlyBracesInTextCounter = 0;\r\n        lexer.before((ctx, match, rule) => {\r\n            if (rule.name !== TEXT) {\r\n                if (this.containsNonWhiteSpace(plaintext)) {\r\n                    ctx.accept(TEXT, plaintext);\r\n                    plaintext = '';\r\n                } else {\r\n                    ctx.ignore();\r\n                }\r\n            }\r\n        });\r\n        lexer.finish((ctx) => {\r\n            if (this.containsNonWhiteSpace(plaintext)) {\r\n                ctx.accept(TEXT, plaintext);\r\n            }\r\n         });\r\n        // curly brace\r\n        lexer.rule(STATE_DEFAULT, /{/, (ctx, match) => {\r\n            ctx.accept(CURLY_BRACE_OPEN, match[0]);\r\n            ctx.push(STATE_NORMAL);\r\n        }, CURLY_BRACE_OPEN);\r\n        lexer.rule(STATE_NORMAL, /{/, (ctx, match) => {\r\n            ctx.accept(CURLY_BRACE_OPEN, match[0]);\r\n            ctx.push(STATE_IN_MESSAGE);\r\n        }, CURLY_BRACE_OPEN);\r\n        lexer.rule(STATE_NORMAL, /}/, (ctx, match) => {\r\n            ctx.pop();\r\n            ctx.accept(CURLY_BRACE_CLOSE, match[0]);\r\n        }, CURLY_BRACE_CLOSE);\r\n        // masked ' { and }\r\n        lexer.rule(STATE_IN_MESSAGE, /'[{}]?'/, (ctx, match) => {\r\n            if (match[0] === '\\'\\'') {\r\n                plaintext += '\\'';\r\n            } else if (match[0] === '\\'{\\'') {\r\n                plaintext += '{';\r\n            } else if (match[0] === '\\'}\\'') {\r\n                plaintext += '}';\r\n            }\r\n            ctx.ignore();\r\n        }, TEXT);\r\n        lexer.rule(STATE_IN_MESSAGE, /./, (ctx, match) => {\r\n            const char = match[0];\r\n            if (char === '{') {\r\n                openedCurlyBracesInTextCounter++;\r\n                plaintext += match[0];\r\n                ctx.ignore();\r\n            } else if (char === '}') {\r\n                if (openedCurlyBracesInTextCounter > 0) {\r\n                    openedCurlyBracesInTextCounter--;\r\n                    plaintext += match[0];\r\n                    ctx.ignore();\r\n                } else {\r\n                    ctx.pop();\r\n                    ctx.accept(TEXT, plaintext);\r\n                    plaintext = '';\r\n                    ctx.accept(CURLY_BRACE_CLOSE, match[0]);\r\n                }\r\n            } else {\r\n                plaintext += match[0];\r\n                ctx.ignore();\r\n            }\r\n        }, TEXT);\r\n        // comma\r\n        lexer.rule(STATE_NORMAL, /,/, (ctx, match) => {\r\n            ctx.accept(COMMA, match[0]);\r\n        }, COMMA);\r\n        // keywords plural and select\r\n        lexer.rule(STATE_NORMAL, /plural/, (ctx, match) => {\r\n            ctx.accept(PLURAL, match[0]);\r\n        }, PLURAL);\r\n        lexer.rule(STATE_NORMAL, /select/, (ctx, match) => {\r\n            ctx.accept(SELECT, match[0]);\r\n        }, SELECT);\r\n        // text\r\n        lexer.rule(/./, (ctx, match) => {\r\n            plaintext += match[0];\r\n            ctx.ignore();\r\n        }, TEXT);\r\n        lexer.rule(/[\\s]+/, (ctx, match) => {\r\n            plaintext += match[0];\r\n            ctx.ignore();\r\n        }, TEXT);\r\n        return lexer;\r\n    }\r\n\r\n    private containsNonWhiteSpace(text: string): boolean {\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (!/\\s/.test(text.charAt(i))) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    tokenize(normalizedMessage: string): ICUToken[] {\r\n        const lexer: Tokenizr = this.getLexer();\r\n        lexer.input(normalizedMessage);\r\n        return lexer.tokens();\r\n    }\r\n\r\n    input(normalizedMessage: string) {\r\n        this.lexer = this.getLexer();\r\n        this.lexer.input(normalizedMessage);\r\n    }\r\n\r\n    next(): ICUToken {\r\n        return this.lexer.token();\r\n    }\r\n\r\n    peek(): ICUToken {\r\n        return this.lexer.peek();\r\n    }\r\n}\r\n","import {IICUMessage, IICUMessageCategory, IICUMessageTranslation, INormalizedMessage} from '../api/index';\r\nimport {format, isNullOrUndefined, isString} from 'util';\r\nimport {IMessageParser} from './i-message-parser';\r\n\r\nclass MessageCategory implements IICUMessageCategory {\r\n\r\n    constructor(private _category: string, private _message: INormalizedMessage) {}\r\n\r\n    public getCategory(): string {\r\n        return this._category;\r\n    }\r\n\r\n    public getMessageNormalized(): INormalizedMessage {\r\n        return this._message;\r\n    }\r\n}\r\n\r\n/**\r\n * Implementation of an ICU Message.\r\n * Created by martin on 05.06.2017.\r\n */\r\nexport class ICUMessage implements IICUMessage {\r\n\r\n    private _isPluralMessage: boolean;\r\n\r\n    private _categories: IICUMessageCategory[];\r\n\r\n    constructor(private _parser: IMessageParser, isPluralMessage: boolean) {\r\n        this._isPluralMessage = isPluralMessage;\r\n        this._categories = [];\r\n    }\r\n\r\n    addCategory(category: string, message: INormalizedMessage) {\r\n        this._categories.push(new MessageCategory(category, message));\r\n    }\r\n\r\n    /**\r\n     * ICU message as native string.\r\n     * This is, how it is stored, something like '{x, plural, =0 {..}'\r\n     * @return ICU message as native string.\r\n     */\r\n    public asNativeString(): string {\r\n        const varname = (this.isPluralMessage()) ? 'VAR_PLURAL' : 'VAR_SELECT';\r\n        const type = (this.isPluralMessage()) ? 'plural' : 'select';\r\n        let choiceString = '';\r\n        this._categories.forEach((category: IICUMessageCategory) => {\r\n            choiceString = choiceString + format(' %s {%s}', category.getCategory(), category.getMessageNormalized().asNativeString());\r\n        });\r\n        return format('{%s, %s,%s}', varname, type, choiceString);\r\n    }\r\n\r\n    /**\r\n     * Is it a plural message?\r\n     */\r\n    isPluralMessage(): boolean {\r\n        return this._isPluralMessage;\r\n    }\r\n\r\n    /**\r\n     * Is it a select message?\r\n     */\r\n    isSelectMessage(): boolean {\r\n        return !this._isPluralMessage;\r\n    }\r\n\r\n    /**\r\n     * All the parts of the message.\r\n     * E.g. the ICU message {wolves, plural, =0 {no wolves} =1 {one wolf} =2 {two wolves} other {a wolf pack}}\r\n     * has 4 category objects with the categories =0, =1, =2, other.\r\n     */\r\n    getCategories(): IICUMessageCategory[] {\r\n        return this._categories;\r\n    }\r\n\r\n    /**\r\n     * Translate message and return a new, translated message\r\n     * @param translation the translation (hashmap of categories and translations).\r\n     * @return new message wit translated content.\r\n     * @throws an error if translation does not match the message.\r\n     * This is the case, if there are categories not contained in the original message.\r\n     */\r\n    translate(translation: IICUMessageTranslation): IICUMessage {\r\n        const message = new ICUMessage(this._parser, this.isPluralMessage());\r\n        const translatedCategories: Set<string> = new Set<string>();\r\n        this._categories.forEach((category) => {\r\n            let translatedMessage: INormalizedMessage;\r\n            const translationForCategory: string|IICUMessageTranslation = translation[category.getCategory()];\r\n            if (isNullOrUndefined(translationForCategory)) {\r\n                translatedMessage = category.getMessageNormalized();\r\n            } else if (isString(translationForCategory)) {\r\n                translatedCategories.add(category.getCategory());\r\n                translatedMessage = this._parser.parseNormalizedString(<string> translationForCategory, null);\r\n            } else {\r\n                // TODO embedded ICU Message\r\n                translatedMessage = null;\r\n            }\r\n            message.addCategory(category.getCategory(), translatedMessage);\r\n        });\r\n        // new categories, which are not part of the original message\r\n        Object.keys(translation).forEach((categoryName) => {\r\n            if (!translatedCategories.has(categoryName)) {\r\n                if (this.isSelectMessage()) {\r\n                    throw new Error(format('adding a new category not allowed for select messages (\"%s\" is not part of message)',\r\n                        categoryName));\r\n                } else {\r\n                    this.checkValidPluralCategory(categoryName);\r\n                    // TODO embedded ICU Message\r\n                    let translatedMessage = this._parser.parseNormalizedString(<string> translation[categoryName], null);\r\n                    message.addCategory(categoryName, translatedMessage);\r\n                }\r\n            }\r\n        });\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Check, wether category is valid plural category.\r\n     * Allowed are =n, 'zero', 'one', 'two', 'few', 'many' and 'other'\r\n     * @param categoryName category\r\n     * @throws an error, if it is not a valid category name\r\n     */\r\n    private checkValidPluralCategory(categoryName: string) {\r\n        const allowedKeywords = ['zero', 'one', 'two', 'few', 'many', 'other'];\r\n        if (categoryName.match(/=\\d+/)) {\r\n            return;\r\n        }\r\n        if (allowedKeywords.find((key) => key === categoryName)) {\r\n            return;\r\n        }\r\n        throw new Error(format('invalid plural category \"%s\", allowed are =<n> and %s', categoryName, allowedKeywords));\r\n    }\r\n}\r\n","import {ParsedMessagePart, ParsedMessagePartType} from './parsed-message-part';\r\nimport {IICUMessage, INormalizedMessage} from '../api/index';\r\nimport {\r\n    COMMA, CURLY_BRACE_CLOSE, CURLY_BRACE_OPEN, ICUMessageTokenizer, ICUToken, PLURAL, SELECT,\r\n    TEXT\r\n} from './icu-message-tokenizer';\r\nimport {ICUMessage} from './icu-message';\r\nimport {format} from 'util';\r\nimport {IMessageParser} from './i-message-parser';\r\n\r\n/**\r\n * Created by martin on 02.06.2017.\r\n * A message part consisting of an icu message.\r\n * There can only be one icu message in a parsed message.\r\n * Syntax of ICU message is '{' <keyname> ',' 'select'|'plural' ',' (<category> '{' text '}')+ '}'\r\n */\r\n\r\nexport class ParsedMessagePartICUMessage extends ParsedMessagePart {\r\n\r\n    private _message: ICUMessage;\r\n    private _messageText: string;\r\n    private _tokenizer: ICUMessageTokenizer;\r\n\r\n    constructor(icuMessageText: string, private _parser: IMessageParser) {\r\n        super(ParsedMessagePartType.ICU_MESSAGE);\r\n        if (icuMessageText) {\r\n            this.parseICUMessage(icuMessageText);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test wether text might be an ICU message.\r\n     * Should at least start with something like '{<name>, select, ..' or '{<name>, plural, ...'\r\n     * @param icuMessageText icuMessageText\r\n     * @return wether text might be an ICU message.\r\n     */\r\n    static looksLikeICUMessage(icuMessageText: string): boolean {\r\n        const part = new ParsedMessagePartICUMessage(null, null);\r\n        return part.looksLikeICUMessage(icuMessageText);\r\n    }\r\n\r\n    public asDisplayString(displayFormat?: string) {\r\n        return '<ICU-Message/>';\r\n    }\r\n\r\n    /**\r\n     * return the parsed message.\r\n     * @return parsed message\r\n     */\r\n    public getICUMessage(): IICUMessage {\r\n        return this._message;\r\n    }\r\n\r\n    /**\r\n     * Parse the message.\r\n     * @param text message text to parse\r\n     * @throws an error if the syntax is not ok in any way.\r\n     */\r\n    private parseICUMessage(text: string) {\r\n        // console.log('message ', text);\r\n        // const tokens = new ICUMessageTokenizer().tokenize(text);\r\n        // tokens.forEach((tok) => {\r\n        //     console.log('Token', tok.type, tok.value);\r\n        // });\r\n        this._messageText = text;\r\n        this._tokenizer = new ICUMessageTokenizer();\r\n        this._tokenizer.input(text);\r\n        this.expectNext(CURLY_BRACE_OPEN);\r\n        this.expectNext(TEXT); // varname, not used currently, ng always used VAR_PLURAL or VAR_SELECT\r\n        this.expectNext(COMMA);\r\n        let token: ICUToken = this._tokenizer.next();\r\n        if (token.type === PLURAL) {\r\n            this._message = new ICUMessage(this._parser, true);\r\n        } else if (token.type === SELECT) {\r\n            this._message = new ICUMessage(this._parser, false);\r\n        }\r\n        this.expectNext(COMMA);\r\n        token = this._tokenizer.peek();\r\n        while (token.type !== CURLY_BRACE_CLOSE) {\r\n            const category = this.expectNext(TEXT).value.trim();\r\n            this.expectNext(CURLY_BRACE_OPEN);\r\n            const message = this.expectNext(TEXT).value;\r\n            this._message.addCategory(category, this.parseNativeSubMessage(message));\r\n            this.expectNext(CURLY_BRACE_CLOSE);\r\n            token = this._tokenizer.peek();\r\n        }\r\n        this.expectNext(CURLY_BRACE_CLOSE);\r\n        this.expectNext('EOF');\r\n    }\r\n\r\n    /**\r\n     * Parse the message to check, wether it might be an ICU message.\r\n     * Should at least start with something like '{<name>, select, ..' or '{<name>, plural, ...'\r\n     * @param text message text to parse\r\n     */\r\n    private looksLikeICUMessage(text: string): boolean {\r\n        // console.log('message ', text);\r\n        // const tokens = new ICUMessageTokenizer().tokenize(text);\r\n        // tokens.forEach((tok) => {\r\n        //     console.log('Token', tok.type, tok.value);\r\n        // });\r\n        this._tokenizer = new ICUMessageTokenizer();\r\n        this._tokenizer.input(text);\r\n        try {\r\n            this.expectNext(CURLY_BRACE_OPEN);\r\n            this.expectNext(TEXT); // varname, not used currently, ng always used VAR_PLURAL or VAR_SELECT\r\n            this.expectNext(COMMA);\r\n            const token: ICUToken = this._tokenizer.next();\r\n            if (token.type !== PLURAL && token.type !== SELECT) {\r\n                return false;\r\n            }\r\n            this.expectNext(COMMA);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Read next token and expect, that it is of the given type.\r\n     * @param tokentype expected type.\r\n     * @return Token\r\n     * @throws error, if next token has wrong type.\r\n     */\r\n    private expectNext(tokentype: string): ICUToken {\r\n        const token = this._tokenizer.next();\r\n        if (token.type !== tokentype) {\r\n            throw new Error(format('Error parsing ICU Message: expected %s, found %s (%s) (message %s)',\r\n                tokentype, token.type, token.value, this._messageText));\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Parse XML text to normalized message.\r\n     * @param message message in format dependent xml syntax.\r\n     * @return normalized message\r\n     */\r\n    private parseNativeSubMessage(message: string): INormalizedMessage {\r\n        return this._parser.createNormalizedMessageFromXMLString(message, null);\r\n    }\r\n}\r\n","import {ParsedMessagePart, ParsedMessagePartType} from './parsed-message-part';\r\nimport {NORMALIZATION_FORMAT_NGXTRANSLATE} from '../api/constants';\r\n/**\r\n * Created by martin on 05.05.2017.\r\n * A reference to an ICU message\r\n * icu references are numbered from 0 to n.\r\n */\r\n\r\nexport class ParsedMessagePartICUMessageRef extends ParsedMessagePart {\r\n\r\n    // index 0 .. n\r\n    private _index: number;\r\n    // optional disp-Attribute value, contains the original expression.\r\n    private _disp?: string;\r\n\r\n    constructor(index: number, disp: string) {\r\n        super(ParsedMessagePartType.ICU_MESSAGE_REF);\r\n        this._index = index;\r\n        this._disp = disp;\r\n    }\r\n\r\n    public asDisplayString(format?: string) {\r\n        return '<ICU-Message-Ref_' + this._index + '/>';\r\n    }\r\n\r\n    public index(): number {\r\n        return this._index;\r\n    }\r\n\r\n    public disp(): string {\r\n        return this._disp;\r\n    }\r\n}\r\n","import {ParsedMessagePart, ParsedMessagePartType} from './parsed-message-part';\r\n/**\r\n * Created by martin on 14.06.2017.\r\n * A message part consisting of an empty tag like <br/>.\r\n */\r\n\r\nexport class ParsedMessagePartEmptyTag extends ParsedMessagePart {\r\n\r\n    private _tagname: string;\r\n    private _idcounter: number;\r\n\r\n    constructor(tagname: string, idcounter: number) {\r\n        super(ParsedMessagePartType.EMPTY_TAG);\r\n        this._tagname = tagname;\r\n        this._idcounter = idcounter;\r\n    }\r\n\r\n    public asDisplayString(format?: string) {\r\n        if (this._idcounter === 0) {\r\n            return '<' + this._tagname + '>';\r\n        } else {\r\n            return '<' + this._tagname + ' id=\"' + this._idcounter.toString() + '\">';\r\n        }\r\n    }\r\n\r\n    public tagName(): string {\r\n        return this._tagname;\r\n    }\r\n\r\n    public idCounter(): number {\r\n        return this._idcounter;\r\n    }\r\n}\r\n","import {ParsedMessagePart, ParsedMessagePartType} from './parsed-message-part';\r\nimport {ParsedMessagePartText} from './parsed-message-part-text';\r\nimport {ParsedMessagePartPlaceholder} from './parsed-message-part-placeholder';\r\nimport {ParsedMessagePartStartTag} from './parsed-message-part-start-tag';\r\nimport {ParsedMessagePartEndTag} from './parsed-message-part-end-tag';\r\nimport {INormalizedMessage, ValidationErrors} from '../api/i-normalized-message';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {IMessageParser} from './i-message-parser';\r\nimport {format, isNullOrUndefined} from 'util';\r\nimport {IICUMessage, IICUMessageTranslation} from '../api/i-icu-message';\r\nimport {ParsedMessagePartICUMessage} from './parsed-message-part-icu-message';\r\nimport {ParsedMessagePartICUMessageRef} from './parsed-message-part-icu-message-ref';\r\nimport {ICUMessage} from './icu-message';\r\nimport {ParsedMessagePartEmptyTag} from './parsed-message-part-empty-tag';\r\n/**\r\n * Created by martin on 05.05.2017.\r\n * A message text read from a translation file.\r\n * Can contain placeholders, tags, text.\r\n * This class is a representation independent of the concrete format.\r\n */\r\nexport class ParsedMessage implements INormalizedMessage {\r\n\r\n    /**\r\n     * Parser that created this message (determines the native format).\r\n     */\r\n    private _parser: IMessageParser;\r\n\r\n    /**\r\n     * The message where this one stems from as translation.\r\n     * Optional, set only for messages created by calling translate.\r\n     */\r\n    private sourceMessage: ParsedMessage;\r\n\r\n    /**\r\n     * The parts of the message.\r\n     */\r\n    private _parts: ParsedMessagePart[];\r\n\r\n    /**\r\n     * messages xml representation.\r\n     */\r\n    private _xmlRepresentation: Element;\r\n\r\n    constructor(parser: IMessageParser, sourceMessage: ParsedMessage) {\r\n        this._parser = parser;\r\n        this.sourceMessage = sourceMessage;\r\n        this._parts = [];\r\n    }\r\n\r\n    /**\r\n     * Get the parser (for tests only, not part of API)\r\n     * @return parser\r\n     */\r\n    getParser(): IMessageParser {\r\n        return this._parser;\r\n    }\r\n\r\n    /**\r\n     * Create a new normalized message as a translation of this one.\r\n     * @param normalizedString the translation in normalized form.\r\n     * If the message is an ICUMessage (getICUMessage returns a value), use translateICUMessage instead.\r\n     * @throws an error if normalized string is not well formed.\r\n     * Throws an error too, if this is an ICU message.\r\n     */\r\n    translate(normalizedString: string): INormalizedMessage {\r\n        if (isNullOrUndefined(this.getICUMessage())) {\r\n            return this._parser.parseNormalizedString(<string> normalizedString, this);\r\n        } else {\r\n            throw new Error(format('cannot translate ICU message with simple string, use translateICUMessage() instead (\"%s\", \"%s\")',\r\n                normalizedString, this.asNativeString()));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new normalized icu message as a translation of this one.\r\n     * @param icuTranslation the translation, this is the translation of the ICU message,\r\n     * which is not a string, but a collections of the translations of the different categories.\r\n     * The message must be an ICUMessage (getICUMessage returns a value)\r\n     * @throws an error if normalized string is not well formed.\r\n     * Throws an error too, if this is not an ICU message.\r\n     */\r\n    translateICUMessage(icuTranslation: IICUMessageTranslation): INormalizedMessage {\r\n        const icuMessage: IICUMessage = this.getICUMessage();\r\n        if (isNullOrUndefined(icuMessage)) {\r\n            throw new Error(format('this is not an ICU message, use translate() instead (\"%s\", \"%s\")',\r\n                icuTranslation,  this.asNativeString()));\r\n        } else {\r\n            const translatedICUMessage: IICUMessage = icuMessage.translate(icuTranslation);\r\n            return this._parser.parseICUMessage(translatedICUMessage.asNativeString(), this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new normalized message from a native xml string as a translation of this one.\r\n     * @param nativeString xml string in the format of the underlying file format.\r\n     * Throws an error if native string is not acceptable.\r\n     */\r\n    translateNativeString(nativeString: string): INormalizedMessage {\r\n        return this._parser.createNormalizedMessageFromXMLString(nativeString, this);\r\n    }\r\n\r\n    /**\r\n     * normalized message as string.\r\n     * @param displayFormat optional way to determine the exact syntax.\r\n     * Allowed formats are defined as constants NORMALIZATION_FORMAT...\r\n     */\r\n    public asDisplayString(displayFormat?: string) {\r\n        return this._parts.map((part) => part.asDisplayString(displayFormat)).join('');\r\n    }\r\n\r\n    /**\r\n     * Returns the message content as format dependent native string.\r\n     * Includes all format specific markup like <ph id=\"INTERPOLATION\" ../> ..\r\n     */\r\n    asNativeString(): string {\r\n        if (isNullOrUndefined(this.getICUMessage())) {\r\n            return DOMUtilities.getXMLContent(this._xmlRepresentation);\r\n        } else {\r\n            return this.getICUMessage().asNativeString();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validate the message.\r\n     * @return null, if ok, error object otherwise.\r\n     */\r\n    public validate(): ValidationErrors | null {\r\n        let hasErrors = false;\r\n        const errors: ValidationErrors = {};\r\n        let e;\r\n        e = this.checkPlaceholderAdded();\r\n        if (!isNullOrUndefined(e)) {\r\n            errors.placeholderAdded = e;\r\n            hasErrors = true;\r\n        }\r\n        e = this.checkICUMessageRefRemoved();\r\n        if (!isNullOrUndefined(e)) {\r\n            errors.icuMessageRefRemoved = e;\r\n            hasErrors = true;\r\n        }\r\n        e = this.checkICUMessageRefAdded();\r\n        if (!isNullOrUndefined(e)) {\r\n            errors.icuMessageRefAdded = e;\r\n            hasErrors = true;\r\n        }\r\n        return hasErrors ? errors : null;\r\n    }\r\n\r\n    /**\r\n     * Validate the message, check for warnings only.\r\n     * A warning shows, that the message is acceptable, but misses something.\r\n     * E.g. if you remove a placeholder or a special tag from the original message, this generates a warning.\r\n     * @return null, if no warning, warnings as error object otherwise.\r\n     */\r\n    validateWarnings(): ValidationErrors | null {\r\n        let hasWarnings = false;\r\n        const warnings: ValidationErrors = {};\r\n        let w;\r\n        w = this.checkPlaceholderRemoved();\r\n        if (!isNullOrUndefined(w)) {\r\n            warnings.placeholderRemoved = w;\r\n            hasWarnings = true;\r\n        }\r\n        w = this.checkTagRemoved();\r\n        if (!isNullOrUndefined(w)) {\r\n            warnings.tagRemoved = w;\r\n            hasWarnings = true;\r\n        }\r\n        w = this.checkTagAdded();\r\n        if (!isNullOrUndefined(w)) {\r\n            warnings.tagAdded = w;\r\n            hasWarnings = true;\r\n        }\r\n        return hasWarnings ? warnings : null;\r\n    }\r\n\r\n    /**\r\n     * Test wether this message is an ICU message.\r\n     * @return true, if it is an ICU message.\r\n     */\r\n    isICUMessage(): boolean {\r\n        return this._parts.length === 1 && this._parts[0].type === ParsedMessagePartType.ICU_MESSAGE;\r\n    }\r\n\r\n    /**\r\n     * Test wether this message contains an ICU message reference.\r\n     * ICU message references are something like <x ID=\"ICU\"../>.\r\n     * @return true, if there is an ICU message reference in the message.\r\n     */\r\n    containsICUMessageRef(): boolean {\r\n        return this._parts.findIndex(part => part.type === ParsedMessagePartType.ICU_MESSAGE_REF) >= 0;\r\n    }\r\n\r\n    /**\r\n     * If this message is an ICU message, returns its structure.\r\n     * Otherwise this method returns null.\r\n     * @return ICUMessage or null.\r\n     */\r\n    public getICUMessage(): IICUMessage {\r\n        if (this._parts.length === 1 && this._parts[0].type === ParsedMessagePartType.ICU_MESSAGE) {\r\n            const icuPart = <ParsedMessagePartICUMessage> this._parts[0];\r\n            return icuPart.getICUMessage();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Check for added placeholder.\r\n     * @return null or message, if fulfilled.\r\n     */\r\n    private checkPlaceholderAdded(): any {\r\n        let e = null;\r\n        const suspiciousIndexes = [];\r\n        if (this.sourceMessage) {\r\n            const sourcePlaceholders = this.sourceMessage.allPlaceholders();\r\n            const myPlaceholders = this.allPlaceholders();\r\n            myPlaceholders.forEach((index) => {\r\n                if (!sourcePlaceholders.has(index)) {\r\n                    suspiciousIndexes.push(index);\r\n                }\r\n            });\r\n        }\r\n        if (suspiciousIndexes.length === 1) {\r\n            e = 'added placeholder ' + suspiciousIndexes[0] + ', which is not in original message';\r\n        } else if (suspiciousIndexes.length > 1) {\r\n            let allSuspiciousIndexes = '';\r\n            let first = true;\r\n            suspiciousIndexes.forEach((index) => {\r\n                if (!first) {\r\n                    allSuspiciousIndexes = allSuspiciousIndexes + ', ';\r\n                }\r\n                allSuspiciousIndexes = allSuspiciousIndexes + index;\r\n                first = false;\r\n            });\r\n            e = 'added placeholders ' + allSuspiciousIndexes + ', which are not in original message';\r\n        }\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Check for removed placeholder.\r\n     * @return null or message, if fulfilled.\r\n     */\r\n    private checkPlaceholderRemoved(): any {\r\n        let w = null;\r\n        const suspiciousIndexes = [];\r\n        if (this.sourceMessage) {\r\n            const sourcePlaceholders = this.sourceMessage.allPlaceholders();\r\n            const myPlaceholders = this.allPlaceholders();\r\n            sourcePlaceholders.forEach((index) => {\r\n                if (!myPlaceholders.has(index)) {\r\n                    suspiciousIndexes.push(index);\r\n                }\r\n            });\r\n        }\r\n        if (suspiciousIndexes.length === 1) {\r\n            w = 'removed placeholder ' + suspiciousIndexes[0] + ' from original message';\r\n        } else if (suspiciousIndexes.length > 1) {\r\n            let allSuspiciousIndexes = '';\r\n            let first = true;\r\n            suspiciousIndexes.forEach((index) => {\r\n                if (!first) {\r\n                    allSuspiciousIndexes = allSuspiciousIndexes + ', ';\r\n                }\r\n                allSuspiciousIndexes = allSuspiciousIndexes + index;\r\n                first = false;\r\n            });\r\n            w = 'removed placeholders ' + allSuspiciousIndexes + ' from original message';\r\n        }\r\n        return w;\r\n    }\r\n\r\n    /**\r\n     * Check for added ICU Message Refs.\r\n     * @return null or message, if fulfilled.\r\n     */\r\n    private checkICUMessageRefAdded(): any {\r\n        let e = null;\r\n        const suspiciousIndexes = [];\r\n        if (this.sourceMessage) {\r\n            const sourceICURefs = this.sourceMessage.allICUMessageRefs();\r\n            const myICURefs = this.allICUMessageRefs();\r\n            myICURefs.forEach((index) => {\r\n                if (!sourceICURefs.has(index)) {\r\n                    suspiciousIndexes.push(index);\r\n                }\r\n            });\r\n        }\r\n        if (suspiciousIndexes.length === 1) {\r\n            e = 'added ICU message reference ' + suspiciousIndexes[0] + ', which is not in original message';\r\n        } else if (suspiciousIndexes.length > 1) {\r\n            let allSuspiciousIndexes = '';\r\n            let first = true;\r\n            suspiciousIndexes.forEach((index) => {\r\n                if (!first) {\r\n                    allSuspiciousIndexes = allSuspiciousIndexes + ', ';\r\n                }\r\n                allSuspiciousIndexes = allSuspiciousIndexes + index;\r\n                first = false;\r\n            });\r\n            e = 'added ICU message references ' + allSuspiciousIndexes + ', which are not in original message';\r\n        }\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Check for removed ICU Message Refs.\r\n     * @return null or message, if fulfilled.\r\n     */\r\n    private checkICUMessageRefRemoved(): any {\r\n        let e = null;\r\n        const suspiciousIndexes = [];\r\n        if (this.sourceMessage) {\r\n            const sourceICURefs = this.sourceMessage.allICUMessageRefs();\r\n            const myICURefs = this.allICUMessageRefs();\r\n            sourceICURefs.forEach((index) => {\r\n                if (!myICURefs.has(index)) {\r\n                    suspiciousIndexes.push(index);\r\n                }\r\n            });\r\n        }\r\n        if (suspiciousIndexes.length === 1) {\r\n            e = 'removed ICU message reference ' + suspiciousIndexes[0] + ' from original message';\r\n        } else if (suspiciousIndexes.length > 1) {\r\n            let allSuspiciousIndexes = '';\r\n            let first = true;\r\n            suspiciousIndexes.forEach((index) => {\r\n                if (!first) {\r\n                    allSuspiciousIndexes = allSuspiciousIndexes + ', ';\r\n                }\r\n                allSuspiciousIndexes = allSuspiciousIndexes + index;\r\n                first = false;\r\n            });\r\n            e = 'removed ICU message references ' + allSuspiciousIndexes + ' from original message';\r\n        }\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Get all indexes of placeholders used in the message.\r\n     */\r\n    private allPlaceholders(): Set<number> {\r\n        const result = new Set<number>();\r\n        this.parts().forEach((part) => {\r\n            if (part.type === ParsedMessagePartType.PLACEHOLDER) {\r\n                const index = (<ParsedMessagePartPlaceholder> part).index();\r\n                result.add(index);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return the disp-Attribute of placeholder\r\n     * @param index index of placeholder\r\n     * @return disp or null\r\n     */\r\n    public getPlaceholderDisp(index: number): string {\r\n        let placeHolder: ParsedMessagePartPlaceholder = null;\r\n        this.parts().forEach((part) => {\r\n            if (part.type === ParsedMessagePartType.PLACEHOLDER) {\r\n                const phPart: ParsedMessagePartPlaceholder = <ParsedMessagePartPlaceholder> part;\r\n                if (phPart.index() === index) {\r\n                    placeHolder = phPart;\r\n                }\r\n            }\r\n        });\r\n        return placeHolder ? placeHolder.disp() : null;\r\n    }\r\n\r\n    /**\r\n     * Get all indexes of ICU message refs used in the message.\r\n     */\r\n    private allICUMessageRefs(): Set<number> {\r\n        const result = new Set<number>();\r\n        this.parts().forEach((part) => {\r\n            if (part.type === ParsedMessagePartType.ICU_MESSAGE_REF) {\r\n                const index = (<ParsedMessagePartICUMessageRef> part).index();\r\n                result.add(index);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Return the disp-Attribute of icu message ref\r\n     * @param index of ref\r\n     * @return disp or null\r\n     */\r\n    public getICUMessageRefDisp(index: number): string {\r\n        let icuMessageRefPart: ParsedMessagePartICUMessageRef = null;\r\n        this.parts().forEach((part) => {\r\n            if (part.type === ParsedMessagePartType.ICU_MESSAGE_REF) {\r\n                const refPart: ParsedMessagePartICUMessageRef = <ParsedMessagePartICUMessageRef> part;\r\n                if (refPart.index() === index) {\r\n                    icuMessageRefPart = refPart;\r\n                }\r\n            }\r\n        });\r\n        return icuMessageRefPart ? icuMessageRefPart.disp() : null;\r\n    }\r\n\r\n    /**\r\n     * Check for added tags.\r\n     * @return null or message, if fulfilled.\r\n     */\r\n    private checkTagAdded(): any {\r\n        let e = null;\r\n        const suspiciousTags = [];\r\n        if (this.sourceMessage) {\r\n            const sourceTags = this.sourceMessage.allTags();\r\n            const myTags = this.allTags();\r\n            myTags.forEach((tagName) => {\r\n                if (!sourceTags.has(tagName)) {\r\n                    suspiciousTags.push(tagName);\r\n                }\r\n            });\r\n        }\r\n        if (suspiciousTags.length === 1) {\r\n            e = 'added tag <' + suspiciousTags[0] + '>, which is not in original message';\r\n        } else if (suspiciousTags.length > 1) {\r\n            let allSuspiciousTags = '';\r\n            let first = true;\r\n            suspiciousTags.forEach((tag) => {\r\n                if (!first) {\r\n                    allSuspiciousTags = allSuspiciousTags + ', ';\r\n                }\r\n                allSuspiciousTags = allSuspiciousTags + '<' + tag + '>';\r\n                first = false;\r\n            });\r\n            e = 'added tags ' + allSuspiciousTags + ', which are not in original message';\r\n        }\r\n        return e;\r\n    }\r\n\r\n    /**\r\n     * Check for removed tags.\r\n     * @return null or message, if fulfilled.\r\n     */\r\n    private checkTagRemoved(): any {\r\n        let w = null;\r\n        const suspiciousTags = [];\r\n        if (this.sourceMessage) {\r\n            const sourceTags = this.sourceMessage.allTags();\r\n            const myTags = this.allTags();\r\n            sourceTags.forEach((tagName) => {\r\n                if (!myTags.has(tagName)) {\r\n                    suspiciousTags.push(tagName);\r\n                }\r\n            });\r\n        }\r\n        if (suspiciousTags.length === 1) {\r\n            w = 'removed tag <' + suspiciousTags[0] + '> from original message';\r\n        } else if (suspiciousTags.length > 1) {\r\n            let allSuspiciousTags = '';\r\n            let first = true;\r\n            suspiciousTags.forEach((tag) => {\r\n                if (!first) {\r\n                    allSuspiciousTags = allSuspiciousTags + ', ';\r\n                }\r\n                allSuspiciousTags = allSuspiciousTags + '<' + tag + '>';\r\n                first = false;\r\n            });\r\n            w = 'removed tags ' + allSuspiciousTags + ' from original message';\r\n        }\r\n        return w;\r\n    }\r\n\r\n    /**\r\n     * Get all tag names used in the message.\r\n     */\r\n    private allTags(): Set<string> {\r\n        const result = new Set<string>();\r\n        this.parts().forEach((part) => {\r\n            if (part.type === ParsedMessagePartType.START_TAG || part.type === ParsedMessagePartType.EMPTY_TAG) {\r\n                const tagName = (<ParsedMessagePartStartTag> part).tagName();\r\n                result.add(tagName);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    public parts(): ParsedMessagePart[] {\r\n        return this._parts;\r\n    }\r\n\r\n    setXmlRepresentation(xmlRepresentation: Element) {\r\n        this._xmlRepresentation = xmlRepresentation;\r\n    }\r\n\r\n    addText(text: string) {\r\n        this._parts.push(new ParsedMessagePartText(text));\r\n    }\r\n\r\n    addPlaceholder(index: number, disp: string) {\r\n        this._parts.push(new ParsedMessagePartPlaceholder(index, disp));\r\n    }\r\n\r\n    addStartTag(tagname: string, idcounter: number) {\r\n        this._parts.push(new ParsedMessagePartStartTag(tagname, idcounter));\r\n    }\r\n\r\n    addEndTag(tagname: string) {\r\n        // check if well formed\r\n        const openTag = this.calculateOpenTagName();\r\n        if (!openTag || openTag !== tagname) {\r\n            // oops, not well formed\r\n            throw new Error(format('unexpected close tag %s (currently open is %s, native xml is \"%s\")',\r\n                tagname, openTag, this.asNativeString()));\r\n        }\r\n        this._parts.push(new ParsedMessagePartEndTag(tagname));\r\n    }\r\n\r\n    addEmptyTag(tagname: string, idcounter: number) {\r\n        this._parts.push(new ParsedMessagePartEmptyTag(tagname, idcounter));\r\n    }\r\n\r\n    addICUMessageRef(index: number, disp) {\r\n        this._parts.push(new ParsedMessagePartICUMessageRef(index, disp));\r\n    }\r\n\r\n    addICUMessage(text: string) {\r\n        this._parts.push(new ParsedMessagePartICUMessage(text, this._parser));\r\n    }\r\n\r\n    /**\r\n     * Determine, wether there is an open tag, that is not closed.\r\n     * Returns the latest one or null, if there is no open tag.\r\n     */\r\n    private calculateOpenTagName(): string {\r\n        const openTags = [];\r\n        this._parts.forEach((part) => {\r\n            switch (part.type) {\r\n                case ParsedMessagePartType.START_TAG:\r\n                    openTags.push((<ParsedMessagePartStartTag> part).tagName());\r\n                    break;\r\n                case ParsedMessagePartType.END_TAG:\r\n                    const tagName = (<ParsedMessagePartEndTag> part).tagName();\r\n                    if (openTags.length === 0 || openTags[openTags.length - 1] !== tagName) {\r\n                        // oops, not well formed\r\n                        const openTag = (openTags.length === 0) ? 'nothing' : openTags[openTags.length - 1];\r\n                        throw new Error(format('unexpected close tag %s (currently open is %s, native xml is \"%s\")',\r\n                            tagName, openTag, this.asNativeString()));\r\n                    }\r\n                    openTags.pop();\r\n            }\r\n        });\r\n        return openTags.length === 0 ? null : openTags[openTags.length - 1];\r\n    }\r\n}\r\n","import * as Tokenizr from 'tokenizr';\r\nimport {isNullOrUndefined} from 'util';\r\n\r\n/**\r\n * Created by martin on 14.05.2017.\r\n * A tokenizer for normalized messages.\r\n */\r\n\r\n// Tokens\r\nexport const TEXT = 'TEXT';\r\nexport const START_TAG = 'START_TAG';\r\nexport const END_TAG = 'END_TAG';\r\nexport const EMPTY_TAG = 'EMPTY_TAG';\r\nexport const PLACEHOLDER = 'PLACEHOLDER';\r\nexport const ICU_MESSAGE_REF = 'ICU_MESSAGE_REF';\r\nexport const ICU_MESSAGE = 'ICU_MESSAGE';\r\n\r\nexport interface Token {\r\n    type: string;\r\n    value: any;\r\n}\r\n\r\nexport class ParsedMesageTokenizer {\r\n\r\n    private getLexer(): Tokenizr {\r\n        const lexer = new Tokenizr();\r\n        let plaintext = '';\r\n        lexer.before((ctx, match, rule) => {\r\n            if (rule.name !== TEXT && plaintext !== '') {\r\n                ctx.accept(TEXT, {text: plaintext});\r\n                plaintext = '';\r\n            }\r\n        });\r\n        lexer.finish((ctx) => {\r\n            if (plaintext !== '') {\r\n                ctx.accept(TEXT, {text: plaintext});\r\n            }\r\n         });\r\n        // empty tag, there are only a few allowed (see tag-mappings): ['BR', 'HR', 'IMG', 'AREA', 'LINK', 'WBR']\r\n        // format is <name id=\"nr\">, nr ist optional, z.B. <img> oder <img id=\"2\">\r\n        lexer.rule(/<(br|hr|img|area|link|wbr)( id=\"([0-9])*\")?\\>/, (ctx, match) => {\r\n            const idcount = isNullOrUndefined(match[3]) ? 0 : parseInt(match[3], 10);\r\n            ctx.accept(EMPTY_TAG, {name: match[1], idcounter: idcount});\r\n        }, EMPTY_TAG);\r\n        // start tag, Format <name id=\"nr\">, nr ist optional, z.B. <mytag> oder <mytag id=\"2\">\r\n        lexer.rule(/<([a-zA-Z][a-zA-Z-0-9]*)( id=\"([0-9]*)\")?>/, (ctx, match) => {\r\n            const idcount = isNullOrUndefined(match[3]) ? 0 : parseInt(match[3], 10);\r\n            ctx.accept(START_TAG, {name: match[1], idcounter: idcount});\r\n        }, START_TAG);\r\n        // end tag\r\n        lexer.rule(/<\\/([a-zA-Z][a-zA-Z-0-9]*)>/, (ctx, match) => {\r\n            ctx.accept(END_TAG, {name: match[1]});\r\n        }, END_TAG);\r\n        // placeholder\r\n        lexer.rule(/{{([0-9]+)}}/, (ctx, match) => {\r\n            ctx.accept(PLACEHOLDER, {idcounter: parseInt(match[1], 10)});\r\n        }, PLACEHOLDER);\r\n        // icu message ref\r\n        lexer.rule(/<ICU-Message-Ref_([0-9]+)\\/>/, (ctx, match) => {\r\n            ctx.accept(ICU_MESSAGE_REF, {idcounter: parseInt(match[1], 10)});\r\n        }, ICU_MESSAGE_REF);\r\n        // icu message\r\n        lexer.rule(/<ICU-Message\\/>/, (ctx, match) => {\r\n            ctx.accept(ICU_MESSAGE, {message: match[0]});\r\n        }, ICU_MESSAGE);\r\n        // text\r\n        lexer.rule(/./, (ctx, match) => {\r\n            plaintext += match[0];\r\n            ctx.ignore();\r\n        }, TEXT);\r\n        lexer.rule(/[\\t\\r\\n]+/, (ctx, match) => {\r\n            plaintext += match[0];\r\n            ctx.ignore();\r\n        }, TEXT);\r\n        return lexer;\r\n    }\r\n\r\n    tokenize(normalizedMessage: string): Token[] {\r\n        const lexer: Tokenizr = this.getLexer();\r\n        lexer.reset();\r\n        lexer.input(normalizedMessage);\r\n        return lexer.tokens();\r\n    }\r\n\r\n}\r\n","import {ParsedMessage} from './parsed-message';\r\nimport {\r\n    EMPTY_TAG,\r\n    END_TAG, ICU_MESSAGE, ICU_MESSAGE_REF, ParsedMesageTokenizer, PLACEHOLDER, START_TAG, TEXT,\r\n    Token\r\n} from './parsed-message-tokenizer';\r\nimport {ParsedMessagePartText} from './parsed-message-part-text';\r\nimport {DOMParser} from 'xmldom';\r\nimport {ParsedMessagePartStartTag} from './parsed-message-part-start-tag';\r\nimport {ParsedMessagePartPlaceholder} from './parsed-message-part-placeholder';\r\nimport {ParsedMessagePartEndTag} from './parsed-message-part-end-tag';\r\nimport {IMessageParser} from './i-message-parser';\r\nimport {format, isNullOrUndefined} from 'util';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {ParsedMessagePartEmptyTag} from './parsed-message-part-empty-tag';\r\nimport {ParsedMessagePartICUMessageRef} from './parsed-message-part-icu-message-ref';\r\nimport {ParsedMessagePartICUMessage} from './parsed-message-part-icu-message';\r\n/**\r\n * Created by roobm on 10.05.2017.\r\n * A message parser can parse the xml content of a translatable message.\r\n * It generates a ParsedMessage from it.\r\n */\r\nexport abstract class AbstractMessageParser implements IMessageParser {\r\n\r\n    /**\r\n     * Parse XML to ParsedMessage.\r\n     * @param xmlElement the xml representation\r\n     * @param sourceMessage optional original message that will be translated by normalized new one\r\n     * Throws an error if normalized xml is not well formed.\r\n     */\r\n    public createNormalizedMessageFromXML(xmlElement: Element, sourceMessage: ParsedMessage): ParsedMessage {\r\n        const message: ParsedMessage = new ParsedMessage(this, sourceMessage);\r\n        if (xmlElement) {\r\n            message.setXmlRepresentation(xmlElement);\r\n            this.addPartsOfNodeToMessage(xmlElement, message, false);\r\n        }\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Parse XML string to ParsedMessage.\r\n     * @param xmlString the xml representation without root element, e.g. this is <ph x></ph> an example.\r\n     * @param sourceMessage optional original message that will be translated by normalized new one\r\n     * Throws an error if normalized xml is not well formed.\r\n     */\r\n    createNormalizedMessageFromXMLString(xmlString: string, sourceMessage: ParsedMessage): ParsedMessage {\r\n        const doc: Document = new DOMParser().parseFromString('<dummy>' + xmlString + '</dummy>', 'text/xml');\r\n        const xmlElement: Element = <Element> doc.childNodes.item(0);\r\n        return this.createNormalizedMessageFromXML(xmlElement, sourceMessage);\r\n    }\r\n\r\n    /**\r\n     * recursively run through a node and add all identified parts to the message.\r\n     * @param node node\r\n     * @param message message to be generated.\r\n     * @param includeSelf if true, add node by itself, otherwise only children.\r\n     */\r\n    private addPartsOfNodeToMessage(node: Node, message: ParsedMessage, includeSelf: boolean) {\r\n        let processChildren = true;\r\n        if (includeSelf) {\r\n            if (node.nodeType === node.TEXT_NODE) {\r\n                message.addText(node.textContent);\r\n                return;\r\n            }\r\n            if (node.nodeType === node.ELEMENT_NODE) {\r\n                processChildren = this.processStartElement(<Element> node, message);\r\n            }\r\n        }\r\n        if (processChildren) {\r\n            const icuMessageText = this.getICUMessageText(node);\r\n            let isICU = !isNullOrUndefined(icuMessageText);\r\n            if (isICU) {\r\n                try {\r\n                    message.addICUMessage(icuMessageText);\r\n                } catch (error) {\r\n                    // if it is not parsable, handle it as non ICU\r\n                    console.log('non ICU message: ', icuMessageText, error);\r\n                    isICU = false;\r\n                }\r\n            }\r\n            if (!isICU) {\r\n                const children = node.childNodes;\r\n                for (let i = 0; i < children.length; i++) {\r\n                    this.addPartsOfNodeToMessage(children.item(i), message, true);\r\n                }\r\n            }\r\n        }\r\n        if (node.nodeType === node.ELEMENT_NODE) {\r\n            this.processEndElement(<Element> node, message);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return the ICU message content of the node, if it is an ICU Message.\r\n     * @param node node\r\n     * @return message or null, if it is no ICU Message.\r\n     */\r\n    protected getICUMessageText(node: Node): string {\r\n        const children = node.childNodes;\r\n        if (children.length === 0) {\r\n            return null;\r\n        }\r\n        const firstChild = children.item(0);\r\n        if (firstChild.nodeType === firstChild.TEXT_NODE) {\r\n            if (this.isICUMessageStart(firstChild.textContent)) {\r\n                return DOMUtilities.getXMLContent(<Element> node);\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test, wether text is beginning of ICU Message.\r\n     * @param text text\r\n     */\r\n    public isICUMessageStart(text: string): boolean {\r\n        return ParsedMessagePartICUMessage.looksLikeICUMessage(text);\r\n//        return text.startsWith('{VAR_PLURAL') || text.startsWith('{VAR_SELECT');\r\n    }\r\n\r\n    /**\r\n     * Handle this node.\r\n     * This is called before the children are done.\r\n     * @param elementNode elementNode\r\n     * @param message message to be altered\r\n     * @return true, if children should be processed too, false otherwise (children ignored then)\r\n     */\r\n    protected abstract processStartElement(elementNode: Element, message: ParsedMessage): boolean;\r\n\r\n    /**\r\n     * Handle end of this node.\r\n     * This is called after all children are processed.\r\n     * @param elementNode elementNode\r\n     * @param message message to be altered\r\n     */\r\n    protected abstract processEndElement(elementNode: Element, message: ParsedMessage);\r\n\r\n    /**\r\n     * Parse normalized string to ParsedMessage.\r\n     * @param normalizedString normalized string\r\n     * @param sourceMessage optional original message that will be translated by normalized new one\r\n     * @return a new parsed message.\r\n     * Throws an error if normalized string is not well formed.\r\n     */\r\n    public parseNormalizedString(normalizedString: string, sourceMessage: ParsedMessage): ParsedMessage {\r\n        const message: ParsedMessage = new ParsedMessage(this, sourceMessage);\r\n        const openTags = [];\r\n        let tokens: Token[];\r\n        try {\r\n            tokens = new ParsedMesageTokenizer().tokenize(normalizedString);\r\n        } catch (error) {\r\n            throw new Error(format('unexpected error while parsing message: \"%s\" (parsed \"%\")', error.message, normalizedString));\r\n        }\r\n        tokens.forEach((token: Token) => {\r\n            let disp: string = null;\r\n            switch (token.type) {\r\n                case TEXT:\r\n                    message.addText(token.value.text);\r\n                    break;\r\n                case START_TAG:\r\n                    message.addStartTag(token.value.name, token.value.idcounter);\r\n                    openTags.push(token.value.name);\r\n                    break;\r\n                case END_TAG:\r\n                    message.addEndTag(token.value.name);\r\n                    if (openTags.length === 0 || openTags[openTags.length - 1] !== token.value.name) {\r\n                        // oops, not well formed\r\n                        throw new Error(format('unexpected close tag \"%s\" (parsed \"%s\")', token.value.name, normalizedString));\r\n                    }\r\n                    openTags.pop();\r\n                    break;\r\n                case EMPTY_TAG:\r\n                    message.addEmptyTag(token.value.name, token.value.idcounter);\r\n                    break;\r\n                case PLACEHOLDER:\r\n                    disp = (sourceMessage) ? sourceMessage.getPlaceholderDisp(token.value.idcounter) : null;\r\n                    message.addPlaceholder(token.value.idcounter, disp);\r\n                    break;\r\n                case ICU_MESSAGE_REF:\r\n                    disp = (sourceMessage) ? sourceMessage.getICUMessageRefDisp(token.value.idcounter) : null;\r\n                    message.addICUMessageRef(token.value.idcounter, disp);\r\n                    break;\r\n                case ICU_MESSAGE:\r\n                    throw new Error(format('<ICUMessage/> not allowed here, use parseICUMessage instead (parsed \"%\")', normalizedString));\r\n                default:\r\n                    break;\r\n            }\r\n        });\r\n        if (openTags.length > 0) {\r\n            // oops, not well closed tags\r\n            throw new Error(format('missing close tag \"%s\" (parsed \"%s\")', openTags[openTags.length - 1], normalizedString));\r\n        }\r\n        message.setXmlRepresentation(this.createXmlRepresentation(message));\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Parse a string, that is an ICU message, to ParsedMessage.\r\n     * @param icuMessageString the message, like '{x, plural, =0 {nothing} =1 {one} other {many}}'.\r\n     * @param sourceMessage optional original message that will be translated by normalized new one\r\n     * @return a new parsed message.\r\n     * Throws an error if icuMessageString has not the correct syntax.\r\n     */\r\n    parseICUMessage(icuMessageString: string, sourceMessage: ParsedMessage): ParsedMessage {\r\n        const message: ParsedMessage = new ParsedMessage(this, sourceMessage);\r\n        message.addICUMessage(icuMessageString);\r\n        return message;\r\n    }\r\n\r\n    /**\r\n     * Helper function: Parse ID from a name.\r\n     * name optionally ends with _<number>. This is the idcount.\r\n     * E.g. name=\"TAG_IMG\" returns 0\r\n     * name = \"TAG_IMG_1\" returns 1\r\n     * @param name name\r\n     * @return id count\r\n     */\r\n    protected parseIdCountFromName(name: string): number {\r\n        const regex = /.*_([0-9]*)/;\r\n        const match = regex.exec(name);\r\n        if (isNullOrUndefined(match) || match[1] === '') {\r\n            return 0;\r\n        } else {\r\n            const num = match[1];\r\n            return parseInt(num, 10);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create the native xml for a message.\r\n     * Parts are already set here.\r\n     * @param message message\r\n     */\r\n    protected createXmlRepresentation(message: ParsedMessage): Element {\r\n        const root: Document = new DOMParser().parseFromString('<dummy/>', 'text/xml');\r\n        const rootElem: Element = root.getElementsByTagName('dummy').item(0);\r\n        this.addXmlRepresentationToRoot(message, rootElem);\r\n        return rootElem;\r\n    }\r\n\r\n    protected abstract addXmlRepresentationToRoot(message: ParsedMessage, rootElem: Element);\r\n\r\n    protected createXmlRepresentationOfTextPart(part: ParsedMessagePartText, rootElem: Element): Node {\r\n        return rootElem.ownerDocument.createTextNode(part.asDisplayString());\r\n    }\r\n\r\n    /**\r\n     * the xml used for start tag in the message.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     * @param id id number in xliff2\r\n     */\r\n    protected abstract createXmlRepresentationOfStartTagPart(part: ParsedMessagePartStartTag, rootElem: Element, id?: number): Node;\r\n\r\n    /**\r\n     * the xml used for end tag in the message.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected abstract createXmlRepresentationOfEndTagPart(part: ParsedMessagePartEndTag, rootElem: Element): Node;\r\n\r\n    /**\r\n     * the xml used for empty tag in the message.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     * @param id id number in xliff2\r\n     */\r\n    protected abstract createXmlRepresentationOfEmptyTagPart(part: ParsedMessagePartEmptyTag, rootElem: Element, id?: number): Node;\r\n\r\n    /**\r\n     * the xml used for placeholder in the message.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     * @param id id number in xliff2\r\n     */\r\n    protected abstract createXmlRepresentationOfPlaceholderPart(part: ParsedMessagePartPlaceholder, rootElem: Element, id?: number): Node;\r\n\r\n    /**\r\n     * the xml used for icu message refs in the message.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected abstract createXmlRepresentationOfICUMessageRefPart(part: ParsedMessagePartICUMessageRef, rootElem: Element): Node;\r\n}\r\n","/**\r\n * Created by roobm on 16.05.2017.\r\n * Mapping from normalized tag names to placeholder names.\r\n */\r\n\r\n/*\r\ncopied from https://github.com/angular/angular/blob/master/packages/compiler/src/i18n/serializers/placeholder.ts\r\n */\r\nconst TAG_TO_PLACEHOLDER_NAMES: {[k: string]: string} = {\r\n    'A': 'LINK',\r\n    'B': 'BOLD_TEXT',\r\n    'BR': 'LINE_BREAK',\r\n    'EM': 'EMPHASISED_TEXT',\r\n    'H1': 'HEADING_LEVEL1',\r\n    'H2': 'HEADING_LEVEL2',\r\n    'H3': 'HEADING_LEVEL3',\r\n    'H4': 'HEADING_LEVEL4',\r\n    'H5': 'HEADING_LEVEL5',\r\n    'H6': 'HEADING_LEVEL6',\r\n    'HR': 'HORIZONTAL_RULE',\r\n    'I': 'ITALIC_TEXT',\r\n    'LI': 'LIST_ITEM',\r\n    'LINK': 'MEDIA_LINK',\r\n    'OL': 'ORDERED_LIST',\r\n    'P': 'PARAGRAPH',\r\n    'Q': 'QUOTATION',\r\n    'S': 'STRIKETHROUGH_TEXT',\r\n    'SMALL': 'SMALL_TEXT',\r\n    'SUB': 'SUBSTRIPT',\r\n    'SUP': 'SUPERSCRIPT',\r\n    'TBODY': 'TABLE_BODY',\r\n    'TD': 'TABLE_CELL',\r\n    'TFOOT': 'TABLE_FOOTER',\r\n    'TH': 'TABLE_HEADER_CELL',\r\n    'THEAD': 'TABLE_HEADER',\r\n    'TR': 'TABLE_ROW',\r\n    'TT': 'MONOSPACED_TEXT',\r\n    'U': 'UNDERLINED_TEXT',\r\n    'UL': 'UNORDERED_LIST',\r\n};\r\n\r\n/**\r\n * HTML Tags (in uppercase) that are empty, they have no content, but do not need a close tag, e.g. <br>, <img>, <hr>.\r\n */\r\nconst VOID_TAGS = ['BR', 'HR', 'IMG', 'AREA', 'LINK', 'WBR'];\r\n\r\nexport class TagMapping {\r\n\r\n    public getStartTagPlaceholderName(tag: string, id: number): string {\r\n        const upperTag = tag.toUpperCase();\r\n        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\r\n        return `START_${baseName}` + this.counterString(id);\r\n    }\r\n\r\n    public getCloseTagPlaceholderName(tag: string): string {\r\n        const upperTag = tag.toUpperCase();\r\n        const baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\r\n        return `CLOSE_${baseName}`;\r\n    }\r\n\r\n    public getEmptyTagPlaceholderName(tag: string, id: number): string {\r\n        const upperTag = tag.toUpperCase();\r\n        const baseName =  TAG_TO_PLACEHOLDER_NAMES[upperTag] || `TAG_${upperTag}`;\r\n        return baseName + this.counterString(id);\r\n    }\r\n\r\n    public getCtypeForTag(tag: string): string {\r\n        switch (tag.toLowerCase()) {\r\n            case 'br':\r\n                return 'lb';\r\n            case 'img':\r\n                return 'image';\r\n            default:\r\n                return `x-${tag}`;\r\n        }\r\n    }\r\n\r\n    public getTagnameFromStartTagPlaceholderName(placeholderName: string): string {\r\n        if (placeholderName.startsWith('START_TAG_')) {\r\n            return this.stripCounter(placeholderName.substring('START_TAG_'.length)).toLowerCase();\r\n        } else if (placeholderName.startsWith('START_')) {\r\n            const ph = this.stripCounter(placeholderName.substring('START_'.length));\r\n            const matchKey = Object.keys(TAG_TO_PLACEHOLDER_NAMES).find((key) => TAG_TO_PLACEHOLDER_NAMES[key] === ph);\r\n            return matchKey ? matchKey.toLowerCase() : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public getTagnameFromCloseTagPlaceholderName(placeholderName: string): string {\r\n        if (placeholderName.startsWith('CLOSE_TAG_')) {\r\n            return this.stripCounter(placeholderName.substring('CLOSE_TAG_'.length)).toLowerCase();\r\n        } else if (placeholderName.startsWith('CLOSE_')) {\r\n            const ph = this.stripCounter(placeholderName.substring('CLOSE_'.length));\r\n            const matchKey = Object.keys(TAG_TO_PLACEHOLDER_NAMES).find((key) => TAG_TO_PLACEHOLDER_NAMES[key] === ph);\r\n            return matchKey ? matchKey.toLowerCase() : null;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Test, wether placeholder name stands for empty html tag.\r\n     * @param placeholderName can be TAG_<name> or just <name>\r\n     */\r\n    public isEmptyTagPlaceholderName(placeholderName: string): boolean {\r\n        const ph = this.stripCounter(placeholderName);\r\n        let matchKey;\r\n        if (ph.startsWith('TAG_')) {\r\n            matchKey = ph.substring(4).toUpperCase();\r\n        } else {\r\n            matchKey = Object.keys(TAG_TO_PLACEHOLDER_NAMES).find((key) => TAG_TO_PLACEHOLDER_NAMES[key] === ph);\r\n        }\r\n        if (matchKey) {\r\n            if (VOID_TAGS.indexOf(matchKey) >= 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * tagname of empty tag placeholder.\r\n     * @param placeholderName can be TAG_<name> or just <name>\r\n     */\r\n    public getTagnameFromEmptyTagPlaceholderName(placeholderName: string): string {\r\n        const ph = this.stripCounter(placeholderName);\r\n        let matchKey;\r\n        if (ph.startsWith('TAG_')) {\r\n            matchKey = ph.substring(4).toUpperCase();\r\n        } else {\r\n            matchKey = Object.keys(TAG_TO_PLACEHOLDER_NAMES).find((key) => TAG_TO_PLACEHOLDER_NAMES[key] === ph);\r\n        }\r\n        if (matchKey) {\r\n            if (VOID_TAGS.indexOf(matchKey) >= 0) {\r\n                return matchKey.toLowerCase();\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * If placeholder ends with _[0-9]+, strip that number.\r\n     * @param placeholderName placeholderName\r\n     * @return placeholderName without counter at end.\r\n     */\r\n    private stripCounter(placeholderName: string): string {\r\n        if (placeholderName) {\r\n            const re = /(.*)_[0-9]+$/;\r\n            if (placeholderName.match(re)) {\r\n                return placeholderName.replace(re, '$1');\r\n            }\r\n        }\r\n        return placeholderName;\r\n    }\r\n\r\n    /**\r\n     * String suffix for counter.\r\n     * If counter is 0, it is empty, otherwise _<id>.\r\n     * @param id id\r\n     * @return suffix for counter.\r\n     */\r\n    private counterString(id: number) {\r\n        if (id === 0) {\r\n            return '';\r\n        } else {\r\n            return '_' + id.toString(10);\r\n        }\r\n    }\r\n}\r\n","import {AbstractMessageParser} from './abstract-message-parser';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {ParsedMessagePartStartTag} from './parsed-message-part-start-tag';\r\nimport {ParsedMessagePartEndTag} from './parsed-message-part-end-tag';\r\nimport {ParsedMessagePartPlaceholder} from './parsed-message-part-placeholder';\r\nimport {TagMapping} from './tag-mapping';\r\nimport {ParsedMessagePartEmptyTag} from './parsed-message-part-empty-tag';\r\nimport {ParsedMessagePartICUMessageRef} from './parsed-message-part-icu-message-ref';\r\nimport {isNullOrUndefined} from 'util';\r\nimport {ParsedMessagePartType} from './parsed-message-part';\r\nimport {ParsedMessagePartText} from './parsed-message-part-text';\r\n/**\r\n * Created by roobm on 10.05.2017.\r\n * A message parser for XLIFF 1.2\r\n */\r\nexport class XliffMessageParser extends AbstractMessageParser {\r\n\r\n    /**\r\n     * Handle this element node.\r\n     * This is called before the children are done.\r\n     * @param elementNode elementNode\r\n     * @param message message to be altered\r\n     * @return true, if children should be processed too, false otherwise (children ignored then)\r\n     */\r\n    protected processStartElement(elementNode: Element, message: ParsedMessage): boolean {\r\n        const tagName = elementNode.tagName;\r\n        const tagMapping = new TagMapping();\r\n        if (tagName === 'x') {\r\n            // placeholder are like <x id=\"INTERPOLATION\"/> or <x id=\"INTERPOLATION_1\">\r\n            const id = elementNode.getAttribute('id');\r\n            if (!id) {\r\n                return; // should not happen\r\n            }\r\n            if (id.startsWith('INTERPOLATION')) {\r\n                const index = this.parsePlaceholderIndexFromId(id);\r\n                message.addPlaceholder(index, null);\r\n            } else if (id.startsWith('ICU')) {\r\n                const index = this.parseICUMessageRefIndexFromId(id);\r\n                message.addICUMessageRef(index, null);\r\n            } else if (id.startsWith('START_')) {\r\n                const normalizedTagName = tagMapping.getTagnameFromStartTagPlaceholderName(id);\r\n                if (normalizedTagName) {\r\n                    const idcount = this.parseIdCountFromName(id);\r\n                    message.addStartTag(normalizedTagName, idcount);\r\n                }\r\n            } else if (id.startsWith('CLOSE_')) {\r\n                const normalizedTagName = tagMapping.getTagnameFromCloseTagPlaceholderName(id);\r\n                if (normalizedTagName) {\r\n                    message.addEndTag(normalizedTagName);\r\n                }\r\n            } else if (tagMapping.isEmptyTagPlaceholderName(id)) {\r\n                const normalizedTagName = tagMapping.getTagnameFromEmptyTagPlaceholderName(id);\r\n                if (normalizedTagName) {\r\n                    const idcount = this.parseIdCountFromName(id);\r\n                    message.addEmptyTag(normalizedTagName, idcount);\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Handle end of this element node.\r\n     * This is called after all children are processed.\r\n     * @param elementNode elementNode\r\n     * @param message message to be altered\r\n     */\r\n    protected processEndElement(elementNode: Element, message: ParsedMessage) {\r\n    }\r\n\r\n    /**\r\n     * Parse id attribute of x element as placeholder index.\r\n     * id can be \"INTERPOLATION\" or \"INTERPOLATION_n\"\r\n     * @param id id\r\n     * @return index\r\n     */\r\n    private parsePlaceholderIndexFromId(id: string): number {\r\n        let indexString = '';\r\n\r\n        if (id === 'INTERPOLATION') {\r\n            indexString = '0';\r\n        } else {\r\n            indexString = id.substring('INTERPOLATION_'.length);\r\n        }\r\n        return Number.parseInt(indexString, 10);\r\n    }\r\n\r\n    /**\r\n     * Parse id attribute of x element as placeholder index.\r\n     * id can be \"INTERPOLATION\" or \"INTERPOLATION_n\"\r\n     * @param id id\r\n     * @return id as number\r\n     */\r\n    private parseICUMessageRefIndexFromId(id: string): number {\r\n        let indexString = '';\r\n\r\n        if (id === 'ICU') {\r\n            indexString = '0';\r\n        } else {\r\n            indexString = id.substring('ICU_'.length);\r\n        }\r\n        return Number.parseInt(indexString, 10);\r\n    }\r\n\r\n    protected addXmlRepresentationToRoot(message: ParsedMessage, rootElem: Element) {\r\n        message.parts().forEach((part) => {\r\n            let child: Node;\r\n            switch (part.type) {\r\n                case ParsedMessagePartType.TEXT:\r\n                    child = this.createXmlRepresentationOfTextPart(<ParsedMessagePartText> part, rootElem);\r\n                    break;\r\n                case ParsedMessagePartType.START_TAG:\r\n                    child = this.createXmlRepresentationOfStartTagPart((<ParsedMessagePartStartTag>part), rootElem);\r\n                    break;\r\n                case ParsedMessagePartType.END_TAG:\r\n                    child = this.createXmlRepresentationOfEndTagPart((<ParsedMessagePartEndTag>part), rootElem);\r\n                    break;\r\n                case ParsedMessagePartType.EMPTY_TAG:\r\n                    child = this.createXmlRepresentationOfEmptyTagPart((<ParsedMessagePartEmptyTag>part), rootElem);\r\n                    break;\r\n                case ParsedMessagePartType.PLACEHOLDER:\r\n                    child = this.createXmlRepresentationOfPlaceholderPart((<ParsedMessagePartPlaceholder>part), rootElem);\r\n                    break;\r\n                case ParsedMessagePartType.ICU_MESSAGE_REF:\r\n                    child = this.createXmlRepresentationOfICUMessageRefPart((<ParsedMessagePartICUMessageRef>part), rootElem);\r\n                    break;\r\n            }\r\n            if (child) {\r\n                rootElem.appendChild(child);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * the xml used for start tag in the message.\r\n     * Returns an empty <x/>-Element with attributes id and ctype\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfStartTagPart(part: ParsedMessagePartStartTag, rootElem: Element): Node {\r\n        const xElem = rootElem.ownerDocument.createElement('x');\r\n        const tagMapping = new TagMapping();\r\n        const idAttrib = tagMapping.getStartTagPlaceholderName(part.tagName(), part.idCounter());\r\n        const ctypeAttrib = tagMapping.getCtypeForTag(part.tagName());\r\n        const equivTextAttr = '<' + part.tagName() + '>';\r\n        xElem.setAttribute('id', idAttrib);\r\n        xElem.setAttribute('ctype', ctypeAttrib);\r\n        xElem.setAttribute('equiv-text', equivTextAttr);\r\n        return xElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for end tag in the message.\r\n     * Returns an empty <x/>-Element with attributes id and ctype\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfEndTagPart(part: ParsedMessagePartEndTag, rootElem: Element): Node {\r\n        const xElem = rootElem.ownerDocument.createElement('x');\r\n        const tagMapping = new TagMapping();\r\n        const idAttrib = tagMapping.getCloseTagPlaceholderName(part.tagName());\r\n        const ctypeAttrib = 'x-' + part.tagName();\r\n        xElem.setAttribute('id', idAttrib);\r\n        xElem.setAttribute('ctype', ctypeAttrib);\r\n        return xElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for empty tag in the message.\r\n     * Returns an empty <x/>-Element with attributes id and ctype\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfEmptyTagPart(part: ParsedMessagePartEmptyTag, rootElem: Element): Node {\r\n        const xElem = rootElem.ownerDocument.createElement('x');\r\n        const tagMapping = new TagMapping();\r\n        const idAttrib = tagMapping.getEmptyTagPlaceholderName(part.tagName(), part.idCounter());\r\n        const ctypeAttrib = tagMapping.getCtypeForTag(part.tagName());\r\n        const equivTextAttr = '<' + part.tagName() + '/>';\r\n        xElem.setAttribute('id', idAttrib);\r\n        xElem.setAttribute('ctype', ctypeAttrib);\r\n        xElem.setAttribute('equiv-text', equivTextAttr);\r\n        return xElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for placeholder in the message.\r\n     * Returns an empty <x/>-Element with attribute id=\"INTERPOLATION\" or id=\"INTERPOLATION_n\"\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfPlaceholderPart(part: ParsedMessagePartPlaceholder, rootElem: Element): Node {\r\n        const xElem = rootElem.ownerDocument.createElement('x');\r\n        let idAttrib = 'INTERPOLATION';\r\n        if (part.index() > 0) {\r\n            idAttrib = 'INTERPOLATION_' + part.index().toString(10);\r\n        }\r\n        const equivTextAttr = part.disp();\r\n        xElem.setAttribute('id', idAttrib);\r\n        if (equivTextAttr) {\r\n            xElem.setAttribute('equiv-text', equivTextAttr);\r\n        }\r\n        return xElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for icu message refs in the message.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfICUMessageRefPart(part: ParsedMessagePartICUMessageRef, rootElem: Element): Node {\r\n        const xElem = rootElem.ownerDocument.createElement('x');\r\n        let idAttrib = 'ICU';\r\n        if (part.index() > 0) {\r\n            idAttrib = 'ICU_' + part.index().toString(10);\r\n        }\r\n        xElem.setAttribute('id', idAttrib);\r\n        return xElem;\r\n    }\r\n\r\n}\r\n","import {STATE_NEW, STATE_TRANSLATED, STATE_FINAL} from '../api/constants';\r\nimport {ITranslationMessagesFile} from '../api/i-translation-messages-file';\r\nimport {INormalizedMessage} from '../api/i-normalized-message';\r\nimport {ITransUnit} from '../api/i-trans-unit';\r\nimport {INote} from '../api/i-note';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {AbstractTransUnit} from './abstract-trans-unit';\r\nimport {XliffMessageParser} from './xliff-message-parser';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {AbstractMessageParser} from './abstract-message-parser';\r\nimport {isNullOrUndefined} from 'util';\r\n/**\r\n * Created by martin on 01.05.2017.\r\n * A Translation Unit in an XLIFF 1.2 file.\r\n */\r\n\r\nexport class XliffTransUnit extends AbstractTransUnit implements ITransUnit {\r\n\r\n    constructor(_element: Element, _id: string, _translationMessagesFile: ITranslationMessagesFile) {\r\n        super(_element, _id, _translationMessagesFile);\r\n    }\r\n\r\n    public sourceContent(): string {\r\n        const sourceElement = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n        return DOMUtilities.getXMLContent(sourceElement);\r\n    }\r\n\r\n    /**\r\n     * Set new source content in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing changed source content.\r\n     * @param newContent the new content.\r\n     */\r\n    public setSourceContent(newContent: string) {\r\n        let source = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n        if (!source) {\r\n            // should not happen, there always has to be a source, but who knows..\r\n            source = this._element.appendChild(this._element.ownerDocument.createElement('source'));\r\n        }\r\n        DOMUtilities.replaceContentWithXMLContent(source, newContent);\r\n    }\r\n\r\n    /**\r\n     * Return a parser used for normalized messages.\r\n     */\r\n    protected messageParser(): AbstractMessageParser {\r\n        return new XliffMessageParser();\r\n    }\r\n\r\n    /**\r\n     * The original text value, that is to be translated, as normalized message.\r\n     */\r\n    public createSourceContentNormalized(): ParsedMessage {\r\n        const sourceElement = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n        if (sourceElement) {\r\n            return this.messageParser().createNormalizedMessageFromXML(sourceElement, null);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the translated value (containing all markup, depends on the concrete format used).\r\n     */\r\n    public targetContent(): string {\r\n        const targetElement = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        return DOMUtilities.getXMLContent(targetElement);\r\n    }\r\n\r\n    /**\r\n     * the translated value, but all placeholders are replaced with {{n}} (starting at 0)\r\n     * and all embedded html is replaced by direct html markup.\r\n     */\r\n    targetContentNormalized(): INormalizedMessage {\r\n        const targetElement = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        return new XliffMessageParser().createNormalizedMessageFromXML(targetElement, this.sourceContentNormalized());\r\n    }\r\n\r\n    /**\r\n     * State of the translation as stored in the xml.\r\n     */\r\n    public nativeTargetState(): string {\r\n        const targetElement = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        if (targetElement) {\r\n            return targetElement.getAttribute('state');\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set state in xml.\r\n     * @param nativeState nativeState\r\n     */\r\n    protected setNativeTargetState(nativeState: string) {\r\n        const targetElement = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        if (targetElement) {\r\n            targetElement.setAttribute('state', nativeState);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Map an abstract state (new, translated, final) to a concrete state used in the xml.\r\n     * Returns the state to be used in the xml.\r\n     * @param state one of Constants.STATE...\r\n     * @returns a native state (depends on concrete format)\r\n     * @throws error, if state is invalid.\r\n     */\r\n    protected mapStateToNativeState(state: string): string {\r\n        switch ( state) {\r\n            case STATE_NEW:\r\n                return 'new';\r\n            case STATE_TRANSLATED:\r\n                return 'translated';\r\n            case STATE_FINAL:\r\n                return 'final';\r\n            default:\r\n                throw new Error('unknown state ' +  state);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Map a native state (found in the document) to an abstract state (new, translated, final).\r\n     * Returns the abstract state.\r\n     * @param nativeState nativeState\r\n     */\r\n    protected mapNativeStateToState(nativeState: string): string {\r\n        switch ( nativeState) {\r\n            case 'new':\r\n                return STATE_NEW;\r\n            case 'needs-translation':\r\n                return STATE_NEW;\r\n            case 'translated':\r\n                return STATE_TRANSLATED;\r\n            case 'needs-adaptation':\r\n                return STATE_TRANSLATED;\r\n            case 'needs-l10n':\r\n                return STATE_TRANSLATED;\r\n            case 'needs-review-adaptation':\r\n                return STATE_TRANSLATED;\r\n            case 'needs-review-l10n':\r\n                return STATE_TRANSLATED;\r\n            case 'needs-review-translation':\r\n                return STATE_TRANSLATED;\r\n            case 'final':\r\n                return STATE_FINAL;\r\n            case 'signed-off':\r\n                return STATE_FINAL;\r\n            default:\r\n                return STATE_NEW;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * All the source elements in the trans unit.\r\n     * The source element is a reference to the original template.\r\n     * It contains the name of the template file and a line number with the position inside the template.\r\n     * It is just a help for translators to find the context for the translation.\r\n     * This is set when using Angular 4.0 or greater.\r\n     * Otherwise it just returns an empty array.\r\n     */\r\n    public sourceReferences(): {sourcefile: string, linenumber: number}[] {\r\n        const sourceElements = this._element.getElementsByTagName('context-group');\r\n        const sourceRefs: { sourcefile: string, linenumber: number }[] = [];\r\n        for (let i = 0; i < sourceElements.length; i++) {\r\n            const elem = sourceElements.item(i);\r\n            if (elem.getAttribute('purpose') === 'location') {\r\n                const contextElements = elem.getElementsByTagName('context');\r\n                let sourcefile = null;\r\n                let linenumber = 0;\r\n                for (let j = 0; j < contextElements.length; j++) {\r\n                    const contextElem = contextElements.item(j);\r\n                    if (contextElem.getAttribute('context-type') === 'sourcefile') {\r\n                        sourcefile = DOMUtilities.getPCDATA(contextElem);\r\n                    }\r\n                    if (contextElem.getAttribute('context-type') === 'linenumber') {\r\n                        linenumber = Number.parseInt(DOMUtilities.getPCDATA(contextElem), 10);\r\n                    }\r\n                }\r\n                sourceRefs.push({sourcefile: sourcefile, linenumber: linenumber});\r\n            }\r\n        }\r\n        return sourceRefs;\r\n    }\r\n\r\n    /**\r\n     * Set source ref elements in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing source refs.\r\n     * @param sourceRefs the sourcerefs to set. Old ones are removed.\r\n     */\r\n    public setSourceReferences(sourceRefs: {sourcefile: string, linenumber: number}[]) {\r\n        this.removeAllSourceReferences();\r\n        sourceRefs.forEach((ref) => {\r\n            const contextGroup = this._element.ownerDocument.createElement('context-group');\r\n            contextGroup.setAttribute('purpose', 'location');\r\n            const contextSource = this._element.ownerDocument.createElement('context');\r\n            contextSource.setAttribute('context-type', 'sourcefile');\r\n            contextSource.appendChild(this._element.ownerDocument.createTextNode(ref.sourcefile));\r\n            const contextLine = this._element.ownerDocument.createElement('context');\r\n            contextLine.setAttribute('context-type', 'linenumber');\r\n            contextLine.appendChild(this._element.ownerDocument.createTextNode(ref.linenumber.toString(10)));\r\n            contextGroup.appendChild(contextSource);\r\n            contextGroup.appendChild(contextLine);\r\n            this._element.appendChild(contextGroup);\r\n        });\r\n    }\r\n\r\n    private removeAllSourceReferences() {\r\n        const sourceElements = this._element.getElementsByTagName('context-group');\r\n        const toBeRemoved = [];\r\n        for (let i = 0; i < sourceElements.length; i++) {\r\n            const elem = sourceElements.item(i);\r\n            if (elem.getAttribute('purpose') === 'location') {\r\n                toBeRemoved.push(elem);\r\n            }\r\n        }\r\n        toBeRemoved.forEach((elem) => {elem.parentNode.removeChild(elem); });\r\n    }\r\n\r\n    /**\r\n     * The description set in the template as value of the i18n-attribute.\r\n     * e.g. i18n=\"mydescription\".\r\n     * In xliff this is stored as a note element with attribute from=\"description\".\r\n     */\r\n    public description(): string {\r\n        const noteElem = this.findNoteElementWithFromAttribute('description');\r\n        if (noteElem) {\r\n            return DOMUtilities.getPCDATA(noteElem);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change description property of trans-unit.\r\n     * @param description description\r\n     */\r\n    public setDescription(description: string) {\r\n        let noteElem = this.findNoteElementWithFromAttribute('description');\r\n        if (description) {\r\n           if (isNullOrUndefined(noteElem)) {\r\n               // create it\r\n               noteElem = this.createNoteElementWithFromAttribute('description', description);\r\n           } else {\r\n               DOMUtilities.replaceContentWithXMLContent(noteElem, description);\r\n           }\r\n        } else {\r\n            if (!isNullOrUndefined(noteElem)) {\r\n                // remove node\r\n                this.removeNoteElementWithFromAttribute('description');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find a note element with attribute from='<attrValue>'\r\n     * @param attrValue attrValue\r\n     * @return element or null is absent\r\n     */\r\n    private findNoteElementWithFromAttribute(attrValue: string): Element {\r\n        const noteElements = this._element.getElementsByTagName('note');\r\n        for (let i = 0; i < noteElements.length; i++) {\r\n            const noteElem = noteElements.item(i);\r\n            if (noteElem.getAttribute('from') === attrValue) {\r\n                return noteElem;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get all note elements where from attribute is not description or meaning\r\n     * @return elements\r\n     */\r\n    private findAllAdditionalNoteElements(): Element[] {\r\n        const noteElements = this._element.getElementsByTagName('note');\r\n        const result: Element[] = [];\r\n        for (let i = 0; i < noteElements.length; i++) {\r\n            const noteElem = noteElements.item(i);\r\n            const fromAttribute = noteElem.getAttribute('from');\r\n            if (fromAttribute !== 'description' && fromAttribute !== 'meaning') {\r\n                result.push(noteElem);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a new note element with attribute from='<attrValue>'\r\n     * @param fromAttrValue value of \"from\" attribute\r\n     * @param content text value of note element\r\n     * @return the new created element\r\n     */\r\n    private createNoteElementWithFromAttribute(fromAttrValue: string, content: string): Element {\r\n        const noteElement = this._element.ownerDocument.createElement('note');\r\n        if (fromAttrValue) {\r\n            noteElement.setAttribute('from', fromAttrValue);\r\n        }\r\n        noteElement.setAttribute('priority', '1');\r\n        if (content) {\r\n            DOMUtilities.replaceContentWithXMLContent(noteElement, content);\r\n        }\r\n        this._element.appendChild(noteElement);\r\n        return noteElement;\r\n    }\r\n\r\n    /**\r\n     * Remove note element with attribute from='<attrValue>'\r\n     * @param attrValue attrValue\r\n     */\r\n    private removeNoteElementWithFromAttribute(attrValue: string) {\r\n        const noteElement = this.findNoteElementWithFromAttribute(attrValue);\r\n        if (noteElement) {\r\n            this._element.removeChild(noteElement);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all note elements where attribute \"from\" is not description or meaning.\r\n     */\r\n    private removeAllAdditionalNoteElements() {\r\n        const noteElements = this.findAllAdditionalNoteElements();\r\n        noteElements.forEach((noteElement) => {\r\n            this._element.removeChild(noteElement);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * The meaning (intent) set in the template as value of the i18n-attribute.\r\n     * This is the part in front of the | symbol.\r\n     * e.g. i18n=\"meaning|mydescription\".\r\n     * In xliff this is stored as a note element with attribute from=\"meaning\".\r\n     */\r\n    public meaning(): string {\r\n        const noteElem = this.findNoteElementWithFromAttribute('meaning');\r\n        if (noteElem) {\r\n            return DOMUtilities.getPCDATA(noteElem);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change meaning property of trans-unit.\r\n     * @param  meaning meaning\r\n     */\r\n    public setMeaning(meaning: string) {\r\n        let noteElem = this.findNoteElementWithFromAttribute('meaning');\r\n        if (meaning) {\r\n            if (isNullOrUndefined(noteElem)) {\r\n                // create it\r\n                noteElem = this.createNoteElementWithFromAttribute('meaning', meaning);\r\n            } else {\r\n                DOMUtilities.replaceContentWithXMLContent(noteElem, meaning);\r\n            }\r\n        } else {\r\n            if (!isNullOrUndefined(noteElem)) {\r\n                // remove node\r\n                this.removeNoteElementWithFromAttribute('meaning');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all notes of the trans-unit.\r\n     * Notes are remarks made by a translator.\r\n     * (description and meaning are not included here!)\r\n     */\r\n    public notes(): INote[] {\r\n        const noteElememts: Element[] = this.findAllAdditionalNoteElements();\r\n        return noteElememts.map(elem => {\r\n            return {\r\n                from: elem.getAttribute('from'),\r\n                text: DOMUtilities.getPCDATA(elem)\r\n            };\r\n        });\r\n     }\r\n\r\n    /**\r\n     * Test, wether setting of notes is supported.\r\n     * If not, setNotes will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    public supportsSetNotes(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Add notes to trans unit.\r\n     * @param newNotes the notes to add.\r\n     * @throws an Error if any note contains description or meaning as from attribute.\r\n     */\r\n    public setNotes(newNotes: INote[]) {\r\n        if (!isNullOrUndefined(newNotes)) {\r\n            this.checkNotes(newNotes);\r\n        }\r\n        this.removeAllAdditionalNoteElements();\r\n        if (!isNullOrUndefined(newNotes)) {\r\n            newNotes.forEach((note) => {\r\n                const noteElem = this.createNoteElementWithFromAttribute(note.from, note.text);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the translation to a given string (including markup).\r\n     * @param translation translation\r\n     */\r\n    protected translateNative(translation: string) {\r\n        let target = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        if (!target) {\r\n            const source = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n            target = DOMUtilities.createFollowingSibling('target', source);\r\n        }\r\n        DOMUtilities.replaceContentWithXMLContent(target, <string> translation);\r\n        this.setTargetState(STATE_TRANSLATED);\r\n    }\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * Returns a changed copy of this trans unit.\r\n     * receiver is not changed.\r\n     * (internal usage only, a client should call importNewTransUnit on ITranslationMessageFile)\r\n     */\r\n    public cloneWithSourceAsTarget(isDefaultLang: boolean, copyContent: boolean, targetFile: ITranslationMessagesFile): AbstractTransUnit {\r\n        const element = <Element> this._element.cloneNode(true);\r\n        const clone = new XliffTransUnit(element, this._id, targetFile);\r\n        clone.useSourceAsTarget(isDefaultLang, copyContent);\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * (internal usage only, a client should call createTranslationFileForLang on ITranslationMessageFile)\r\n     */\r\n    public useSourceAsTarget(isDefaultLang: boolean, copyContent: boolean) {\r\n        const source = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n        let target = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        if (!target) {\r\n            target = DOMUtilities.createFollowingSibling('target', source);\r\n        }\r\n        if (isDefaultLang || copyContent) {\r\n            const sourceString = DOMUtilities.getXMLContent(source);\r\n            let newTargetString = sourceString;\r\n            if (!this.isICUMessage(sourceString)) {\r\n                newTargetString = this.translationMessagesFile().getNewTransUnitTargetPraefix()\r\n                    + sourceString\r\n                    + this.translationMessagesFile().getNewTransUnitTargetSuffix();\r\n            }\r\n            DOMUtilities.replaceContentWithXMLContent(target, newTargetString);\r\n        } else {\r\n            DOMUtilities.replaceContentWithXMLContent(target, '');\r\n        }\r\n        if (isDefaultLang) {\r\n            target.setAttribute('state', this.mapStateToNativeState(STATE_FINAL));\r\n        } else {\r\n            target.setAttribute('state', this.mapStateToNativeState(STATE_NEW));\r\n        }\r\n    }\r\n}\r\n","import {format} from 'util';\r\nimport {ITranslationMessagesFile} from '../api/i-translation-messages-file';\r\nimport {ITransUnit} from '../api/i-trans-unit';\r\nimport {FORMAT_XLIFF12, FILETYPE_XLIFF12} from '../api/constants';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {XliffTransUnit} from './xliff-trans-unit';\r\nimport {AbstractTranslationMessagesFile} from './abstract-translation-messages-file';\r\nimport {AbstractTransUnit} from './abstract-trans-unit';\r\n/**\r\n * Created by martin on 23.02.2017.\r\n * Ab xliff file read from a source file.\r\n * Defines some relevant get and set method for reading and modifying such a file.\r\n */\r\n\r\nexport class XliffFile extends AbstractTranslationMessagesFile implements ITranslationMessagesFile {\r\n\r\n    /**\r\n     * Create an xlf-File from source.\r\n     * @param xmlString source read from file.\r\n     * @param path Path to file\r\n     * @param encoding optional encoding of the xml.\r\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\r\n     * @return XliffFile\r\n     */\r\n    constructor(xmlString: string, path: string, encoding: string) {\r\n        super();\r\n        this._warnings = [];\r\n        this._numberOfTransUnitsWithMissingId = 0;\r\n        this.initializeFromContent(xmlString, path, encoding);\r\n    }\r\n\r\n    private initializeFromContent(xmlString: string, path: string, encoding: string): XliffFile {\r\n        this.parseContent(xmlString, path, encoding);\r\n        const xliffList = this._parsedDocument.getElementsByTagName('xliff');\r\n        if (xliffList.length !== 1) {\r\n            throw new Error(format('File \"%s\" seems to be no xliff file (should contain an xliff element)', path));\r\n        } else {\r\n            const version = xliffList.item(0).getAttribute('version');\r\n            const expectedVersion = '1.2';\r\n            if (version !== expectedVersion) {\r\n                throw new Error(format('File \"%s\" seems to be no xliff 1.2 file, version should be %s, found %s',\r\n                    path, expectedVersion, version));\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * File format as it is used in config files.\r\n     * Currently 'xlf', 'xmb', 'xmb2'\r\n     * Returns one of the constants FORMAT_..\r\n     */\r\n    public i18nFormat(): string {\r\n        return FORMAT_XLIFF12;\r\n    }\r\n\r\n    /**\r\n     * File type.\r\n     * Here 'XLIFF 1.2'\r\n     */\r\n    public fileType(): string {\r\n        return FILETYPE_XLIFF12;\r\n    }\r\n\r\n    /**\r\n     * return tag names of all elements that have mixed content.\r\n     * These elements will not be beautified.\r\n     * Typical candidates are source and target.\r\n     */\r\n    protected elementsWithMixedContent(): string[] {\r\n        return ['source', 'target', 'tool', 'seg-source', 'g', 'ph', 'bpt', 'ept', 'it', 'sub', 'mrk'];\r\n    }\r\n\r\n    protected initializeTransUnits() {\r\n        this.transUnits = [];\r\n        const transUnitsInFile = this._parsedDocument.getElementsByTagName('trans-unit');\r\n        for (let i = 0; i < transUnitsInFile.length; i++) {\r\n            const transunit = transUnitsInFile.item(i);\r\n            const id = transunit.getAttribute('id');\r\n            if (!id) {\r\n                this._warnings.push(format('oops, trans-unit without \"id\" found in master, please check file %s', this._filename));\r\n            }\r\n            this.transUnits.push(new XliffTransUnit(transunit, id, this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get source language.\r\n     * @return source language.\r\n     */\r\n    public sourceLanguage(): string {\r\n        const fileElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'file');\r\n        if (fileElem) {\r\n            return fileElem.getAttribute('source-language');\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Edit the source language.\r\n     * @param language language\r\n     */\r\n    public setSourceLanguage(language: string) {\r\n        const fileElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'file');\r\n        if (fileElem) {\r\n            fileElem.setAttribute('source-language', language);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get target language.\r\n     * @return target language.\r\n     */\r\n    public targetLanguage(): string {\r\n        const fileElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'file');\r\n        if (fileElem) {\r\n            return fileElem.getAttribute('target-language');\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Edit the target language.\r\n     * @param language language\r\n     */\r\n    public setTargetLanguage(language: string) {\r\n        const fileElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'file');\r\n        if (fileElem) {\r\n            fileElem.setAttribute('target-language', language);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new trans-unit to this file.\r\n     * The trans unit stems from another file.\r\n     * It copies the source content of the tu to the target content too,\r\n     * depending on the values of isDefaultLang and copyContent.\r\n     * So the source can be used as a dummy translation.\r\n     * (used by xliffmerge)\r\n     * @param foreignTransUnit the trans unit to be imported.\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     * @param importAfterElement optional (since 1.10) other transunit (part of this file), that should be used as ancestor.\r\n     * Newly imported trans unit is then inserted directly after this element.\r\n     * If not set or not part of this file, new unit will be imported at the end.\r\n     * If explicity set to null, new unit will be imported at the start.\r\n     * @return the newly imported trans unit (since version 1.7.0)\r\n     * @throws an error if trans-unit with same id already is in the file.\r\n     */\r\n    importNewTransUnit(foreignTransUnit: ITransUnit, isDefaultLang: boolean, copyContent: boolean, importAfterElement?: ITransUnit)\r\n        : ITransUnit {\r\n        if (this.transUnitWithId(foreignTransUnit.id)) {\r\n            throw new Error(format('tu with id %s already exists in file, cannot import it', foreignTransUnit.id));\r\n        }\r\n        const newTu = (<AbstractTransUnit> foreignTransUnit).cloneWithSourceAsTarget(isDefaultLang, copyContent, this);\r\n        const bodyElement = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'body');\r\n        if (!bodyElement) {\r\n            throw new Error(format('File \"%s\" seems to be no xliff 1.2 file (should contain a body element)', this._filename));\r\n        }\r\n        let inserted = false;\r\n        let isAfterElementPartOfFile = false;\r\n        if (!!importAfterElement) {\r\n            const insertionPoint = this.transUnitWithId(importAfterElement.id);\r\n            if (!!insertionPoint) {\r\n                isAfterElementPartOfFile = true;\r\n            }\r\n        }\r\n        if (importAfterElement === undefined || (importAfterElement && !isAfterElementPartOfFile)) {\r\n            bodyElement.appendChild(newTu.asXmlElement());\r\n            inserted = true;\r\n        } else if (importAfterElement === null) {\r\n            const firstUnitElement = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'trans-unit');\r\n            if (firstUnitElement) {\r\n                DOMUtilities.insertBefore(newTu.asXmlElement(), firstUnitElement);\r\n                inserted = true;\r\n            } else {\r\n                // no trans-unit, empty file, so add to body\r\n                bodyElement.appendChild(newTu.asXmlElement());\r\n                inserted = true;\r\n            }\r\n        } else {\r\n            const refUnitElement = DOMUtilities.getElementByTagNameAndId(this._parsedDocument, 'trans-unit', importAfterElement.id);\r\n            if (refUnitElement) {\r\n                DOMUtilities.insertAfter(newTu.asXmlElement(), refUnitElement);\r\n                inserted = true;\r\n            }\r\n        }\r\n        if (inserted) {\r\n            this.lazyInitializeTransUnits();\r\n            this.transUnits.push(newTu);\r\n            this.countNumbers();\r\n            return newTu;\r\n        } else {\r\n         return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new translation file for this file for a given language.\r\n     * Normally, this is just a copy of the original one.\r\n     * But for XMB the translation file has format 'XTB'.\r\n     * @param lang Language code\r\n     * @param filename expected filename to store file\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     */\r\n    public createTranslationFileForLang(lang: string, filename: string, isDefaultLang: boolean, copyContent: boolean)\r\n        : ITranslationMessagesFile {\r\n        const translationFile = new XliffFile(this.editedContent(), filename, this.encoding());\r\n        translationFile.setNewTransUnitTargetPraefix(this.targetPraefix);\r\n        translationFile.setNewTransUnitTargetSuffix(this.targetSuffix);\r\n        translationFile.setTargetLanguage(lang);\r\n        translationFile.forEachTransUnit((transUnit: ITransUnit) => {\r\n            (<AbstractTransUnit> transUnit).useSourceAsTarget(isDefaultLang, copyContent);\r\n        });\r\n        return translationFile;\r\n    }\r\n}\r\n","import {AbstractMessageParser} from './abstract-message-parser';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {ParsedMessagePartStartTag} from './parsed-message-part-start-tag';\r\nimport {ParsedMessagePartEndTag} from './parsed-message-part-end-tag';\r\nimport {ParsedMessagePartPlaceholder} from './parsed-message-part-placeholder';\r\nimport {TagMapping} from './tag-mapping';\r\nimport {ParsedMessagePartEmptyTag} from './parsed-message-part-empty-tag';\r\nimport {ParsedMessagePartICUMessageRef} from './parsed-message-part-icu-message-ref';\r\nimport {ParsedMessagePart, ParsedMessagePartType} from './parsed-message-part';\r\nimport {ParsedMessagePartText} from './parsed-message-part-text';\r\n/**\r\n * Created by roobm on 10.05.2017.\r\n * A message parser for XMB\r\n */\r\nexport class XmbMessageParser extends AbstractMessageParser {\r\n\r\n    /**\r\n     * Handle this element node.\r\n     * This is called before the children are done.\r\n     * @param elementNode elementNode\r\n     * @param message message to be altered\r\n     * @return true, if children should be processed too, false otherwise (children ignored then)\r\n     */\r\n    protected processStartElement(elementNode: Element, message: ParsedMessage): boolean {\r\n        const tagName = elementNode.tagName;\r\n        if (tagName === 'ph') {\r\n            // There are 4 different usages of ph element:\r\n            // 1. placeholders are like <ph name=\"INTERPOLATION\"><ex>INTERPOLATION</ex></ph>\r\n            // or <ph name=\"INTERPOLATION_1\"><ex>INTERPOLATION_1</ex></ph>\r\n            // 2. start tags:\r\n            // <ph name=\"START_LINK\"><ex>&lt;a&gt;</ex></ph>\r\n            // 3. empty tags:\r\n            // <ph name=\"TAG_IMG\"><ex>&lt;img&gt;</ex></ph>\r\n            // 4. ICU:\r\n            // <ph name=\"ICU\"><ex>ICU</ex></ph>\r\n            const name = elementNode.getAttribute('name');\r\n            if (!name) {\r\n                return true; // should not happen\r\n            }\r\n            if (name.startsWith('INTERPOLATION')) {\r\n                const index = this.parsePlaceholderIndexFromName(name);\r\n                message.addPlaceholder(index, null);\r\n                return false; // ignore children\r\n            } else if (name.startsWith('START_')) {\r\n                const tag = this.parseTagnameFromPhElement(elementNode);\r\n                const idcounter = this.parseIdCountFromName(name);\r\n                if (tag) {\r\n                    message.addStartTag(tag, idcounter);\r\n                }\r\n                return false; // ignore children\r\n            } else if (name.startsWith('CLOSE_')) {\r\n                const tag = this.parseTagnameFromPhElement(elementNode);\r\n                if (tag) {\r\n                    message.addEndTag(tag);\r\n                }\r\n                return false; // ignore children\r\n            } else if (new TagMapping().isEmptyTagPlaceholderName(name)) {\r\n                const emptyTagName = new TagMapping().getTagnameFromEmptyTagPlaceholderName(name);\r\n                const idcounter = this.parseIdCountFromName(name);\r\n                message.addEmptyTag(emptyTagName, idcounter);\r\n                return false; // ignore children\r\n            } else if (name.startsWith('ICU')) {\r\n                const index = this.parseICUMessageIndexFromName(name);\r\n                message.addICUMessageRef(index, null);\r\n                return false; // ignore children\r\n            }\r\n        } else if (tagName === 'source') {\r\n            // ignore source\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Return the ICU message content of the node, if it is an ICU Message.\r\n     * @param node node\r\n     * @return message or null, if it is no ICU Message.\r\n     */\r\n    protected getICUMessageText(node: Node): string {\r\n        const children = node.childNodes;\r\n        if (children.length === 0) {\r\n            return null;\r\n        }\r\n        let firstChild = null;\r\n        // find first child that is no source element.\r\n        let i;\r\n        for (i = 0; i < children.length; i++) {\r\n            const child = children.item(i);\r\n            if (child.nodeType !== child.ELEMENT_NODE || (<Element> child).tagName !== 'source') {\r\n                firstChild = child;\r\n                break;\r\n            }\r\n        }\r\n        if (firstChild && firstChild.nodeType === firstChild.TEXT_NODE) {\r\n            if (this.isICUMessageStart(firstChild.textContent)) {\r\n                const messageText = DOMUtilities.getXMLContent(<Element> node);\r\n                if (i > 0) {\r\n                    // drop <source> elements\r\n                    const reSource: RegExp = new RegExp('<source[^>]*>.*</source>', 'g');\r\n                    return messageText.replace(reSource, '');\r\n                } else {\r\n                    return messageText;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle end of this element node.\r\n     * This is called after all children are processed.\r\n     * @param elementNode elementNode\r\n     * @param message message to be altered\r\n     */\r\n    protected processEndElement(elementNode: Element, message: ParsedMessage) {\r\n    }\r\n\r\n    /**\r\n     * Parse id attribute of x element as placeholder index.\r\n     * id can be \"INTERPOLATION\" or \"INTERPOLATION_n\"\r\n     * @param name name\r\n     * @return id as number\r\n     */\r\n    private parsePlaceholderIndexFromName(name: string): number {\r\n        let indexString = '';\r\n\r\n        if (name === 'INTERPOLATION') {\r\n            indexString = '0';\r\n        } else {\r\n            indexString = name.substring('INTERPOLATION_'.length);\r\n        }\r\n        return Number.parseInt(indexString, 10);\r\n    }\r\n\r\n    /**\r\n     * Parse id attribute of x element as ICU message ref index.\r\n     * id can be \"ICU\" or \"ICU_n\"\r\n     * @param name name\r\n     * @return id as number\r\n     */\r\n    private parseICUMessageIndexFromName(name: string): number {\r\n        let indexString = '';\r\n\r\n        if (name === 'ICU') {\r\n            indexString = '0';\r\n        } else {\r\n            indexString = name.substring('ICU_'.length);\r\n        }\r\n        return Number.parseInt(indexString, 10);\r\n    }\r\n\r\n    /**\r\n     * Parse the tag name from a ph element.\r\n     * It contained in the <ex> subelements value and enclosed in <>.\r\n     * Example: <ph name=\"START_BOLD_TEXT\"><ex>&lt;b&gt;</ex></ph>\r\n     * @param phElement phElement\r\n     */\r\n    private parseTagnameFromPhElement(phElement: Element): string {\r\n        const exElement = DOMUtilities.getFirstElementByTagName(phElement, 'ex');\r\n        if (exElement) {\r\n            const value = DOMUtilities.getPCDATA(exElement);\r\n            if (!value || !value.startsWith('<') || !value.endsWith('>')) {\r\n                // oops\r\n                return null;\r\n            }\r\n            if (value.charAt(1) === '/') {\r\n                return value.substring(2, value.length - 1);\r\n            } else {\r\n                return value.substring(1, value.length - 1);\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    protected addXmlRepresentationToRoot(message: ParsedMessage, rootElem: Element) {\r\n        message.parts().forEach((part) => {\r\n            const child = this.createXmlRepresentationOfPart(part, rootElem);\r\n            if (child) {\r\n                rootElem.appendChild(child);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected createXmlRepresentationOfPart(part: ParsedMessagePart, rootElem: Element): Node {\r\n        switch (part.type) {\r\n            case ParsedMessagePartType.TEXT:\r\n                return this.createXmlRepresentationOfTextPart(<ParsedMessagePartText> part, rootElem);\r\n            case ParsedMessagePartType.START_TAG:\r\n                return this.createXmlRepresentationOfStartTagPart((<ParsedMessagePartStartTag>part), rootElem);\r\n            case ParsedMessagePartType.END_TAG:\r\n                return this.createXmlRepresentationOfEndTagPart((<ParsedMessagePartEndTag>part), rootElem);\r\n            case ParsedMessagePartType.EMPTY_TAG:\r\n                return this.createXmlRepresentationOfEmptyTagPart((<ParsedMessagePartEmptyTag>part), rootElem);\r\n            case ParsedMessagePartType.PLACEHOLDER:\r\n                return this.createXmlRepresentationOfPlaceholderPart((<ParsedMessagePartPlaceholder>part), rootElem);\r\n            case ParsedMessagePartType.ICU_MESSAGE_REF:\r\n                return this.createXmlRepresentationOfICUMessageRefPart((<ParsedMessagePartICUMessageRef>part), rootElem);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the xml used for start tag in the message.\r\n     * Returns an <ph>-Element with attribute name and subelement ex\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfStartTagPart(part: ParsedMessagePartStartTag, rootElem: Element): Node {\r\n        const phElem = rootElem.ownerDocument.createElement('ph');\r\n        const tagMapping = new TagMapping();\r\n        const nameAttrib = tagMapping.getStartTagPlaceholderName(part.tagName(), part.idCounter());\r\n        phElem.setAttribute('name', nameAttrib);\r\n        const exElem = rootElem.ownerDocument.createElement('ex');\r\n        exElem.appendChild(rootElem.ownerDocument.createTextNode('<' + part.tagName() + '>'));\r\n        phElem.appendChild(exElem);\r\n        return phElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for end tag in the message.\r\n     * Returns an <ph>-Element with attribute name and subelement ex\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfEndTagPart(part: ParsedMessagePartEndTag, rootElem: Element): Node {\r\n        const phElem = rootElem.ownerDocument.createElement('ph');\r\n        const tagMapping = new TagMapping();\r\n        const nameAttrib = tagMapping.getCloseTagPlaceholderName(part.tagName());\r\n        phElem.setAttribute('name', nameAttrib);\r\n        const exElem = rootElem.ownerDocument.createElement('ex');\r\n        exElem.appendChild(rootElem.ownerDocument.createTextNode('</' + part.tagName() + '>'));\r\n        phElem.appendChild(exElem);\r\n        return phElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for empty tag in the message.\r\n     * Returns an <ph>-Element with attribute name and subelement ex\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfEmptyTagPart(part: ParsedMessagePartEmptyTag, rootElem: Element): Node {\r\n        const phElem = rootElem.ownerDocument.createElement('ph');\r\n        const tagMapping = new TagMapping();\r\n        const nameAttrib = tagMapping.getEmptyTagPlaceholderName(part.tagName(), part.idCounter());\r\n        phElem.setAttribute('name', nameAttrib);\r\n        const exElem = rootElem.ownerDocument.createElement('ex');\r\n        exElem.appendChild(rootElem.ownerDocument.createTextNode('<' + part.tagName() + '>'));\r\n        phElem.appendChild(exElem);\r\n        return phElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for placeholder in the message.\r\n     * Returns an <ph>-Element with attribute name and subelement ex\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfPlaceholderPart(part: ParsedMessagePartPlaceholder, rootElem: Element): Node {\r\n        const phElem = rootElem.ownerDocument.createElement('ph');\r\n        let nameAttrib = 'INTERPOLATION';\r\n        if (part.index() > 0) {\r\n            nameAttrib = 'INTERPOLATION_' + part.index().toString(10);\r\n        }\r\n        phElem.setAttribute('name', nameAttrib);\r\n        const exElem = rootElem.ownerDocument.createElement('ex');\r\n        exElem.appendChild(rootElem.ownerDocument.createTextNode(nameAttrib));\r\n        phElem.appendChild(exElem);\r\n        return phElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for icu message refs in the message.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfICUMessageRefPart(part: ParsedMessagePartICUMessageRef, rootElem: Element): Node {\r\n        const phElem = rootElem.ownerDocument.createElement('ph');\r\n        let nameAttrib = 'ICU';\r\n        if (part.index() > 0) {\r\n            nameAttrib = 'ICU_' + part.index().toString(10);\r\n        }\r\n        phElem.setAttribute('name', nameAttrib);\r\n        const exElem = rootElem.ownerDocument.createElement('ex');\r\n        exElem.appendChild(rootElem.ownerDocument.createTextNode(nameAttrib));\r\n        phElem.appendChild(exElem);\r\n        return phElem;\r\n    }\r\n}\r\n","import {ITranslationMessagesFile} from '../api/i-translation-messages-file';\r\nimport {INormalizedMessage} from '../api/i-normalized-message';\r\nimport {ITransUnit} from '../api/i-trans-unit';\r\nimport {INote} from '../api/i-note';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {AbstractTransUnit} from './abstract-trans-unit';\r\nimport {XmbMessageParser} from './xmb-message-parser';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {AbstractMessageParser} from './abstract-message-parser';\r\n/**\r\n * Created by martin on 01.05.2017.\r\n * A Translation Unit in an XMB file.\r\n */\r\n\r\nexport class XmbTransUnit extends AbstractTransUnit implements ITransUnit {\r\n\r\n    constructor(_element: Element, _id: string, _translationMessagesFile: ITranslationMessagesFile) {\r\n        super(_element, _id, _translationMessagesFile);\r\n    }\r\n\r\n    /**\r\n     * Parses something like 'c:\\xxx:7' and returns source and linenumber.\r\n     * @param sourceAndPos something like 'c:\\xxx:7', last colon is the separator\r\n     * @return source and linenumber\r\n     */\r\n    private static parseSourceAndPos(sourceAndPos: string): { sourcefile: string, linenumber } {\r\n        const index = sourceAndPos.lastIndexOf(':');\r\n        if (index < 0) {\r\n            return {\r\n                sourcefile: sourceAndPos,\r\n                linenumber: 0\r\n            };\r\n        } else {\r\n            return {\r\n                sourcefile: sourceAndPos.substring(0, index),\r\n                linenumber: XmbTransUnit.parseLineNumber(sourceAndPos.substring(index + 1))\r\n            };\r\n        }\r\n    }\r\n\r\n    private static parseLineNumber(lineNumberString: string): number {\r\n        return Number.parseInt(lineNumberString, 10);\r\n    }\r\n\r\n    /**\r\n     * Get content to translate.\r\n     * Source parts are excluded here.\r\n     * @return source content\r\n     */\r\n    public sourceContent(): string {\r\n        let msgContent = DOMUtilities.getXMLContent(this._element);\r\n        const reSourceElem: RegExp = /<source>.*<\\/source>/g;\r\n        msgContent = msgContent.replace(reSourceElem, '');\r\n        return msgContent;\r\n    }\r\n\r\n    /**\r\n     * Test, wether setting of source content is supported.\r\n     * If not, setSourceContent in trans-unit will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    supportsSetSourceContent(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set new source content in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing changed source content.\r\n     * @param newContent the new content.\r\n     */\r\n    public setSourceContent(newContent: string) {\r\n        // not supported\r\n    }\r\n\r\n    /**\r\n     * Return a parser used for normalized messages.\r\n     */\r\n    protected messageParser(): AbstractMessageParser {\r\n        return new XmbMessageParser();\r\n    }\r\n\r\n    /**\r\n     * The original text value, that is to be translated, as normalized message.\r\n     */\r\n    public createSourceContentNormalized(): ParsedMessage {\r\n        return this.messageParser().createNormalizedMessageFromXML(this._element, null);\r\n    }\r\n\r\n    /**\r\n     * the translated value (containing all markup, depends on the concrete format used).\r\n     */\r\n    public targetContent(): string {\r\n        // in fact, target and source are just the same in xmb\r\n        return this.sourceContent();\r\n    }\r\n\r\n    /**\r\n     * the translated value, but all placeholders are replaced with {{n}} (starting at 0)\r\n     * and all embedded html is replaced by direct html markup.\r\n     */\r\n    targetContentNormalized(): INormalizedMessage {\r\n        return new XmbMessageParser().createNormalizedMessageFromXML(this._element, this.sourceContentNormalized());\r\n    }\r\n\r\n    /**\r\n     * State of the translation.\r\n     * (not supported in xmb)\r\n     */\r\n    public nativeTargetState(): string {\r\n        return null; // not supported in xmb\r\n    }\r\n\r\n    /**\r\n     * Map an abstract state (new, translated, final) to a concrete state used in the xml.\r\n     * Returns the state to be used in the xml.\r\n     * @param state one of Constants.STATE...\r\n     * @returns a native state (depends on concrete format)\r\n     * @throws error, if state is invalid.\r\n     */\r\n    protected mapStateToNativeState(state: string): string {\r\n        return state;\r\n    }\r\n\r\n    /**\r\n     * Map a native state (found in the document) to an abstract state (new, translated, final).\r\n     * Returns the abstract state.\r\n     * @param nativeState nativeState\r\n     */\r\n    protected mapNativeStateToState(nativeState: string): string {\r\n        return nativeState;\r\n    }\r\n\r\n    /**\r\n     * set state in xml.\r\n     * (not supported in xmb)\r\n     * @param nativeState nativeState\r\n     */\r\n    protected setNativeTargetState(nativeState: string) {\r\n        // not supported for xmb\r\n    }\r\n\r\n    /**\r\n     * All the source elements in the trans unit.\r\n     * The source element is a reference to the original template.\r\n     * It contains the name of the template file and a line number with the position inside the template.\r\n     * It is just a help for translators to find the context for the translation.\r\n     * This is set when using Angular 4.0 or greater.\r\n     * Otherwise it just returns an empty array.\r\n     */\r\n    public sourceReferences(): { sourcefile: string, linenumber: number }[] {\r\n        const sourceElements = this._element.getElementsByTagName('source');\r\n        const sourceRefs: { sourcefile: string, linenumber: number }[] = [];\r\n        for (let i = 0; i < sourceElements.length; i++) {\r\n            const elem = sourceElements.item(i);\r\n            const sourceAndPos: string = DOMUtilities.getPCDATA(elem);\r\n            sourceRefs.push(XmbTransUnit.parseSourceAndPos(sourceAndPos));\r\n        }\r\n        return sourceRefs;\r\n    }\r\n\r\n    /**\r\n     * Set source ref elements in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing source refs.\r\n     * @param sourceRefs the sourcerefs to set. Old ones are removed.\r\n     */\r\n    public setSourceReferences(sourceRefs: {sourcefile: string, linenumber: number}[]) {\r\n        this.removeAllSourceReferences();\r\n        let insertPosition = this._element.childNodes.item(0);\r\n        for (let i = sourceRefs.length - 1; i >= 0; i--) {\r\n            const ref = sourceRefs[i];\r\n            const source = this._element.ownerDocument.createElement('source');\r\n            source.appendChild(this._element.ownerDocument.createTextNode(ref.sourcefile + ':' + ref.linenumber.toString(10)));\r\n            this._element.insertBefore(source, insertPosition);\r\n            insertPosition = source;\r\n        }\r\n    }\r\n\r\n    private removeAllSourceReferences() {\r\n        const sourceElements = this._element.getElementsByTagName('source');\r\n        const toBeRemoved = [];\r\n        for (let i = 0; i < sourceElements.length; i++) {\r\n            const elem = sourceElements.item(i);\r\n            toBeRemoved.push(elem);\r\n        }\r\n        toBeRemoved.forEach((elem) => {elem.parentNode.removeChild(elem); });\r\n    }\r\n\r\n    /**\r\n     * The description set in the template as value of the i18n-attribute.\r\n     * e.g. i18n=\"mydescription\".\r\n     * In xmb this is stored in the attribute \"desc\".\r\n     */\r\n    public description(): string {\r\n        return this._element.getAttribute('desc');\r\n    }\r\n\r\n    /**\r\n     * The meaning (intent) set in the template as value of the i18n-attribute.\r\n     * This is the part in front of the | symbol.\r\n     * e.g. i18n=\"meaning|mydescription\".\r\n     * In xmb this is stored in the attribute \"meaning\".\r\n     */\r\n    public meaning(): string {\r\n        return this._element.getAttribute('meaning');\r\n    }\r\n\r\n    /**\r\n     * Test, wether setting of description and meaning is supported.\r\n     * If not, setDescription and setMeaning will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    public supportsSetDescriptionAndMeaning(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Change description property of trans-unit.\r\n     * @param description description\r\n     */\r\n    public setDescription(description: string) {\r\n        // not supported, do nothing\r\n    }\r\n\r\n    /**\r\n     * Change meaning property of trans-unit.\r\n     * @param meaning meaning\r\n     */\r\n    public setMeaning(meaning: string) {\r\n        // not supported, do nothing\r\n    }\r\n\r\n    /**\r\n     * Get all notes of the trans-unit.\r\n     * There are NO notes in xmb/xtb\r\n     */\r\n    public notes(): INote[] {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Test, wether setting of notes is supported.\r\n     * If not, setNotes will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    public supportsSetNotes(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Add notes to trans unit.\r\n     * @param newNotes the notes to add.\r\n     * NOT Supported in xmb/xtb\r\n     */\r\n    public setNotes(newNotes: INote[]) {\r\n        // not supported, do nothing\r\n    }\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * Returns a changed copy of this trans unit.\r\n     * receiver is not changed.\r\n     * (internal usage only, a client should call importNewTransUnit on ITranslationMessageFile)\r\n     * In xmb there is nothing to do, because there is only a target, no source.\r\n     */\r\n    public cloneWithSourceAsTarget(isDefaultLang: boolean, copyContent: boolean, targetFile: ITranslationMessagesFile): AbstractTransUnit {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * (internal usage only, a client should call createTranslationFileForLang on ITranslationMessageFile)\r\n     */\r\n    public useSourceAsTarget(isDefaultLang: boolean, copyContent: boolean) {\r\n        // do nothing\r\n    }\r\n\r\n    /**\r\n     * Set the translation to a given string (including markup).\r\n     * In fact, xmb cannot be translated.\r\n     * So this throws an error.\r\n     * @param translation translation\r\n     */\r\n    protected translateNative(translation: string) {\r\n        throw new Error('You cannot translate xmb files, use xtb instead.');\r\n    }\r\n\r\n}\r\n","import {ITranslationMessagesFileFactory} from '../api/i-translation-messages-file-factory';\r\nimport {ITranslationMessagesFile} from '../api/i-translation-messages-file';\r\nimport {ITransUnit} from '../api/i-trans-unit';\r\nimport {FORMAT_XMB, FILETYPE_XMB, FORMAT_XTB} from '../api/constants';\r\nimport {format} from 'util';\r\nimport {XmbTransUnit} from './xmb-trans-unit';\r\nimport {AbstractTranslationMessagesFile} from './abstract-translation-messages-file';\r\n\r\n/**\r\n * Created by martin on 10.03.2017.\r\n * xmb-File access.\r\n */\r\n\r\n/**\r\n * Doctype of xtb translation file corresponding with thos xmb file.\r\n */\r\nexport const XTB_DOCTYPE = `<!DOCTYPE translationbundle [\r\n  <!ELEMENT translationbundle (translation)*>\r\n  <!ATTLIST translationbundle lang CDATA #REQUIRED>\r\n  <!ELEMENT translation (#PCDATA|ph)*>\r\n  <!ATTLIST translation id CDATA #REQUIRED>\r\n  <!ELEMENT ph EMPTY>\r\n  <!ATTLIST ph name CDATA #REQUIRED>\r\n]>`;\r\n\r\nexport class XmbFile extends AbstractTranslationMessagesFile implements ITranslationMessagesFile {\r\n\r\n    /**\r\n     * Create an xmb-File from source.\r\n     * @param _translationMessageFileFactory factory to create a translation file (xtb) for the xmb file\r\n     * @param xmlString file content\r\n     * @param path Path to file\r\n     * @param encoding optional encoding of the xml.\r\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\r\n     * @return XmbFile\r\n     */\r\n    constructor(\r\n        private _translationMessageFileFactory: ITranslationMessagesFileFactory,\r\n        xmlString: string, path: string, encoding: string) {\r\n\r\n        super();\r\n        this._warnings = [];\r\n        this._numberOfTransUnitsWithMissingId = 0;\r\n        this.initializeFromContent(xmlString, path, encoding);\r\n    }\r\n\r\n    private initializeFromContent(xmlString: string, path: string, encoding: string): XmbFile {\r\n        this.parseContent(xmlString, path, encoding);\r\n        if (this._parsedDocument.getElementsByTagName('messagebundle').length !== 1) {\r\n            throw new Error(format('File \"%s\" seems to be no xmb file (should contain a messagebundle element)', path));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected initializeTransUnits() {\r\n        this.transUnits = [];\r\n        const transUnitsInFile = this._parsedDocument.getElementsByTagName('msg');\r\n        for (let i = 0; i < transUnitsInFile.length; i++) {\r\n            const msg = transUnitsInFile.item(i);\r\n            const id = msg.getAttribute('id');\r\n            if (!id) {\r\n                this._warnings.push(format('oops, msg without \"id\" found in master, please check file %s', this._filename));\r\n            }\r\n            this.transUnits.push(new XmbTransUnit(msg, id, this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * File format as it is used in config files.\r\n     * Currently 'xlf', 'xmb', 'xmb2'\r\n     * Returns one of the constants FORMAT_..\r\n     */\r\n    public i18nFormat(): string {\r\n        return FORMAT_XMB;\r\n    }\r\n\r\n    /**\r\n     * File type.\r\n     * Here 'XMB'\r\n     */\r\n    public fileType(): string {\r\n        return FILETYPE_XMB;\r\n    }\r\n\r\n    /**\r\n     * return tag names of all elements that have mixed content.\r\n     * These elements will not be beautified.\r\n     * Typical candidates are source and target.\r\n     */\r\n    protected elementsWithMixedContent(): string[] {\r\n        return ['message'];\r\n    }\r\n\r\n    /**\r\n     * Guess language from filename.\r\n     * If filename is foo.xy.xmb, than language is assumed to be xy.\r\n     * @return Language or null\r\n     */\r\n    private guessLanguageFromFilename(): string {\r\n        if (this._filename) {\r\n            const parts: string[] = this._filename.split('.');\r\n            if (parts.length > 2 && parts[parts.length - 1].toLowerCase() === 'xmb') {\r\n                return parts[parts.length - 2];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get source language.\r\n     * Unsupported in xmb.\r\n     * Try to guess it from filename if any..\r\n     * @return source language.\r\n     */\r\n    public sourceLanguage(): string {\r\n        return this.guessLanguageFromFilename();\r\n    }\r\n\r\n    /**\r\n     * Edit the source language.\r\n     * Unsupported in xmb.\r\n     * @param language language\r\n     */\r\n    public setSourceLanguage(language: string) {\r\n        // do nothing, xmb has no notation for this.\r\n    }\r\n\r\n    /**\r\n     * Get target language.\r\n     * Unsupported in xmb.\r\n     * Try to guess it from filename if any..\r\n     * @return target language.\r\n     */\r\n    public targetLanguage(): string {\r\n        return this.guessLanguageFromFilename();\r\n    }\r\n\r\n    /**\r\n     * Edit the target language.\r\n     * Unsupported in xmb.\r\n     * @param language language\r\n     */\r\n    public setTargetLanguage(language: string) {\r\n        // do nothing, xmb has no notation for this.\r\n    }\r\n\r\n    /**\r\n     * Add a new trans-unit to this file.\r\n     * The trans unit stems from another file.\r\n     * It copies the source content of the tu to the target content too,\r\n     * depending on the values of isDefaultLang and copyContent.\r\n     * So the source can be used as a dummy translation.\r\n     * (used by xliffmerge)\r\n     * @param foreignTransUnit the trans unit to be imported.\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     * @param importAfterElement optional (since 1.10) other transunit (part of this file), that should be used as ancestor.\r\n     * Newly imported trans unit is then inserted directly after this element.\r\n     * If not set or not part of this file, new unit will be imported at the end.\r\n     * If explicity set to null, new unit will be imported at the start.\r\n     * @return the newly imported trans unit (since version 1.7.0)\r\n     * @throws an error if trans-unit with same id already is in the file.\r\n     */\r\n    importNewTransUnit(foreignTransUnit: ITransUnit, isDefaultLang: boolean, copyContent: boolean, importAfterElement?: ITransUnit)\r\n        : ITransUnit {\r\n        throw Error('xmb file cannot be used to store translations, use xtb file');\r\n    }\r\n\r\n    /**\r\n     * Create a new translation file for this file for a given language.\r\n     * Normally, this is just a copy of the original one.\r\n     * But for XMB the translation file has format 'XTB'.\r\n     * @param lang Language code\r\n     * @param filename expected filename to store file\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     */\r\n    public createTranslationFileForLang(lang: string, filename: string, isDefaultLang: boolean, copyContent: boolean)\r\n        : ITranslationMessagesFile {\r\n        const translationbundleXMLSource =\r\n            '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n' + XTB_DOCTYPE + '\\n<translationbundle>\\n</translationbundle>\\n';\r\n        const translationFile = this._translationMessageFileFactory.createFileFromFileContent(\r\n            FORMAT_XTB,\r\n            translationbundleXMLSource, filename, this.encoding(),\r\n            {xmlContent: this.editedContent(), path: this.filename(), encoding: this.encoding()});\r\n        translationFile.setNewTransUnitTargetPraefix(this.targetPraefix);\r\n        translationFile.setNewTransUnitTargetSuffix(this.targetSuffix);\r\n        translationFile.setTargetLanguage(lang);\r\n        translationFile.setNewTransUnitTargetPraefix(this.getNewTransUnitTargetPraefix());\r\n        translationFile.setNewTransUnitTargetSuffix(this.getNewTransUnitTargetSuffix());\r\n        this.forEachTransUnit((tu) => {\r\n            translationFile.importNewTransUnit(tu, isDefaultLang, copyContent);\r\n        });\r\n        return translationFile;\r\n    }\r\n\r\n}\r\n","import {AbstractMessageParser} from './abstract-message-parser';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {ParsedMessagePartStartTag} from './parsed-message-part-start-tag';\r\nimport {ParsedMessagePartEndTag} from './parsed-message-part-end-tag';\r\nimport {ParsedMessagePartPlaceholder} from './parsed-message-part-placeholder';\r\nimport {ParsedMessagePartText} from './parsed-message-part-text';\r\nimport {ParsedMessagePartType} from './parsed-message-part';\r\nimport {TagMapping} from './tag-mapping';\r\nimport {ParsedMessagePartEmptyTag} from './parsed-message-part-empty-tag';\r\nimport {ParsedMessagePartICUMessageRef} from './parsed-message-part-icu-message-ref';\r\n/**\r\n * Created by roobm on 10.05.2017.\r\n * A message parser for XLIFF 2.0\r\n */\r\nexport class Xliff2MessageParser extends AbstractMessageParser {\r\n\r\n    /**\r\n     * Handle this element node.\r\n     * This is called before the children are done.\r\n     * @param elementNode elementNode\r\n     * @param message message to be altered\r\n     * @return true, if children should be processed too, false otherwise (children ignored then)\r\n     */\r\n    protected processStartElement(elementNode: Element, message: ParsedMessage): boolean {\r\n        const tagName = elementNode.tagName;\r\n        if (tagName === 'ph') {\r\n            // placeholder are like <ph id=\"0\" equiv=\"INTERPOLATION\" disp=\"{{number()}}\"/>\r\n            // They contain the id and also a name (number in the example)\r\n            // TODO make some use of the name (but it is not available in XLIFF 1.2)\r\n            // ICU message are handled with the same tag\r\n            // Before 4.3.2 they did not have an equiv and disp (Bug #17344):\r\n            // e.g. <ph id=\"0\"/>\r\n            // Beginning with 4.3.2 they do have an equiv ICU and disp:\r\n            // e.g. <ph id=\"0\" equiv=\"ICU\" disp=\"{count, plural, =0 {...} =1 {...} other {...}}\"/>\r\n            // and empty tags have equiv other then INTERPOLATION:\r\n            // e.g. <ph id=\"3\" equiv=\"TAG_IMG\" type=\"image\" disp=\"&lt;img/>\"/>\r\n            // or <ph equiv=\"LINE_BREAK\" type=\"lb\" disp=\"&lt;br/>\"/>\r\n            let isInterpolation = false;\r\n            let isICU = false;\r\n            let isEmptyTag = false;\r\n            const equiv = elementNode.getAttribute('equiv');\r\n            const disp = elementNode.getAttribute('disp');\r\n            let indexString = null;\r\n            let index = 0;\r\n            let emptyTagName = null;\r\n            if (!equiv) {\r\n                // old ICU syntax, fixed with #17344\r\n                isICU = true;\r\n                indexString = elementNode.getAttribute('id');\r\n                index = Number.parseInt(indexString, 10);\r\n            } else if (equiv.startsWith('ICU')) {\r\n                // new ICU syntax, fixed with #17344\r\n                isICU = true;\r\n                if (equiv === 'ICU') {\r\n                    indexString = '0';\r\n                } else {\r\n                    indexString = equiv.substring('ICU_'.length);\r\n                }\r\n                index = Number.parseInt(indexString, 10);\r\n            } else if (equiv.startsWith('INTERPOLATION')) {\r\n                isInterpolation = true;\r\n                if (equiv === 'INTERPOLATION') {\r\n                    indexString = '0';\r\n                } else {\r\n                    indexString = equiv.substring('INTERPOLATION_'.length);\r\n                }\r\n                index = Number.parseInt(indexString, 10);\r\n            } else if (new TagMapping().isEmptyTagPlaceholderName(equiv)) {\r\n                isEmptyTag = true;\r\n                emptyTagName = new TagMapping().getTagnameFromEmptyTagPlaceholderName(equiv);\r\n            } else {\r\n                return true;\r\n            }\r\n            if (isInterpolation) {\r\n                message.addPlaceholder(index, disp);\r\n            } else if (isICU) {\r\n                message.addICUMessageRef(index, disp);\r\n            } else if (isEmptyTag) {\r\n                message.addEmptyTag(emptyTagName, this.parseIdCountFromName(equiv));\r\n            }\r\n        } else if (tagName === 'pc') {\r\n            // pc example: <pc id=\"0\" equivStart=\"START_BOLD_TEXT\" equivEnd=\"CLOSE_BOLD_TEXT\" type=\"fmt\"\r\n            // dispStart=\"&lt;b&gt;\" dispEnd=\"&lt;/b&gt;\">IMPORTANT</pc>\r\n            const embeddedTagName = this.tagNameFromPCElement(elementNode);\r\n            if (embeddedTagName) {\r\n                message.addStartTag(embeddedTagName, this.parseIdCountFromName(elementNode.getAttribute('equivStart')));\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Handle end of this element node.\r\n     * This is called after all children are processed.\r\n     * @param elementNode elementNode\r\n     * @param message message to be altered\r\n     */\r\n    protected processEndElement(elementNode: Element, message: ParsedMessage) {\r\n        const tagName = elementNode.tagName;\r\n        if (tagName === 'pc') {\r\n            // pc example: <pc id=\"0\" equivStart=\"START_BOLD_TEXT\" equivEnd=\"CLOSE_BOLD_TEXT\" type=\"fmt\"\r\n            // dispStart=\"&lt;b&gt;\" dispEnd=\"&lt;/b&gt;\">IMPORTANT</pc>\r\n            const embeddedTagName = this.tagNameFromPCElement(elementNode);\r\n            if (embeddedTagName) {\r\n                message.addEndTag(embeddedTagName);\r\n            }\r\n            return;\r\n        }\r\n    }\r\n\r\n    private tagNameFromPCElement(pcNode: Element): string {\r\n        let dispStart = pcNode.getAttribute('dispStart');\r\n        if (dispStart.startsWith('<')) {\r\n            dispStart = dispStart.substring(1);\r\n        }\r\n        if (dispStart.endsWith('>')) {\r\n            dispStart = dispStart.substring(0, dispStart.length - 1);\r\n        }\r\n        return dispStart;\r\n    }\r\n\r\n    /**\r\n     * reimplemented here, because XLIFF 2.0 uses a deeper xml model.\r\n     * So we cannot simply replace the message parts by xml parts.\r\n     * @param message message\r\n     * @param rootElem rootElem\r\n     */\r\n    protected addXmlRepresentationToRoot(message: ParsedMessage, rootElem: Element) {\r\n        const stack = [{element: rootElem, tagName: 'root'}];\r\n        let id = 0;\r\n        message.parts().forEach((part) => {\r\n            switch (part.type) {\r\n                case ParsedMessagePartType.TEXT:\r\n                    stack[stack.length - 1].element.appendChild(\r\n                        this.createXmlRepresentationOfTextPart(<ParsedMessagePartText> part, rootElem));\r\n                    break;\r\n                case ParsedMessagePartType.PLACEHOLDER:\r\n                    stack[stack.length - 1].element.appendChild(\r\n                        this.createXmlRepresentationOfPlaceholderPart(<ParsedMessagePartPlaceholder> part, rootElem, id++));\r\n                    break;\r\n                case ParsedMessagePartType.ICU_MESSAGE_REF:\r\n                    stack[stack.length - 1].element.appendChild(\r\n                        this.createXmlRepresentationOfICUMessageRefPart(<ParsedMessagePartICUMessageRef> part, rootElem));\r\n                    break;\r\n                case ParsedMessagePartType.START_TAG:\r\n                    const newTagElem = this.createXmlRepresentationOfStartTagPart(<ParsedMessagePartStartTag> part, rootElem, id++);\r\n                    stack[stack.length - 1].element.appendChild(newTagElem);\r\n                    stack.push({element: <Element> newTagElem, tagName: (<ParsedMessagePartStartTag> part).tagName()});\r\n                    break;\r\n                case ParsedMessagePartType.END_TAG:\r\n                    const closeTagName = (<ParsedMessagePartEndTag> part).tagName();\r\n                    if (stack.length <= 1 || stack[stack.length - 1].tagName !== closeTagName) {\r\n                        // oops, not well formed\r\n                        throw new Error('unexpected close tag ' + closeTagName);\r\n                    }\r\n                    stack.pop();\r\n                    break;\r\n                case ParsedMessagePartType.EMPTY_TAG:\r\n                    const emptyTagElem = this.createXmlRepresentationOfEmptyTagPart(<ParsedMessagePartEmptyTag> part, rootElem, id++);\r\n                    stack[stack.length - 1].element.appendChild(emptyTagElem);\r\n                    break;\r\n            }\r\n        });\r\n        if (stack.length !== 1) {\r\n            // oops, not well closed tags\r\n            throw new Error('missing close tag ' + stack[stack.length - 1].tagName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the xml used for start tag in the message.\r\n     * Returns an empty pc-Element.\r\n     * e.g. <pc id=\"0\" equivStart=\"START_BOLD_TEXT\" equivEnd=\"CLOSE_BOLD_TEXT\" type=\"fmt\" dispStart=\"&lt;b&gt;\" dispEnd=\"&lt;/b&gt;\">\r\n     * Text content will be added later.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     * @param id id number in xliff2\r\n     */\r\n    protected createXmlRepresentationOfStartTagPart(part: ParsedMessagePartStartTag, rootElem: Element, id: number): Node {\r\n        const tagMapping = new TagMapping();\r\n        const pcElem = rootElem.ownerDocument.createElement('pc');\r\n        const tagName = part.tagName();\r\n        const equivStart = tagMapping.getStartTagPlaceholderName(tagName, part.idCounter());\r\n        const equivEnd = tagMapping.getCloseTagPlaceholderName(tagName);\r\n        const dispStart = '<' + tagName + '>';\r\n        const dispEnd = '</' + tagName + '>';\r\n        pcElem.setAttribute('id', id.toString(10));\r\n        pcElem.setAttribute('equivStart', equivStart);\r\n        pcElem.setAttribute('equivEnd', equivEnd);\r\n        pcElem.setAttribute('type', this.getTypeForTag(tagName));\r\n        pcElem.setAttribute('dispStart', dispStart);\r\n        pcElem.setAttribute('dispEnd', dispEnd);\r\n        return pcElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for end tag in the message.\r\n     * Not used here, because content is child of start tag.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfEndTagPart(part: ParsedMessagePartEndTag, rootElem: Element): Node {\r\n        // not used\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * the xml used for empty tag in the message.\r\n     * Returns an empty ph-Element.\r\n     * e.g. <ph id=\"3\" equiv=\"TAG_IMG\" type=\"image\" disp=\"&lt;img/>\"/>\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     * @param id id number in xliff2\r\n     */\r\n    protected createXmlRepresentationOfEmptyTagPart(part: ParsedMessagePartEmptyTag, rootElem: Element, id: number): Node {\r\n        const tagMapping = new TagMapping();\r\n        const phElem = rootElem.ownerDocument.createElement('ph');\r\n        const tagName = part.tagName();\r\n        const equiv = tagMapping.getEmptyTagPlaceholderName(tagName, part.idCounter());\r\n        const disp = '<' + tagName + '/>';\r\n        phElem.setAttribute('id', id.toString(10));\r\n        phElem.setAttribute('equiv', equiv);\r\n        phElem.setAttribute('type', this.getTypeForTag(tagName));\r\n        phElem.setAttribute('disp', disp);\r\n        return phElem;\r\n    }\r\n\r\n    private getTypeForTag(tag: string): string {\r\n        switch (tag.toLowerCase()) {\r\n            case 'br':\r\n            case 'b':\r\n            case 'i':\r\n            case 'u':\r\n                return 'fmt';\r\n            case 'img':\r\n                return 'image';\r\n            case 'a':\r\n                return 'link';\r\n            default:\r\n                return 'other';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the xml used for placeholder in the message.\r\n     * Returns e.g. <ph id=\"1\" equiv=\"INTERPOLATION_1\" disp=\"{{total()}}\"/>\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     * @param id id number in xliff2\r\n     */\r\n    protected createXmlRepresentationOfPlaceholderPart(part: ParsedMessagePartPlaceholder, rootElem: Element, id: number): Node {\r\n        const phElem = rootElem.ownerDocument.createElement('ph');\r\n        let equivAttrib = 'INTERPOLATION';\r\n        if (part.index() > 0) {\r\n            equivAttrib = 'INTERPOLATION_' + part.index().toString(10);\r\n        }\r\n        phElem.setAttribute('id', id.toString(10));\r\n        phElem.setAttribute('equiv', equivAttrib);\r\n        const disp = part.disp();\r\n        if (disp) {\r\n            phElem.setAttribute('disp', disp);\r\n        }\r\n        return phElem;\r\n    }\r\n\r\n    /**\r\n     * the xml used for icu message refs in the message.\r\n     * @param part part\r\n     * @param rootElem rootElem\r\n     */\r\n    protected createXmlRepresentationOfICUMessageRefPart(part: ParsedMessagePartICUMessageRef, rootElem: Element): Node {\r\n        const phElem = rootElem.ownerDocument.createElement('ph');\r\n        let equivAttrib = 'ICU';\r\n        if (part.index() > 0) {\r\n            equivAttrib = 'ICU_' + part.index().toString(10);\r\n        }\r\n        phElem.setAttribute('id', part.index().toString(10));\r\n        phElem.setAttribute('equiv', equivAttrib);\r\n        const disp = part.disp();\r\n        if (disp) {\r\n            phElem.setAttribute('disp', disp);\r\n        }\r\n        return phElem;\r\n    }\r\n\r\n}\r\n","import {STATE_NEW, STATE_TRANSLATED, STATE_FINAL} from '../api/constants';\r\nimport {ITranslationMessagesFile} from '../api/i-translation-messages-file';\r\nimport {INormalizedMessage} from '../api/i-normalized-message';\r\nimport {ITransUnit} from '../api/i-trans-unit';\r\nimport {INote} from '../api/i-note';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {AbstractTransUnit} from './abstract-trans-unit';\r\nimport {Xliff2MessageParser} from './xliff2-message-parser';\r\nimport {AbstractMessageParser} from './abstract-message-parser';\r\nimport {isNullOrUndefined} from 'util';\r\n/**\r\n * Created by martin on 04.05.2017.\r\n * A Translation Unit in an XLIFF 2.0 file.\r\n */\r\n\r\nexport class Xliff2TransUnit extends AbstractTransUnit  implements ITransUnit {\r\n\r\n    constructor(_element: Element, _id: string, _translationMessagesFile: ITranslationMessagesFile) {\r\n        super(_element, _id, _translationMessagesFile);\r\n    }\r\n\r\n    public sourceContent(): string {\r\n        const sourceElement = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n        return DOMUtilities.getXMLContent(sourceElement);\r\n    }\r\n\r\n    /**\r\n     * Set new source content in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing changed source content.\r\n     * @param newContent the new content.\r\n     */\r\n    public setSourceContent(newContent: string) {\r\n        let source = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n        if (!source) {\r\n            // should not happen, there always has to be a source, but who knows..\r\n            const segment = DOMUtilities.getFirstElementByTagName(this._element, 'segment');\r\n            source = segment.parentNode.appendChild(this._element.ownerDocument.createElement('source'));\r\n        }\r\n        DOMUtilities.replaceContentWithXMLContent(source, newContent);\r\n    }\r\n\r\n    /**\r\n     * Return a parser used for normalized messages.\r\n     */\r\n    protected messageParser(): AbstractMessageParser {\r\n        return new Xliff2MessageParser();\r\n    }\r\n\r\n    /**\r\n     * The original text value, that is to be translated, as normalized message.\r\n     */\r\n    public createSourceContentNormalized(): ParsedMessage {\r\n        const sourceElement = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n        if (sourceElement) {\r\n            return this.messageParser().createNormalizedMessageFromXML(sourceElement, null);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the translated value (containing all markup, depends on the concrete format used).\r\n     */\r\n    public targetContent(): string {\r\n        const targetElement = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        return DOMUtilities.getXMLContent(targetElement);\r\n    }\r\n\r\n    /**\r\n     * the translated value, but all placeholders are replaced with {{n}} (starting at 0)\r\n     * and all embedded html is replaced by direct html markup.\r\n     */\r\n    targetContentNormalized(): INormalizedMessage {\r\n        const targetElement = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        return new Xliff2MessageParser().createNormalizedMessageFromXML(targetElement, this.sourceContentNormalized());\r\n    }\r\n\r\n    /**\r\n     * State of the translation as stored in the xml.\r\n     */\r\n    public nativeTargetState(): string {\r\n        const segmentElement = DOMUtilities.getFirstElementByTagName(this._element, 'segment');\r\n        if (segmentElement) {\r\n            return segmentElement.getAttribute('state');\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * set state in xml.\r\n     * @param nativeState nativeState\r\n     */\r\n    protected setNativeTargetState(nativeState: string) {\r\n        const segmentElement = DOMUtilities.getFirstElementByTagName(this._element, 'segment');\r\n        if (segmentElement) {\r\n            segmentElement.setAttribute('state', nativeState);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Map an abstract state (new, translated, final) to a concrete state used in the xml.\r\n     * Returns the state to be used in the xml.\r\n     * @param state one of Constants.STATE...\r\n     * @returns a native state (depends on concrete format)\r\n     * @throws error, if state is invalid.\r\n     */\r\n    protected mapStateToNativeState(state: string): string {\r\n        switch ( state) {\r\n            case STATE_NEW:\r\n                return 'initial';\r\n            case STATE_TRANSLATED:\r\n                return 'translated';\r\n            case STATE_FINAL:\r\n                return 'final';\r\n            default:\r\n                throw new Error('unknown state ' +  state);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Map a native state (found in the document) to an abstract state (new, translated, final).\r\n     * Returns the abstract state.\r\n     * @param nativeState nativeState\r\n     */\r\n    protected mapNativeStateToState(nativeState: string): string {\r\n        switch ( nativeState) {\r\n            case 'initial':\r\n                return STATE_NEW;\r\n            case 'translated':\r\n                return STATE_TRANSLATED;\r\n            case 'reviewed': // same as translated\r\n                return STATE_TRANSLATED;\r\n            case 'final':\r\n                return STATE_FINAL;\r\n            default:\r\n                return STATE_NEW;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * All the source elements in the trans unit.\r\n     * The source element is a reference to the original template.\r\n     * It contains the name of the template file and a line number with the position inside the template.\r\n     * It is just a help for translators to find the context for the translation.\r\n     * This is set when using Angular 4.0 or greater.\r\n     * Otherwise it just returns an empty array.\r\n     */\r\n    public sourceReferences(): {sourcefile: string, linenumber: number}[] {\r\n        // Source is found as <file>:<line> in <note category=\"location\">...\r\n        const noteElements = this._element.getElementsByTagName('note');\r\n        const sourceRefs: { sourcefile: string, linenumber: number }[] = [];\r\n        for (let i = 0; i < noteElements.length; i++) {\r\n            const noteElem = noteElements.item(i);\r\n            if (noteElem.getAttribute('category') === 'location') {\r\n                const sourceAndPos: string = DOMUtilities.getPCDATA(noteElem);\r\n                sourceRefs.push(this.parseSourceAndPos(sourceAndPos));\r\n            }\r\n        }\r\n        return sourceRefs;\r\n    }\r\n\r\n    /**\r\n     * Parses something like 'c:\\xxx:7' and returns source and linenumber.\r\n     * @param sourceAndPos something like 'c:\\xxx:7', last colon is the separator\r\n     * @return source and line number\r\n     */\r\n    private parseSourceAndPos(sourceAndPos: string): { sourcefile: string, linenumber } {\r\n        const index = sourceAndPos.lastIndexOf(':');\r\n        if (index < 0) {\r\n            return {\r\n                sourcefile: sourceAndPos,\r\n                linenumber: 0\r\n            };\r\n        } else {\r\n            return {\r\n                sourcefile: sourceAndPos.substring(0, index),\r\n                linenumber: this.parseLineNumber(sourceAndPos.substring(index + 1))\r\n            };\r\n        }\r\n    }\r\n\r\n    private parseLineNumber(lineNumberString: string): number {\r\n        return Number.parseInt(lineNumberString, 10);\r\n    }\r\n\r\n    /**\r\n     * Set source ref elements in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing source refs.\r\n     * @param sourceRefs the sourcerefs to set. Old ones are removed.\r\n     */\r\n    public setSourceReferences(sourceRefs: {sourcefile: string, linenumber: number}[]) {\r\n        this.removeAllSourceReferences();\r\n        let notesElement = DOMUtilities.getFirstElementByTagName(this._element, 'notes');\r\n        if (sourceRefs.length === 0 && !isNullOrUndefined(notesElement) && notesElement.childNodes.length === 0) {\r\n            // remove empty notes element\r\n            notesElement.parentNode.removeChild(notesElement);\r\n            return;\r\n        }\r\n        if (isNullOrUndefined(notesElement)) {\r\n            notesElement = this._element.ownerDocument.createElement('notes');\r\n            this._element.insertBefore(notesElement, this._element.childNodes.item(0));\r\n        }\r\n        sourceRefs.forEach((ref) => {\r\n            const note = this._element.ownerDocument.createElement('note');\r\n            note.setAttribute('category', 'location');\r\n            note.appendChild(this._element.ownerDocument.createTextNode(ref.sourcefile + ':' + ref.linenumber.toString(10)));\r\n            notesElement.appendChild(note);\r\n        });\r\n    }\r\n\r\n    private removeAllSourceReferences() {\r\n        const noteElements = this._element.getElementsByTagName('note');\r\n        const toBeRemoved = [];\r\n        for (let i = 0; i < noteElements.length; i++) {\r\n            const elem = noteElements.item(i);\r\n            if (elem.getAttribute('category') === 'location') {\r\n                toBeRemoved.push(elem);\r\n            }\r\n        }\r\n        toBeRemoved.forEach((elem) => {elem.parentNode.removeChild(elem); });\r\n    }\r\n\r\n    /**\r\n     * The description set in the template as value of the i18n-attribute.\r\n     * e.g. i18n=\"mydescription\".\r\n     * In xliff 2.0 this is stored as a note element with attribute category=\"description\".\r\n     */\r\n    public description(): string {\r\n        const noteElem = this.findNoteElementWithCategoryAttribute('description');\r\n        if (noteElem) {\r\n            return DOMUtilities.getPCDATA(noteElem);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change description property of trans-unit.\r\n     * @param description description\r\n     */\r\n    public setDescription(description: string) {\r\n        const noteElem = this.findNoteElementWithCategoryAttribute('description');\r\n        if (description) {\r\n            if (isNullOrUndefined(noteElem)) {\r\n                // create it\r\n                this.createNoteElementWithCategoryAttribute('description', description);\r\n            } else {\r\n                DOMUtilities.replaceContentWithXMLContent(noteElem, description);\r\n            }\r\n        } else {\r\n            if (!isNullOrUndefined(noteElem)) {\r\n                // remove node\r\n                this.removeNoteElementWithCategoryAttribute('description');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find a note element with attribute category='<attrValue>'\r\n     * @param attrValue value of category attribute\r\n     * @return element or null is absent\r\n     */\r\n    private findNoteElementWithCategoryAttribute(attrValue: string): Element {\r\n        const noteElements = this._element.getElementsByTagName('note');\r\n        for (let i = 0; i < noteElements.length; i++) {\r\n            const noteElem = noteElements.item(i);\r\n            if (noteElem.getAttribute('category') === attrValue) {\r\n                return noteElem;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get all note elements where from attribute is not description or meaning\r\n     * @return elements\r\n     */\r\n    private findAllAdditionalNoteElements(): Element[] {\r\n        const noteElements = this._element.getElementsByTagName('note');\r\n        const result: Element[] = [];\r\n        for (let i = 0; i < noteElements.length; i++) {\r\n            const noteElem = noteElements.item(i);\r\n            const fromAttribute = noteElem.getAttribute('category');\r\n            if (fromAttribute !== 'description' && fromAttribute !== 'meaning') {\r\n                result.push(noteElem);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Create a new note element with attribute from='<attrValue>'\r\n     * @param attrValue category attribute value\r\n     * @param content content of note element\r\n     * @return the new created element\r\n     */\r\n    private createNoteElementWithCategoryAttribute(attrValue: string, content: string): Element {\r\n        let notesElement = DOMUtilities.getFirstElementByTagName(this._element, 'notes');\r\n        if (isNullOrUndefined(notesElement)) {\r\n            // create it\r\n            notesElement = this._element.ownerDocument.createElement('notes');\r\n            this._element.appendChild(notesElement);\r\n        }\r\n        const noteElement = this._element.ownerDocument.createElement('note');\r\n        if (attrValue) {\r\n            noteElement.setAttribute('category', attrValue);\r\n        }\r\n        if (content) {\r\n            DOMUtilities.replaceContentWithXMLContent(noteElement, content);\r\n        }\r\n        notesElement.appendChild(noteElement);\r\n        return noteElement;\r\n    }\r\n\r\n    private removeNotesElementIfEmpty() {\r\n        const notesElement = DOMUtilities.getFirstElementByTagName(this._element, 'notes');\r\n        if (notesElement) {\r\n            const childNote = DOMUtilities.getFirstElementByTagName(this._element, 'note');\r\n            if (!childNote) {\r\n                // remove notes element\r\n                notesElement.parentNode.removeChild(notesElement);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove note element with attribute from='<attrValue>'\r\n     * @param attrValue attrValue\r\n     */\r\n    private removeNoteElementWithCategoryAttribute(attrValue: string) {\r\n        const noteElement = this.findNoteElementWithCategoryAttribute(attrValue);\r\n        if (noteElement) {\r\n            noteElement.parentNode.removeChild(noteElement);\r\n        }\r\n        this.removeNotesElementIfEmpty();\r\n    }\r\n\r\n    /**\r\n     * Remove all note elements where attribute \"from\" is not description or meaning.\r\n     */\r\n    private removeAllAdditionalNoteElements() {\r\n        const noteElements = this.findAllAdditionalNoteElements();\r\n        noteElements.forEach((noteElement) => {\r\n            noteElement.parentNode.removeChild(noteElement);\r\n        });\r\n        this.removeNotesElementIfEmpty();\r\n    }\r\n\r\n    /**\r\n     * The meaning (intent) set in the template as value of the i18n-attribute.\r\n     * This is the part in front of the | symbol.\r\n     * e.g. i18n=\"meaning|mydescription\".\r\n     * In xliff 2.0 this is stored as a note element with attribute category=\"meaning\".\r\n     */\r\n    public meaning(): string {\r\n        const noteElem = this.findNoteElementWithCategoryAttribute('meaning');\r\n        if (noteElem) {\r\n            return DOMUtilities.getPCDATA(noteElem);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change meaning property of trans-unit.\r\n     * @param meaning meaning\r\n     */\r\n    public setMeaning(meaning: string) {\r\n        const noteElem = this.findNoteElementWithCategoryAttribute('meaning');\r\n        if (meaning) {\r\n            if (isNullOrUndefined(noteElem)) {\r\n                // create it\r\n                this.createNoteElementWithCategoryAttribute('meaning', meaning);\r\n            } else {\r\n                DOMUtilities.replaceContentWithXMLContent(noteElem, meaning);\r\n            }\r\n        } else {\r\n            if (!isNullOrUndefined(noteElem)) {\r\n                // remove node\r\n                this.removeNoteElementWithCategoryAttribute('meaning');\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get all notes of the trans-unit.\r\n     * Notes are remarks made by a translator.\r\n     * (description and meaning are not included here!)\r\n     */\r\n    public notes(): INote[] {\r\n        const noteElememts: Element[] = this.findAllAdditionalNoteElements();\r\n        return noteElememts.map(elem => {\r\n            return {\r\n                from: elem.getAttribute('category'),\r\n                text: DOMUtilities.getPCDATA(elem)\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Test, wether setting of notes is supported.\r\n     * If not, setNotes will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    public supportsSetNotes(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Add notes to trans unit.\r\n     * @param newNotes the notes to add.\r\n     */\r\n    public setNotes(newNotes: INote[]) {\r\n        if (!isNullOrUndefined(newNotes)) {\r\n            this.checkNotes(newNotes);\r\n        }\r\n        this.removeAllAdditionalNoteElements();\r\n        if (!isNullOrUndefined(newNotes)) {\r\n            newNotes.forEach((note) => {\r\n                this.createNoteElementWithCategoryAttribute(note.from, note.text);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the translation to a given string (including markup).\r\n     * @param translation translation\r\n     */\r\n    protected translateNative(translation: string) {\r\n        let target = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        if (!target) {\r\n            const source = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n            target = source.parentNode.appendChild(this._element.ownerDocument.createElement('target'));\r\n        }\r\n        DOMUtilities.replaceContentWithXMLContent(target, <string> translation);\r\n        this.setTargetState(STATE_TRANSLATED);\r\n    }\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * Returns a changed copy of this trans unit.\r\n     * receiver is not changed.\r\n     * (internal usage only, a client should call importNewTransUnit on ITranslationMessageFile)\r\n     */\r\n    public cloneWithSourceAsTarget(isDefaultLang: boolean, copyContent: boolean, targetFile: ITranslationMessagesFile): AbstractTransUnit {\r\n        const element = <Element> this._element.cloneNode(true);\r\n        const clone = new Xliff2TransUnit(element, this._id, targetFile);\r\n        clone.useSourceAsTarget(isDefaultLang, copyContent);\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * (internal usage only, a client should call createTranslationFileForLang on ITranslationMessageFile)\r\n     */\r\n    public useSourceAsTarget(isDefaultLang: boolean, copyContent: boolean) {\r\n        const source = DOMUtilities.getFirstElementByTagName(this._element, 'source');\r\n        let target = DOMUtilities.getFirstElementByTagName(this._element, 'target');\r\n        if (!target) {\r\n            target = source.parentNode.appendChild(this._element.ownerDocument.createElement('target'));\r\n        }\r\n        if (isDefaultLang || copyContent) {\r\n            const sourceString = DOMUtilities.getXMLContent(source);\r\n            let newTargetString = sourceString;\r\n            if (!this.isICUMessage(sourceString)) {\r\n                newTargetString = this.translationMessagesFile().getNewTransUnitTargetPraefix()\r\n                    + sourceString\r\n                    + this.translationMessagesFile().getNewTransUnitTargetSuffix();\r\n            }\r\n            DOMUtilities.replaceContentWithXMLContent(target, newTargetString);\r\n        } else {\r\n            DOMUtilities.replaceContentWithXMLContent(target, '');\r\n        }\r\n        const segment = DOMUtilities.getFirstElementByTagName(this._element, 'segment');\r\n        if (segment) {\r\n            if (isDefaultLang) {\r\n                segment.setAttribute('state', this.mapStateToNativeState(STATE_FINAL));\r\n            } else {\r\n                segment.setAttribute('state', this.mapStateToNativeState(STATE_NEW));\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import {format} from 'util';\r\nimport {ITranslationMessagesFile} from '../api/i-translation-messages-file';\r\nimport {ITransUnit} from '../api/i-trans-unit';\r\nimport {FORMAT_XLIFF20, FILETYPE_XLIFF20} from '../api/constants';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {Xliff2TransUnit} from './xliff2-trans-unit';\r\nimport {AbstractTranslationMessagesFile} from './abstract-translation-messages-file';\r\nimport {AbstractTransUnit} from './abstract-trans-unit';\r\n/**\r\n * Created by martin on 04.05.2017.\r\n * An XLIFF 2.0 file read from a source file.\r\n * Format definition is: http://docs.oasis-open.org/xliff/xliff-core/v2.0/os/xliff-core-v2.0-os.html\r\n *\r\n * Defines some relevant get and set method for reading and modifying such a file.\r\n */\r\n\r\nexport class Xliff2File extends AbstractTranslationMessagesFile implements ITranslationMessagesFile {\r\n\r\n    /**\r\n     * Create an XLIFF 2.0-File from source.\r\n     * @param xmlString source read from file.\r\n     * @param path Path to file\r\n     * @param encoding optional encoding of the xml.\r\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\r\n     * @return xliff file\r\n     */\r\n    constructor(xmlString: string, path: string, encoding: string) {\r\n        super();\r\n        this._warnings = [];\r\n        this._numberOfTransUnitsWithMissingId = 0;\r\n        this.initializeFromContent(xmlString, path, encoding);\r\n    }\r\n\r\n    private initializeFromContent(xmlString: string, path: string, encoding: string): Xliff2File {\r\n        this.parseContent(xmlString, path, encoding);\r\n        const xliffList = this._parsedDocument.getElementsByTagName('xliff');\r\n        if (xliffList.length !== 1) {\r\n            throw new Error(format('File \"%s\" seems to be no xliff file (should contain an xliff element)', path));\r\n        } else {\r\n            const version = xliffList.item(0).getAttribute('version');\r\n            const expectedVersion = '2.0';\r\n            if (version !== expectedVersion) {\r\n                throw new Error(format('File \"%s\" seems to be no xliff 2 file, version should be %s, found %s',\r\n                    path, expectedVersion, version));\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * File format as it is used in config files.\r\n     * Currently 'xlf', 'xmb', 'xmb2'\r\n     * Returns one of the constants FORMAT_..\r\n     */\r\n    public i18nFormat(): string {\r\n        return FORMAT_XLIFF20;\r\n    }\r\n\r\n    /**\r\n     * File type.\r\n     * Here 'XLIFF 2.0'\r\n     */\r\n    public fileType(): string {\r\n        return FILETYPE_XLIFF20;\r\n    }\r\n\r\n    /**\r\n     * return tag names of all elements that have mixed content.\r\n     * These elements will not be beautified.\r\n     * Typical candidates are source and target.\r\n     */\r\n    protected elementsWithMixedContent(): string[] {\r\n        return ['skeleton', 'note', 'data', 'source', 'target', 'pc', 'mrk'];\r\n    }\r\n\r\n    protected initializeTransUnits() {\r\n        this.transUnits = [];\r\n        const transUnitsInFile = this._parsedDocument.getElementsByTagName('unit');\r\n        for (let i = 0; i < transUnitsInFile.length; i++) {\r\n            const transunit = transUnitsInFile.item(i);\r\n            const id = transunit.getAttribute('id');\r\n            if (!id) {\r\n                this._warnings.push(format('oops, trans-unit without \"id\" found in master, please check file %s', this._filename));\r\n            }\r\n            this.transUnits.push(new Xliff2TransUnit(transunit, id, this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get source language.\r\n     * @return source language.\r\n     */\r\n    public sourceLanguage(): string {\r\n        const xliffElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'xliff');\r\n        if (xliffElem) {\r\n            return xliffElem.getAttribute('srcLang');\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Edit the source language.\r\n     * @param language language\r\n     */\r\n    public setSourceLanguage(language: string) {\r\n        const xliffElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'xliff');\r\n        if (xliffElem) {\r\n            xliffElem.setAttribute('srcLang', language);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get target language.\r\n     * @return target language.\r\n     */\r\n    public targetLanguage(): string {\r\n        const xliffElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'xliff');\r\n        if (xliffElem) {\r\n            return xliffElem.getAttribute('trgLang');\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Edit the target language.\r\n     * @param language language\r\n     */\r\n    public setTargetLanguage(language: string) {\r\n        const xliffElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'xliff');\r\n        if (xliffElem) {\r\n            xliffElem.setAttribute('trgLang', language);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new trans-unit to this file.\r\n     * The trans unit stems from another file.\r\n     * It copies the source content of the tu to the target content too,\r\n     * depending on the values of isDefaultLang and copyContent.\r\n     * So the source can be used as a dummy translation.\r\n     * (used by xliffmerge)\r\n     * @param foreignTransUnit the trans unit to be imported.\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     * @param importAfterElement optional (since 1.10) other transunit (part of this file), that should be used as ancestor.\r\n     * Newly imported trans unit is then inserted directly after this element.\r\n     * If not set or not part of this file, new unit will be imported at the end.\r\n     * If explicity set to null, new unit will be imported at the start.\r\n     * @return the newly imported trans unit (since version 1.7.0)\r\n     * @throws an error if trans-unit with same id already is in the file.\r\n     */\r\n    importNewTransUnit(foreignTransUnit: ITransUnit, isDefaultLang: boolean, copyContent: boolean, importAfterElement?: ITransUnit)\r\n        : ITransUnit {\r\n        if (this.transUnitWithId(foreignTransUnit.id)) {\r\n            throw new Error(format('tu with id %s already exists in file, cannot import it', foreignTransUnit.id));\r\n        }\r\n        const newTu = (<AbstractTransUnit> foreignTransUnit).cloneWithSourceAsTarget(isDefaultLang, copyContent, this);\r\n        const fileElement = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'file');\r\n        if (!fileElement) {\r\n            throw new Error(format('File \"%s\" seems to be no xliff 2.0 file (should contain a file element)', this._filename));\r\n        }\r\n        let inserted = false;\r\n        let isAfterElementPartOfFile = false;\r\n        if (!!importAfterElement) {\r\n            const insertionPoint = this.transUnitWithId(importAfterElement.id);\r\n            if (!!insertionPoint) {\r\n                isAfterElementPartOfFile = true;\r\n            }\r\n        }\r\n        if (importAfterElement === undefined || (importAfterElement && !isAfterElementPartOfFile)) {\r\n            fileElement.appendChild(newTu.asXmlElement());\r\n            inserted = true;\r\n        } else if (importAfterElement === null) {\r\n            const firstUnitElement = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'unit');\r\n            if (firstUnitElement) {\r\n                DOMUtilities.insertBefore(newTu.asXmlElement(), firstUnitElement);\r\n                inserted = true;\r\n            } else {\r\n                // no trans-unit, empty file, so add to first file element\r\n                fileElement.appendChild(newTu.asXmlElement());\r\n                inserted = true;\r\n            }\r\n        } else {\r\n            const refUnitElement = DOMUtilities.getElementByTagNameAndId(this._parsedDocument, 'unit', importAfterElement.id);\r\n            if (refUnitElement) {\r\n                DOMUtilities.insertAfter(newTu.asXmlElement(), refUnitElement);\r\n                inserted = true;\r\n            }\r\n        }\r\n        if (inserted) {\r\n            this.lazyInitializeTransUnits();\r\n            this.transUnits.push(newTu);\r\n            this.countNumbers();\r\n            return newTu;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new translation file for this file for a given language.\r\n     * Normally, this is just a copy of the original one.\r\n     * But for XMB the translation file has format 'XTB'.\r\n     * @param lang Language code\r\n     * @param filename expected filename to store file\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     */\r\n    public createTranslationFileForLang(lang: string, filename: string, isDefaultLang: boolean, copyContent: boolean)\r\n        : ITranslationMessagesFile {\r\n        const translationFile = new Xliff2File(this.editedContent(), filename, this.encoding());\r\n        translationFile.setNewTransUnitTargetPraefix(this.targetPraefix);\r\n        translationFile.setNewTransUnitTargetSuffix(this.targetSuffix);\r\n        translationFile.setTargetLanguage(lang);\r\n        translationFile.forEachTransUnit((transUnit: ITransUnit) => {\r\n            (<AbstractTransUnit> transUnit).useSourceAsTarget(isDefaultLang, copyContent);\r\n        });\r\n        return translationFile;\r\n    }\r\n}\r\n","import {isNullOrUndefined} from 'util';\r\nimport {ITranslationMessagesFile} from '../api/i-translation-messages-file';\r\nimport {INormalizedMessage} from '../api/i-normalized-message';\r\nimport {ITransUnit} from '../api/i-trans-unit';\r\nimport {INote} from '../api/i-note';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {AbstractTransUnit} from './abstract-trans-unit';\r\nimport {XmbMessageParser} from './xmb-message-parser';\r\nimport {ParsedMessage} from './parsed-message';\r\nimport {AbstractMessageParser} from './abstract-message-parser';\r\n/**\r\n * Created by martin on 23.05.2017.\r\n * A Translation Unit in an XTB file.\r\n */\r\n\r\nexport class XtbTransUnit extends AbstractTransUnit implements ITransUnit {\r\n\r\n    private _sourceTransUnitFromMaster: AbstractTransUnit;\r\n\r\n    constructor(_element: Element, _id: string, _translationMessagesFile: ITranslationMessagesFile,\r\n                _sourceTransUnitFromMaster: AbstractTransUnit) {\r\n        super(_element, _id, _translationMessagesFile);\r\n        this._sourceTransUnitFromMaster = _sourceTransUnitFromMaster;\r\n    }\r\n\r\n    /**\r\n     * Get content to translate.\r\n     * Source parts are excluded here.\r\n     * @return content to translate.\r\n     */\r\n    public sourceContent(): string {\r\n        if (this._sourceTransUnitFromMaster) {\r\n            return this._sourceTransUnitFromMaster.sourceContent();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test, wether setting of source content is supported.\r\n     * If not, setSourceContent in trans-unit will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    supportsSetSourceContent(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set new source content in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing changed source content.\r\n     * @param newContent the new content.\r\n     */\r\n    public setSourceContent(newContent: string) {\r\n        // xtb has no source content, they are part of the master\r\n    }\r\n\r\n    /**\r\n     * Return a parser used for normalized messages.\r\n     */\r\n    protected messageParser(): AbstractMessageParser {\r\n        return new XmbMessageParser(); // no typo!, Same as for Xmb\r\n    }\r\n\r\n    /**\r\n     * The original text value, that is to be translated, as normalized message.\r\n     */\r\n    public createSourceContentNormalized(): ParsedMessage {\r\n        if (this._sourceTransUnitFromMaster) {\r\n            return this._sourceTransUnitFromMaster.createSourceContentNormalized();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * the translated value (containing all markup, depends on the concrete format used).\r\n     */\r\n    public targetContent(): string {\r\n        return DOMUtilities.getXMLContent(this._element);\r\n    }\r\n\r\n    /**\r\n     * the translated value, but all placeholders are replaced with {{n}} (starting at 0)\r\n     * and all embedded html is replaced by direct html markup.\r\n     */\r\n    targetContentNormalized(): INormalizedMessage {\r\n        return this.messageParser().createNormalizedMessageFromXML(this._element, this.sourceContentNormalized());\r\n    }\r\n\r\n    /**\r\n     * State of the translation.\r\n     * (not supported in xmb)\r\n     * If we have a master, we assumed it is translated if the content is not the same as the masters one.\r\n     */\r\n    public nativeTargetState(): string {\r\n        if (this._sourceTransUnitFromMaster) {\r\n            const sourceContent = this._sourceTransUnitFromMaster.sourceContent();\r\n            if (!sourceContent || sourceContent === this.targetContent() || !this.targetContent()) {\r\n                return 'new';\r\n            } else {\r\n                return 'final';\r\n            }\r\n        }\r\n        return null; // not supported in xmb\r\n    }\r\n\r\n    /**\r\n     * Map an abstract state (new, translated, final) to a concrete state used in the xml.\r\n     * Returns the state to be used in the xml.\r\n     * @param state one of Constants.STATE...\r\n     * @returns a native state (depends on concrete format)\r\n     * @throws error, if state is invalid.\r\n     */\r\n    protected mapStateToNativeState(state: string): string {\r\n        return state;\r\n    }\r\n\r\n    /**\r\n     * Map a native state (found in the document) to an abstract state (new, translated, final).\r\n     * Returns the abstract state.\r\n     * @param nativeState nativeState\r\n     */\r\n    protected mapNativeStateToState(nativeState: string): string {\r\n        return nativeState;\r\n    }\r\n\r\n    /**\r\n     * set state in xml.\r\n     * (not supported in xmb)\r\n     * @param nativeState nativeState\r\n     */\r\n    protected setNativeTargetState(nativeState: string) {\r\n        // TODO some logic to store it anywhere\r\n    }\r\n\r\n    /**\r\n     * All the source elements in the trans unit.\r\n     * The source element is a reference to the original template.\r\n     * It contains the name of the template file and a line number with the position inside the template.\r\n     * It is just a help for translators to find the context for the translation.\r\n     * This is set when using Angular 4.0 or greater.\r\n     * Otherwise it just returns an empty array.\r\n     */\r\n    public sourceReferences(): { sourcefile: string, linenumber: number }[] {\r\n        if (this._sourceTransUnitFromMaster) {\r\n            return this._sourceTransUnitFromMaster.sourceReferences();\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test, wether setting of source refs is supported.\r\n     * If not, setSourceReferences will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    public supportsSetSourceReferences(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Set source ref elements in the transunit.\r\n     * Normally, this is done by ng-extract.\r\n     * Method only exists to allow xliffmerge to merge missing source refs.\r\n     * @param sourceRefs the sourcerefs to set. Old ones are removed.\r\n     */\r\n    public setSourceReferences(sourceRefs: {sourcefile: string, linenumber: number}[]) {\r\n        // xtb has no source refs, they are part of the master\r\n    }\r\n\r\n    /**\r\n     * The description set in the template as value of the i18n-attribute.\r\n     * e.g. i18n=\"mydescription\".\r\n     * In xtb only the master stores it.\r\n     */\r\n    public description(): string {\r\n        if (this._sourceTransUnitFromMaster) {\r\n            return this._sourceTransUnitFromMaster.description();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The meaning (intent) set in the template as value of the i18n-attribute.\r\n     * This is the part in front of the | symbol.\r\n     * e.g. i18n=\"meaning|mydescription\".\r\n     * In xtb only the master stores it.\r\n     */\r\n    public meaning(): string {\r\n        if (this._sourceTransUnitFromMaster) {\r\n            return this._sourceTransUnitFromMaster.meaning();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test, wether setting of description and meaning is supported.\r\n     * If not, setDescription and setMeaning will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    public supportsSetDescriptionAndMeaning(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Change description property of trans-unit.\r\n     * @param description description\r\n     */\r\n    public setDescription(description: string) {\r\n        // not supported, do nothing\r\n    }\r\n\r\n    /**\r\n     * Change meaning property of trans-unit.\r\n     * @param meaning meaning\r\n     */\r\n    public setMeaning(meaning: string) {\r\n        // not supported, do nothing\r\n    }\r\n\r\n    /**\r\n     * Get all notes of the trans-unit.\r\n     * There are NO notes in xmb/xtb\r\n     */\r\n    public notes(): INote[] {\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Test, wether setting of notes is supported.\r\n     * If not, setNotes will do nothing.\r\n     * xtb does not support this, all other formats do.\r\n     */\r\n    public supportsSetNotes(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Add notes to trans unit.\r\n     * @param newNotes the notes to add.\r\n     * NOT Supported in xmb/xtb\r\n     */\r\n    public setNotes(newNotes: INote[]) {\r\n        // not supported, do nothing\r\n    }\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * Returns a changed copy of this trans unit.\r\n     * receiver is not changed.\r\n     * (internal usage only, a client should call importNewTransUnit on ITranslationMessageFile)\r\n     * In xtb there is nothing to do, because there is only a target, no source.\r\n     */\r\n    public cloneWithSourceAsTarget(isDefaultLang: boolean, copyContent: boolean, targetFile: ITranslationMessagesFile): AbstractTransUnit {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copy source to target to use it as dummy translation.\r\n     * (internal usage only, a client should call createTranslationFileForLang on ITranslationMessageFile)\r\n     */\r\n    public useSourceAsTarget(isDefaultLang: boolean, copyContent: boolean) {\r\n        // do nothing\r\n    }\r\n\r\n    /**\r\n     * Set the translation to a given string (including markup).\r\n     * @param translation translation\r\n     */\r\n    protected translateNative(translation: string) {\r\n        const target = this._element;\r\n        if (isNullOrUndefined(translation)) {\r\n            translation = '';\r\n        }\r\n        DOMUtilities.replaceContentWithXMLContent(target, translation);\r\n    }\r\n\r\n}\r\n","import {ITranslationMessagesFileFactory} from '../api/i-translation-messages-file-factory';\r\nimport {ITranslationMessagesFile} from '../api/i-translation-messages-file';\r\nimport {ITransUnit} from '../api/i-trans-unit';\r\nimport {FORMAT_XTB, FILETYPE_XTB, FORMAT_XMB} from '../api/constants';\r\nimport {format} from 'util';\r\nimport {DOMUtilities} from './dom-utilities';\r\nimport {AbstractTranslationMessagesFile} from './abstract-translation-messages-file';\r\nimport {XtbTransUnit} from './xtb-trans-unit';\r\nimport {AbstractTransUnit} from './abstract-trans-unit';\r\n/**\r\n * Created by martin on 23.05.2017.\r\n * xtb-File access.\r\n * xtb is the translated counterpart to xmb.\r\n */\r\n\r\nexport class XtbFile extends AbstractTranslationMessagesFile implements ITranslationMessagesFile {\r\n\r\n    // attached master file, if any\r\n    // used as source to determine state ...\r\n    private _masterFile: ITranslationMessagesFile; // an xmb-file\r\n\r\n    /**\r\n     * Create an xmb-File from source.\r\n     * @param _translationMessageFileFactory factory to create a translation file (xtb) for the xmb file\r\n     * @param xmlString file content\r\n     * @param path Path to file\r\n     * @param encoding optional encoding of the xml.\r\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\r\n     * @param optionalMaster in case of xmb the master file, that contains the original texts.\r\n     * (this is used to support state infos, that are based on comparing original with translated version)\r\n     * @return XmbFile\r\n     */\r\n    constructor(private _translationMessageFileFactory: ITranslationMessagesFileFactory,\r\n                xmlString: string, path: string, encoding: string,\r\n                optionalMaster?: { xmlContent: string, path: string, encoding: string }) {\r\n        super();\r\n        this._warnings = [];\r\n        this._numberOfTransUnitsWithMissingId = 0;\r\n        this.initializeFromContent(xmlString, path, encoding, optionalMaster);\r\n    }\r\n\r\n    private initializeFromContent(xmlString: string, path: string, encoding: string,\r\n                                  optionalMaster?: { xmlContent: string, path: string, encoding: string }): XtbFile {\r\n        this.parseContent(xmlString, path, encoding);\r\n        if (this._parsedDocument.getElementsByTagName('translationbundle').length !== 1) {\r\n            throw new Error(format('File \"%s\" seems to be no xtb file (should contain a translationbundle element)', path));\r\n        }\r\n        if (optionalMaster) {\r\n            try {\r\n                this._masterFile = this._translationMessageFileFactory.createFileFromFileContent(\r\n                    FORMAT_XMB,\r\n                    optionalMaster.xmlContent,\r\n                    optionalMaster.path,\r\n                    optionalMaster.encoding);\r\n                // check, wether this can be the master ...\r\n                const numberInMaster = this._masterFile.numberOfTransUnits();\r\n                const myNumber = this.numberOfTransUnits();\r\n                if (numberInMaster !== myNumber) {\r\n                    this._warnings.push(format(\r\n                        '%s trans units found in master, but this file has %s. Check if it is the correct master',\r\n                        numberInMaster, myNumber));\r\n                }\r\n            } catch (error) {\r\n                throw new Error(format('File \"%s\" seems to be no xmb file. An xtb file needs xmb as master file.', optionalMaster.path));\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n\r\n    protected initializeTransUnits() {\r\n        this.transUnits = [];\r\n        const transUnitsInFile = this._parsedDocument.getElementsByTagName('translation');\r\n        for (let i = 0; i < transUnitsInFile.length; i++) {\r\n            const msg = transUnitsInFile.item(i);\r\n            const id = msg.getAttribute('id');\r\n            if (!id) {\r\n                this._warnings.push(format('oops, msg without \"id\" found in master, please check file %s', this._filename));\r\n            }\r\n            let masterUnit: ITransUnit = null;\r\n            if (this._masterFile) {\r\n                masterUnit = this._masterFile.transUnitWithId(id);\r\n            }\r\n            this.transUnits.push(new XtbTransUnit(msg, id, this, <AbstractTransUnit> masterUnit));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * File format as it is used in config files.\r\n     * Currently 'xlf', 'xlf2', 'xmb', 'xtb'\r\n     * Returns one of the constants FORMAT_..\r\n     */\r\n    public i18nFormat(): string {\r\n        return FORMAT_XTB;\r\n    }\r\n\r\n    /**\r\n     * File type.\r\n     * Here 'XTB'\r\n     */\r\n    public fileType(): string {\r\n        return FILETYPE_XTB;\r\n    }\r\n\r\n    /**\r\n     * return tag names of all elements that have mixed content.\r\n     * These elements will not be beautified.\r\n     * Typical candidates are source and target.\r\n     */\r\n    protected elementsWithMixedContent(): string[] {\r\n        return ['translation'];\r\n    }\r\n\r\n    /**\r\n     * Get source language.\r\n     * Unsupported in xmb/xtb.\r\n     * Try to guess it from master filename if any..\r\n     * @return source language.\r\n     */\r\n    public sourceLanguage(): string {\r\n        if (this._masterFile) {\r\n            return this._masterFile.sourceLanguage();\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Edit the source language.\r\n     * Unsupported in xmb/xtb.\r\n     * @param language language\r\n     */\r\n    public setSourceLanguage(language: string) {\r\n        // do nothing, xtb has no notation for this.\r\n    }\r\n\r\n    /**\r\n     * Get target language.\r\n     * @return target language.\r\n     */\r\n    public targetLanguage(): string {\r\n        const translationbundleElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'translationbundle');\r\n        if (translationbundleElem) {\r\n            return translationbundleElem.getAttribute('lang');\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Edit the target language.\r\n     * @param language language\r\n     */\r\n    public setTargetLanguage(language: string) {\r\n        const translationbundleElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'translationbundle');\r\n        if (translationbundleElem) {\r\n            translationbundleElem.setAttribute('lang', language);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a new trans-unit to this file.\r\n     * The trans unit stems from another file.\r\n     * It copies the source content of the tu to the target content too,\r\n     * depending on the values of isDefaultLang and copyContent.\r\n     * So the source can be used as a dummy translation.\r\n     * (used by xliffmerge)\r\n     * @param foreignTransUnit the trans unit to be imported.\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     * @param importAfterElement optional (since 1.10) other transunit (part of this file), that should be used as ancestor.\r\n     * Newly imported trans unit is then inserted directly after this element.\r\n     * If not set or not part of this file, new unit will be imported at the end.\r\n     * If explicity set to null, new unit will be imported at the start.\r\n     * @return the newly imported trans unit (since version 1.7.0)\r\n     * @throws an error if trans-unit with same id already is in the file.\r\n     */\r\n    importNewTransUnit(foreignTransUnit: ITransUnit, isDefaultLang: boolean, copyContent: boolean, importAfterElement?: ITransUnit)\r\n        : ITransUnit {\r\n        if (this.transUnitWithId(foreignTransUnit.id)) {\r\n            throw new Error(format('tu with id %s already exists in file, cannot import it', foreignTransUnit.id));\r\n        }\r\n        const newMasterTu = (<AbstractTransUnit> foreignTransUnit).cloneWithSourceAsTarget(isDefaultLang, copyContent, this);\r\n        const translationbundleElem = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'translationbundle');\r\n        if (!translationbundleElem) {\r\n            throw new Error(format('File \"%s\" seems to be no xtb file (should contain a translationbundle element)', this._filename));\r\n        }\r\n        const translationElement = translationbundleElem.ownerDocument.createElement('translation');\r\n        translationElement.setAttribute('id', foreignTransUnit.id);\r\n        let newContent = (copyContent || isDefaultLang) ? foreignTransUnit.sourceContent() : '';\r\n        if (!(<AbstractTransUnit> foreignTransUnit).isICUMessage(newContent)) {\r\n            newContent = this.getNewTransUnitTargetPraefix() + newContent + this.getNewTransUnitTargetSuffix();\r\n        }\r\n        DOMUtilities.replaceContentWithXMLContent(translationElement, newContent);\r\n        const newTu = new XtbTransUnit(translationElement, foreignTransUnit.id, this, newMasterTu);\r\n        let inserted = false;\r\n        let isAfterElementPartOfFile = false;\r\n        if (!!importAfterElement) {\r\n            const insertionPoint = this.transUnitWithId(importAfterElement.id);\r\n            if (!!insertionPoint) {\r\n                isAfterElementPartOfFile = true;\r\n            }\r\n        }\r\n        if (importAfterElement === undefined || (importAfterElement && !isAfterElementPartOfFile)) {\r\n            translationbundleElem.appendChild(newTu.asXmlElement());\r\n            inserted = true;\r\n        } else if (importAfterElement === null) {\r\n            const firstTranslationElement = DOMUtilities.getFirstElementByTagName(this._parsedDocument, 'translation');\r\n            if (firstTranslationElement) {\r\n                DOMUtilities.insertBefore(newTu.asXmlElement(), firstTranslationElement);\r\n                inserted = true;\r\n            } else {\r\n                // no trans-unit, empty file, so add to bundle at end\r\n                translationbundleElem.appendChild(newTu.asXmlElement());\r\n                inserted = true;\r\n            }\r\n        } else {\r\n            const refUnitElement = DOMUtilities.getElementByTagNameAndId(this._parsedDocument, 'translation', importAfterElement.id);\r\n            if (refUnitElement) {\r\n                DOMUtilities.insertAfter(newTu.asXmlElement(), refUnitElement);\r\n                inserted = true;\r\n            }\r\n        }\r\n        if (inserted) {\r\n            this.lazyInitializeTransUnits();\r\n            this.transUnits.push(newTu);\r\n            this.countNumbers();\r\n            return newTu;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a new translation file for this file for a given language.\r\n     * Normally, this is just a copy of the original one.\r\n     * But for XMB the translation file has format 'XTB'.\r\n     * @param lang Language code\r\n     * @param filename expected filename to store file\r\n     * @param isDefaultLang Flag, wether file contains the default language.\r\n     * Then source and target are just equal.\r\n     * The content will be copied.\r\n     * State will be final.\r\n     * @param copyContent Flag, wether to copy content or leave it empty.\r\n     * Wben true, content will be copied from source.\r\n     * When false, content will be left empty (if it is not the default language).\r\n     */\r\n    public createTranslationFileForLang(lang: string, filename: string, isDefaultLang: boolean, copyContent: boolean)\r\n        : ITranslationMessagesFile {\r\n        throw new Error(format('File \"%s\", xtb files are not translatable, they are already translations', filename));\r\n    }\r\n}\r\n","/**\r\n * Created by roobm on 21.03.2017.\r\n */\r\nimport {ITranslationMessagesFile} from './i-translation-messages-file';\r\nimport {XliffFile} from '../impl/xliff-file';\r\nimport {XmbFile} from '../impl/xmb-file';\r\nimport {format} from 'util';\r\nimport {Xliff2File} from '../impl/xliff2-file';\r\nimport {FORMAT_XLIFF12, FORMAT_XLIFF20, FORMAT_XMB, FORMAT_XTB} from './constants';\r\nimport {XtbFile} from '../impl/xtb-file';\r\nimport {ITranslationMessagesFileFactory} from './i-translation-messages-file-factory';\r\n\r\n/**\r\n * Helper class to read translation files depending on format.\r\n * This is part of the public api\r\n */\r\nexport class TranslationMessagesFileFactory implements ITranslationMessagesFileFactory {\r\n\r\n    /**\r\n     * Read file function, result depends on format, either XliffFile or XmbFile.\r\n     * @param i18nFormat currently 'xlf' or 'xlf2' or 'xmb' or 'xtb' are supported\r\n     * @param xmlContent the file content\r\n     * @param path the path of the file (only used to remember it)\r\n     * @param encoding utf-8, ... used to parse XML.\r\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\r\n     * @param optionalMaster in case of xmb the master file, that contains the original texts.\r\n     * (this is used to support state infos, that are based on comparing original with translated version)\r\n     * Ignored for other formats.\r\n     * @return either XliffFile or XmbFile\r\n     */\r\n    public static fromFileContent(i18nFormat: string,\r\n                                  xmlContent: string,\r\n                                  path: string,\r\n                                  encoding: string,\r\n                                  optionalMaster?: {xmlContent: string, path: string, encoding: string}): ITranslationMessagesFile {\r\n        return new TranslationMessagesFileFactory().createFileFromFileContent(i18nFormat, xmlContent, path, encoding, optionalMaster);\r\n    }\r\n\r\n    /**\r\n     * Read file function for any file with unknown format.\r\n     * This functions tries to guess the format based on the filename and the content of the file.\r\n     * Result depends on detected format, either XliffFile or XmbFile.\r\n     * @param xmlContent the file content\r\n     * @param path the path of the file (only used to remember it)\r\n     * @param encoding utf-8, ... used to parse XML.\r\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\r\n     * @param optionalMaster in case of xmb the master file, that contains the original texts.\r\n     * (this is used to support state infos, that are based on comparing original with translated version)\r\n     * Ignored for other formats.\r\n     * @return either XliffFile or XmbFile\r\n     */\r\n    public static fromUnknownFormatFileContent(xmlContent: string,\r\n                                  path: string,\r\n                                  encoding: string,\r\n                                  optionalMaster?: {xmlContent: string, path: string, encoding: string}): ITranslationMessagesFile {\r\n        return new TranslationMessagesFileFactory().createFileFromUnknownFormatFileContent(xmlContent, path, encoding, optionalMaster);\r\n    }\r\n\r\n    /**\r\n     * Read file function, result depends on format, either XliffFile or XmbFile.\r\n     * @param i18nFormat currently 'xlf' or 'xlf2' or 'xmb' or 'xtb' are supported\r\n     * @param xmlContent the file content\r\n     * @param path the path of the file (only used to remember it)\r\n     * @param encoding utf-8, ... used to parse XML.\r\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\r\n     * @param optionalMaster in case of xmb the master file, that contains the original texts.\r\n     * (this is used to support state infos, that are based on comparing original with translated version)\r\n     * Ignored for other formats.\r\n     * @return either XliffFile or XmbFile\r\n     */\r\n    createFileFromFileContent(i18nFormat: string,\r\n                              xmlContent: string,\r\n                              path: string,\r\n                              encoding: string,\r\n                              optionalMaster?: { xmlContent: string, path: string, encoding: string }): ITranslationMessagesFile {\r\n        if (i18nFormat === FORMAT_XLIFF12) {\r\n            return new XliffFile(xmlContent, path, encoding);\r\n        }\r\n        if (i18nFormat === FORMAT_XLIFF20) {\r\n            return new Xliff2File(xmlContent, path, encoding);\r\n        }\r\n        if (i18nFormat === FORMAT_XMB) {\r\n            return new XmbFile(this, xmlContent, path, encoding);\r\n        }\r\n        if (i18nFormat === FORMAT_XTB) {\r\n            return new XtbFile(this, xmlContent, path, encoding, optionalMaster);\r\n        }\r\n        throw new Error(format('oops, unsupported format \"%s\"', i18nFormat));\r\n\r\n    }\r\n\r\n    /**\r\n     * Read file function for any file with unknown format.\r\n     * This functions tries to guess the format based on the filename and the content of the file.\r\n     * Result depends on detected format, either XliffFile or XmbFile.\r\n     * @param xmlContent the file content\r\n     * @param path the path of the file (only used to remember it)\r\n     * @param encoding utf-8, ... used to parse XML.\r\n     * This is read from the file, but if you know it before, you can avoid reading the file twice.\r\n     * @param optionalMaster in case of xmb the master file, that contains the original texts.\r\n     * (this is used to support state infos, that are based on comparing original with translated version)\r\n     * Ignored for other formats.\r\n     * @return either XliffFile or XmbFile\r\n     */\r\n    createFileFromUnknownFormatFileContent(xmlContent: string,\r\n                                           path: string,\r\n                                           encoding: string,\r\n                                           optionalMaster?: { xmlContent: string, path: string, encoding: string })\r\n        : ITranslationMessagesFile {\r\n        let formatCandidates = [FORMAT_XLIFF12, FORMAT_XLIFF20, FORMAT_XMB, FORMAT_XTB];\r\n        if (path && path.endsWith('xmb')) {\r\n            formatCandidates = [FORMAT_XMB, FORMAT_XTB, FORMAT_XLIFF12, FORMAT_XLIFF20];\r\n        }\r\n        if (path && path.endsWith('xtb')) {\r\n            formatCandidates = [FORMAT_XTB, FORMAT_XMB, FORMAT_XLIFF12, FORMAT_XLIFF20];\r\n        }\r\n        // try all candidate formats to get the right one\r\n        for (let i = 0; i < formatCandidates.length; i++) {\r\n            const formatCandidate = formatCandidates[i];\r\n            try {\r\n                const translationFile = TranslationMessagesFileFactory.fromFileContent(\r\n                    formatCandidate, xmlContent, path, encoding, optionalMaster);\r\n                if (translationFile) {\r\n                    return translationFile;\r\n                }\r\n            } catch (e) {\r\n                // seams to be the wrong format\r\n            }\r\n        }\r\n        throw new Error(format('could not identify file format, it is neiter XLIFF (1.2 or 2.0) nor XMB/XTB'));\r\n    }\r\n\r\n}\r\n\r\n"]}